{"ast":null,"code":"var _firebase$apps$;\n\nimport NextAuth from \"next-auth\";\nimport Providers from \"next-auth/providers\";\nimport { FirebaseAdapter } from \"@next-auth/firebase-adapter\";\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: process.env.FIREBASE_apiKey,\n  authDomain: process.env.FIREBASE_authDomain,\n  projectId: process.env.FIREBASE_projectId,\n  storageBucket: process.env.FIREBASE_storageBucket,\n  messagingSenderId: process.env.FIREBASE_messagingSenderId,\n  appId: process.env.FIREBASE_appId,\n  measurementId: process.env.FIREBASE_measurementId\n};\nconst firestore = ((_firebase$apps$ = firebase.apps[0]) !== null && _firebase$apps$ !== void 0 ? _firebase$apps$ : firebase.initializeApp(firebaseConfig)).firestore();\nexport default NextAuth({\n  providers: [Providers.Google({\n    clientId: process.env.GOOGLE_ID,\n    clientSecret: process.env.GOOGLE_SECRET\n  }) // Providers.Email({\n  //   server: {\n  //     host: process.env.EMAIL_SERVER_HOST,\n  //     port: process.env.EMAIL_SERVER_PORT,\n  //     auth: {\n  //       user: process.env.EMAIL_SERVER_USER,\n  //       pass: process.env.EMAIL_SERVER_PASSWORD\n  //     }\n  //   },\n  //   from: process.env.EMAIL_FROM\n  // }),\n  ],\n  adapter: FirebaseAdapter(firestore),\n  // Database optional. MySQL, Maria DB, Postgres and MongoDB are supported.\n  // https://next-auth.js.org/configuration/databases\n  //\n  // Notes:\n  // * You must install an appropriate node_module for your database\n  // * The Email provider requires a database (OAuth providers do not)\n  //database: process.env.DATABASE_URL,\n  // The secret should be set to a reasonably long random string.\n  // It is used to sign cookies and to sign and encrypt JSON Web Tokens, unless\n  // a separate secret is defined explicitly for encrypting the JWT.\n  secret: process.env.SECRET,\n  session: {\n    // Use JSON Web Tokens for session instead of database sessions.\n    // This option can be used with or without a database for users/accounts.\n    // Note: `jwt` is automatically set to `true` if no database is specified.\n    jwt: true // Seconds - How long until an idle session expires and is no longer valid.\n    // maxAge: 30 * 24 * 60 * 60, // 30 days\n    // Seconds - Throttle how frequently to write to database to extend a session.\n    // Use it to limit write operations. Set to 0 to always update the database.\n    // Note: This option is ignored if using JSON Web Tokens\n    // updateAge: 24 * 60 * 60, // 24 hours\n\n  },\n  // JSON Web tokens are only used for sessions if the `jwt: true` session\n  // option is set - or by default if no database is specified.\n  // https://next-auth.js.org/configuration/options#jwt\n  jwt: {// A secret to use for key generation (you should set this explicitly)\n    // secret: 'INp8IvdIyeMcoGAgFGoA61DdBglwwSqnXJZkgz8PSnw',\n    // Set to true to use encryption (default: false)\n    // encryption: true,\n    // You can define your own encode/decode functions for signing and encryption\n    // if you want to override the default behaviour.\n    // encode: async ({ secret, token, maxAge }) => {},\n    // decode: async ({ secret, token, maxAge }) => {},\n  },\n  // You can define custom pages to override the built-in ones. These will be regular Next.js pages\n  // so ensure that they are placed outside of the '/api' folder, e.g. signIn: '/auth/mycustom-signin'\n  // The routes shown here are the default URLs that will be used when a custom\n  // pages is not specified for that route.\n  // https://next-auth.js.org/configuration/pages\n  pages: {// signIn: '/signin',  // Displays signin buttons\n    //  signOut: '/auth/signout', // Displays form with sign out button\n    // error: '/auth/error', // Error code passed in query string as ?error=\n    // verifyRequest: '/auth/verify-request', // Used for check email page\n    // newUser: null // If set, new users will be directed here on first sign in\n  },\n  // Callbacks are asynchronous functions you can use to control what happens\n  // when an action is performed.\n  // https://next-auth.js.org/configuration/callbacks\n  callbacks: {\n    // async signIn(user, account, profile) { return true },\n    // async redirect(url, baseUrl) { return baseUrl },\n    // async session(session, user) { return session },\n    // async jwt(token, user, account, profile, isNewUser) { return token }\n    jwt: async (token, user, account, profile, isNewUser) => {\n      //  \"user\" parameter is the object received from \"authorize\"\n      //  \"token\" is being send below to \"session\" callback...\n      //  ...so we set \"user\" param of \"token\" to object from \"authorize\"...\n      //  ...and return it...\n      user && (token.user = user);\n      return token; // ...here\n    },\n    session: async (session, user, sessionToken) => {\n      //  \"session\" is current session object\n      //  below we set \"user\" param of \"session\" to value received from \"jwt\" callback\n      session.user = user.user;\n      return session;\n    }\n  },\n  // Events are useful for loggingyarn dev\n  // https://next-auth.js.org/configuration/events\n  //this is the place where we can start custom api handling  with events like createUserr() , updateUser(), getUser\n  events: {},\n  // You can set the theme to 'light', 'dark' or use 'auto' to default to the\n  // whatever prefers-color-scheme is set to in the browser. Default is 'auto'\n  theme: 'dark',\n  // Enable debug messages in the console if you are having problems\n  debug: false\n});","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/jlum-react-web-app/pages/api/auth/[...nextauth].js"],"names":["NextAuth","Providers","FirebaseAdapter","firebase","firebaseConfig","apiKey","process","env","FIREBASE_apiKey","authDomain","FIREBASE_authDomain","projectId","FIREBASE_projectId","storageBucket","FIREBASE_storageBucket","messagingSenderId","FIREBASE_messagingSenderId","appId","FIREBASE_appId","measurementId","FIREBASE_measurementId","firestore","apps","initializeApp","providers","Google","clientId","GOOGLE_ID","clientSecret","GOOGLE_SECRET","adapter","secret","SECRET","session","jwt","pages","callbacks","token","user","account","profile","isNewUser","sessionToken","events","theme","debug"],"mappings":";;AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,SAASC,eAAT,QAAgC,6BAAhC;AACA,OAAOC,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AAEA,MAAMC,cAAc,GAAG;AACnBC,EAAAA,MAAM,EAAGC,OAAO,CAACC,GAAR,CAAYC,eADF;AAEnBC,EAAAA,UAAU,EAAGH,OAAO,CAACC,GAAR,CAAYG,mBAFN;AAGnBC,EAAAA,SAAS,EAAGL,OAAO,CAACC,GAAR,CAAYK,kBAHL;AAInBC,EAAAA,aAAa,EAAGP,OAAO,CAACC,GAAR,CAAYO,sBAJT;AAKnBC,EAAAA,iBAAiB,EAAGT,OAAO,CAACC,GAAR,CAAYS,0BALb;AAMnBC,EAAAA,KAAK,EAAGX,OAAO,CAACC,GAAR,CAAYW,cAND;AAOnBC,EAAAA,aAAa,EAAGb,OAAO,CAACC,GAAR,CAAYa;AAPT,CAAvB;AAUA,MAAMC,SAAS,GAAG,oBAChBlB,QAAQ,CAACmB,IAAT,CAAc,CAAd,CADgB,6DACInB,QAAQ,CAACoB,aAAT,CAAuBnB,cAAvB,CADJ,EAEhBiB,SAFgB,EAAlB;AAKA,eAAerB,QAAQ,CAAC;AACtBwB,EAAAA,SAAS,EAAE,CAEVvB,SAAS,CAACwB,MAAV,CAAiB;AAChBC,IAAAA,QAAQ,EAAEpB,OAAO,CAACC,GAAR,CAAYoB,SADN;AAEhBC,IAAAA,YAAY,EAAEtB,OAAO,CAACC,GAAR,CAAYsB;AAFV,GAAjB,CAFU,CAOT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBS,GADW;AAqBtBC,EAAAA,OAAO,EAAE5B,eAAe,CAACmB,SAAD,CArBF;AAsBtB;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACAU,EAAAA,MAAM,EAAEzB,OAAO,CAACC,GAAR,CAAYyB,MAjCE;AAqCtBC,EAAAA,OAAO,EAAE;AACP;AACA;AACA;AACAC,IAAAA,GAAG,EAAE,IAJE,CAMP;AACA;AAEA;AACA;AACA;AACA;;AAZO,GArCa;AAoDtB;AACA;AACA;AACAA,EAAAA,GAAG,EAAE,CACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARG,GAvDiB;AAkEtB;AACA;AACA;AACA;AACA;AACAC,EAAAA,KAAK,EAAE,CACL;AACA;AACA;AACA;AACA;AALK,GAvEe;AA+EtB;AACA;AACA;AACAC,EAAAA,SAAS,EAAE;AACT;AACA;AACA;AACA;AACAF,IAAAA,GAAG,EAAE,OAAOG,KAAP,EAAcC,IAAd,EAAoBC,OAApB,EAA6BC,OAA7B,EAAsCC,SAAtC,KAAoD;AACvD;AACA;AACA;AACA;AACAH,MAAAA,IAAI,KAAKD,KAAK,CAACC,IAAN,GAAaA,IAAlB,CAAJ;AACA,aAAOD,KAAP,CANuD,CAMxC;AACd,KAZM;AAaTJ,IAAAA,OAAO,EAAE,OAAOA,OAAP,EAAgBK,IAAhB,EAAsBI,YAAtB,KAAuC;AAC9C;AACA;AACAT,MAAAA,OAAO,CAACK,IAAR,GAAeA,IAAI,CAACA,IAApB;AACA,aAAOL,OAAP;AACA;AAlBO,GAlFW;AAuGtB;AACA;AACA;AACAU,EAAAA,MAAM,EAAE,EA1Gc;AA4GtB;AACA;AACAC,EAAAA,KAAK,EAAE,MA9Ge;AAgHtB;AACAC,EAAAA,KAAK,EAAE;AAjHe,CAAD,CAAvB","sourcesContent":["import NextAuth from \"next-auth\"\r\nimport Providers from \"next-auth/providers\"\r\nimport { FirebaseAdapter } from \"@next-auth/firebase-adapter\"\r\nimport firebase from \"firebase/app\"\r\nimport \"firebase/firestore\"\r\n\r\nconst firebaseConfig = {\r\n    apiKey:  process.env.FIREBASE_apiKey,\r\n    authDomain:  process.env.FIREBASE_authDomain,\r\n    projectId:  process.env.FIREBASE_projectId,\r\n    storageBucket:  process.env.FIREBASE_storageBucket,\r\n    messagingSenderId:  process.env.FIREBASE_messagingSenderId,\r\n    appId:  process.env.FIREBASE_appId,\r\n    measurementId:  process.env.FIREBASE_measurementId\r\n}\r\n\r\nconst firestore = (\r\n  firebase.apps[0] ?? firebase.initializeApp(firebaseConfig)\r\n).firestore()\r\n\r\n\r\nexport default NextAuth({\r\n  providers: [\r\n    \r\n   Providers.Google({\r\n    clientId: process.env.GOOGLE_ID,\r\n    clientSecret: process.env.GOOGLE_SECRET,\r\n  }),\r\n    \r\n    // Providers.Email({\r\n    //   server: {\r\n    //     host: process.env.EMAIL_SERVER_HOST,\r\n    //     port: process.env.EMAIL_SERVER_PORT,\r\n    //     auth: {\r\n    //       user: process.env.EMAIL_SERVER_USER,\r\n    //       pass: process.env.EMAIL_SERVER_PASSWORD\r\n    //     }\r\n    //   },\r\n    //   from: process.env.EMAIL_FROM\r\n    // }),\r\n  ],\r\n  \r\n  adapter: FirebaseAdapter(firestore),\r\n  // Database optional. MySQL, Maria DB, Postgres and MongoDB are supported.\r\n  // https://next-auth.js.org/configuration/databases\r\n  //\r\n  // Notes:\r\n  // * You must install an appropriate node_module for your database\r\n  // * The Email provider requires a database (OAuth providers do not)\r\n  //database: process.env.DATABASE_URL,\r\n\r\n  // The secret should be set to a reasonably long random string.\r\n  // It is used to sign cookies and to sign and encrypt JSON Web Tokens, unless\r\n  // a separate secret is defined explicitly for encrypting the JWT.\r\n  secret: process.env.SECRET,\r\n\r\n\r\n\r\n  session: {\r\n    // Use JSON Web Tokens for session instead of database sessions.\r\n    // This option can be used with or without a database for users/accounts.\r\n    // Note: `jwt` is automatically set to `true` if no database is specified.\r\n    jwt: true,\r\n\r\n    // Seconds - How long until an idle session expires and is no longer valid.\r\n    // maxAge: 30 * 24 * 60 * 60, // 30 days\r\n\r\n    // Seconds - Throttle how frequently to write to database to extend a session.\r\n    // Use it to limit write operations. Set to 0 to always update the database.\r\n    // Note: This option is ignored if using JSON Web Tokens\r\n    // updateAge: 24 * 60 * 60, // 24 hours\r\n  },\r\n\r\n  // JSON Web tokens are only used for sessions if the `jwt: true` session\r\n  // option is set - or by default if no database is specified.\r\n  // https://next-auth.js.org/configuration/options#jwt\r\n  jwt: {\r\n    // A secret to use for key generation (you should set this explicitly)\r\n    // secret: 'INp8IvdIyeMcoGAgFGoA61DdBglwwSqnXJZkgz8PSnw',\r\n    // Set to true to use encryption (default: false)\r\n    // encryption: true,\r\n    // You can define your own encode/decode functions for signing and encryption\r\n    // if you want to override the default behaviour.\r\n    // encode: async ({ secret, token, maxAge }) => {},\r\n    // decode: async ({ secret, token, maxAge }) => {},\r\n  },\r\n\r\n  // You can define custom pages to override the built-in ones. These will be regular Next.js pages\r\n  // so ensure that they are placed outside of the '/api' folder, e.g. signIn: '/auth/mycustom-signin'\r\n  // The routes shown here are the default URLs that will be used when a custom\r\n  // pages is not specified for that route.\r\n  // https://next-auth.js.org/configuration/pages\r\n  pages: {\r\n    // signIn: '/signin',  // Displays signin buttons\r\n    //  signOut: '/auth/signout', // Displays form with sign out button\r\n    // error: '/auth/error', // Error code passed in query string as ?error=\r\n    // verifyRequest: '/auth/verify-request', // Used for check email page\r\n    // newUser: null // If set, new users will be directed here on first sign in\r\n  },\r\n\r\n  // Callbacks are asynchronous functions you can use to control what happens\r\n  // when an action is performed.\r\n  // https://next-auth.js.org/configuration/callbacks\r\n  callbacks: {\r\n    // async signIn(user, account, profile) { return true },\r\n    // async redirect(url, baseUrl) { return baseUrl },\r\n    // async session(session, user) { return session },\r\n    // async jwt(token, user, account, profile, isNewUser) { return token }\r\n    jwt: async (token, user, account, profile, isNewUser) => {\r\n      //  \"user\" parameter is the object received from \"authorize\"\r\n      //  \"token\" is being send below to \"session\" callback...\r\n      //  ...so we set \"user\" param of \"token\" to object from \"authorize\"...\r\n      //  ...and return it...\r\n      user && (token.user = user);\r\n      return token   // ...here\r\n      },\r\n    session: async (session, user, sessionToken) => {\r\n      //  \"session\" is current session object\r\n      //  below we set \"user\" param of \"session\" to value received from \"jwt\" callback\r\n      session.user = user.user;\r\n      return session\r\n     }\r\n  },\r\n\r\n  // Events are useful for loggingyarn dev\r\n  // https://next-auth.js.org/configuration/events\r\n  //this is the place where we can start custom api handling  with events like createUserr() , updateUser(), getUser\r\n  events: {},\r\n\r\n  // You can set the theme to 'light', 'dark' or use 'auto' to default to the\r\n  // whatever prefers-color-scheme is set to in the browser. Default is 'auto'\r\n  theme: 'dark',\r\n\r\n  // Enable debug messages in the console if you are having problems\r\n  debug: false,\r\n})\r\n"]},"metadata":{},"sourceType":"module"}