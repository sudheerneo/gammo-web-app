{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\gammo-react-web-app\\\\pages\\\\_app.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Provider } from 'next-auth/client';\nimport Head from \"next/head\";\nimport \"./styles.css\";\nexport default function App({\n  Component,\n  pageProps\n}) {\n  return /*#__PURE__*/_jsxDEV(Provider // Provider options are not required but can be useful in situations where\n  // you have a short session maxAge time. Shown here with default values.\n  , {\n    options: {\n      // Client Max Age controls how often the useSession in the client should\n      // contact the server to sync the session state. Value in seconds.\n      // e.g.\n      // * 0  - Disabled (always use cache value)\n      // * 60 - Sync session state with server if it's older than 60 seconds\n      clientMaxAge: 0,\n      // Keep Alive tells windows / tabs that are signed in to keep sending\n      // a keep alive request (which extends the current session expiry) to\n      // prevent sessions in open windows from expiring. Value in seconds.\n      //\n      // Note: If a session has expired when keep alive is triggered, all open\n      // windows / tabs will be updated to reflect the user is signed out.\n      keepAlive: 0\n    },\n    session: pageProps.session,\n    children: /*#__PURE__*/_jsxDEV(Component, _objectSpread({}, pageProps), void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/gammo-react-web-app/pages/_app.js"],"names":["Provider","Head","App","Component","pageProps","clientMaxAge","keepAlive","session"],"mappings":";;;;;;;;;AAAA,SAASA,QAAT,QAAyB,kBAAzB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAO,cAAP;AAEA,eAAe,SAASC,GAAT,CAAc;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAd,EAAwC;AACrD,sBACE,QAAC,QAAD,CACE;AACA;AAFF;AAGE,IAAA,OAAO,EAAE;AACP;AACA;AACA;AACA;AACA;AACAC,MAAAA,YAAY,EAAE,CANP;AAOP;AACA;AACA;AACA;AACA;AACA;AACAC,MAAAA,SAAS,EAAE;AAbJ,KAHX;AAkBE,IAAA,OAAO,EAAEF,SAAS,CAACG,OAlBrB;AAAA,2BAmBE,QAAC,SAAD,oBAAeH,SAAf;AAAA;AAAA;AAAA;AAAA;AAnBF;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD","sourcesContent":["import { Provider } from 'next-auth/client'\r\nimport Head from \"next/head\";\r\nimport \"./styles.css\";\r\n\r\nexport default function App ({ Component, pageProps }) {\r\n  return (\r\n    <Provider\r\n      // Provider options are not required but can be useful in situations where\r\n      // you have a short session maxAge time. Shown here with default values.\r\n      options={{\r\n        // Client Max Age controls how often the useSession in the client should\r\n        // contact the server to sync the session state. Value in seconds.\r\n        // e.g.\r\n        // * 0  - Disabled (always use cache value)\r\n        // * 60 - Sync session state with server if it's older than 60 seconds\r\n        clientMaxAge: 0,\r\n        // Keep Alive tells windows / tabs that are signed in to keep sending\r\n        // a keep alive request (which extends the current session expiry) to\r\n        // prevent sessions in open windows from expiring. Value in seconds.\r\n        //\r\n        // Note: If a session has expired when keep alive is triggered, all open\r\n        // windows / tabs will be updated to reflect the user is signed out.\r\n        keepAlive: 0\r\n      }}\r\n      session={pageProps.session} >\r\n      <Component {...pageProps} />\r\n    </Provider>\r\n  )\r\n}"]},"metadata":{},"sourceType":"module"}