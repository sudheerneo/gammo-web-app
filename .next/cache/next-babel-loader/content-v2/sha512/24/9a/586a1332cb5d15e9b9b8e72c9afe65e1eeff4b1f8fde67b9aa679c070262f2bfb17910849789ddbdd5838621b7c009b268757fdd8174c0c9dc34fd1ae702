{"ast":null,"code":"var _firebase$apps$;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport NextAuth from \"next-auth\";\nimport Providers from \"next-auth/providers\";\nimport { FirebaseAdapter } from \"@next-auth/firebase-adapter\";\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: process.env.FIREBASE_apiKey,\n  authDomain: process.env.FIREBASE_authDomain,\n  projectId: process.env.FIREBASE_projectId,\n  storageBucket: process.env.FIREBASE_storageBucket,\n  messagingSenderId: process.env.FIREBASE_messagingSenderId,\n  appId: process.env.FIREBASE_appId,\n  measurementId: process.env.FIREBASE_measurementId\n};\nconst firestore = ((_firebase$apps$ = firebase.apps[0]) !== null && _firebase$apps$ !== void 0 ? _firebase$apps$ : firebase.initializeApp(firebaseConfig)).firestore(); //refresh auth token\n\nasync function refreshAccessToken(token) {\n  try {\n    var _refreshedTokens$refr;\n\n    const url = \"https://oauth2.googleapis.com/token?\" + new URLSearchParams({\n      client_id: process.env.GOOGLE_CLIENT_ID,\n      client_secret: process.env.GOOGLE_CLIENT_SECRET,\n      grant_type: \"refresh_token\",\n      refresh_token: token.refreshToken\n    });\n    const response = await fetch(url, {\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      },\n      method: \"POST\"\n    });\n    const refreshedTokens = await response.json();\n\n    if (!response.ok) {\n      throw refreshedTokens;\n    }\n\n    return _objectSpread(_objectSpread({}, token), {}, {\n      accessToken: refreshedTokens.access_token,\n      accessTokenExpires: Date.now() + refreshedTokens.expires_in * 1000,\n      refreshToken: (_refreshedTokens$refr = refreshedTokens.refresh_token) !== null && _refreshedTokens$refr !== void 0 ? _refreshedTokens$refr : token.refreshToken // Fall back to old refresh token\n\n    });\n  } catch (error) {\n    console.log(error);\n    return _objectSpread(_objectSpread({}, token), {}, {\n      error: \"RefreshAccessTokenError\"\n    });\n  }\n} //end refresh token code\n\n\nexport default NextAuth({\n  providers: [Providers.Google({\n    clientId: process.env.GOOGLE_ID,\n    clientSecret: process.env.GOOGLE_SECRET\n  }) // Providers.Email({\n  //   server: {\n  //     host: process.env.EMAIL_SERVER_HOST,\n  //     port: process.env.EMAIL_SERVER_PORT,\n  //     auth: {\n  //       user: process.env.EMAIL_SERVER_USER,\n  //       pass: process.env.EMAIL_SERVER_PASSWORD\n  //     }\n  //   },\n  //   from: process.env.EMAIL_FROM\n  // }),\n  ],\n  adapter: FirebaseAdapter(firestore),\n  // Database optional. MySQL, Maria DB, Postgres and MongoDB are supported.\n  // https://next-auth.js.org/configuration/databases\n  //\n  // Notes:\n  // * You must install an appropriate node_module for your database\n  // * The Email provider requires a database (OAuth providers do not)\n  //database: process.env.DATABASE_URL,\n  // The secret should be set to a reasonably long random string.\n  // It is used to sign cookies and to sign and encrypt JSON Web Tokens, unless\n  // a separate secret is defined explicitly for encrypting the JWT.\n  secret: process.env.SECRET,\n  session: {\n    // Use JSON Web Tokens for session instead of database sessions.\n    // This option can be used with or without a database for users/accounts.\n    // Note: `jwt` is automatically set to `true` if no database is specified.\n    jwt: true // Seconds - How long until an idle session expires and is no longer valid.\n    // maxAge: 30 * 24 * 60 * 60, // 30 days\n    // Seconds - Throttle how frequently to write to database to extend a session.\n    // Use it to limit write operations. Set to 0 to always update the database.\n    // Note: This option is ignored if using JSON Web Tokens\n    // updateAge: 24 * 60 * 60, // 24 hours\n\n  },\n  // JSON Web tokens are only used for sessions if the `jwt: true` session\n  // option is set - or by default if no database is specified.\n  // https://next-auth.js.org/configuration/options#jwt\n  jwt: {// A secret to use for key generation (you should set this explicitly)\n    // secret: 'INp8IvdIyeMcoGAgFGoA61DdBglwwSqnXJZkgz8PSnw',\n    // Set to true to use encryption (default: false)\n    // encryption: true,\n    // You can define your own encode/decode functions for signing and encryption\n    // if you want to override the default behaviour.\n    // encode: async ({ secret, token, maxAge }) => {},\n    // decode: async ({ secret, token, maxAge }) => {},\n  },\n  // You can define custom pages to override the built-in ones. These will be regular Next.js pages\n  // so ensure that they are placed outside of the '/api' folder, e.g. signIn: '/auth/mycustom-signin'\n  // The routes shown here are the default URLs that will be used when a custom\n  // pages is not specified for that route.\n  // https://next-auth.js.org/configuration/pages\n  pages: {// signIn: '/signin',  // Displays signin buttons\n    //  signOut: '/auth/signout', // Displays form with sign out button\n    // error: '/auth/error', // Error code passed in query string as ?error=\n    // verifyRequest: '/auth/verify-request', // Used for check email page\n    // newUser: null // If set, new users will be directed here on first sign in\n  },\n  // Callbacks are asynchronous functions you can use to control what happens\n  // when an action is performed.\n  // https://next-auth.js.org/configuration/callbacks\n  callbacks: {\n    // async signIn(user, account, profile) { return true },\n    // async redirect(url, baseUrl) { return baseUrl },\n    // async session(session, user) { return session },\n    // async jwt(token, user, account, profile, isNewUser) { return token }\n    //old code start\n    // jwt: async (token, user, account, profile, isNewUser) => {\n    //   user && (token.user = user);\n    //   return token; // ...here\n    // },\n    // session: async (session, user, sessionToken) => {\n    //   session.user = user.user;\n    //   return session;\n    //old code end\n    //new start\n    async jwt({\n      token,\n      user,\n      account\n    }) {\n      // Initial sign in\n      if (account && user) {\n        return {\n          accessToken: account.access_token,\n          accessTokenExpires: Date.now() + account.expires_in * 1000,\n          refreshToken: account.refresh_token,\n          user\n        };\n      } // Return previous token if the access token has not expired yet\n\n\n      if (Date.now() < token.accessTokenExpires) {\n        return token;\n      } // Access token has expired, try to update it\n\n\n      return refreshAccessToken(token);\n    },\n\n    async session({\n      session,\n      token\n    }) {\n      session.user = token.user;\n      session.accessToken = token.accessToken;\n      session.error = token.error;\n      return session; //new code ends\n    }\n\n  },\n  // Events are useful for loggingyarn dev\n  // https://next-auth.js.org/configuration/events\n  //this is the place where we can start custom api handling  with events like createUserr() , updateUser(), getUser\n  events: {},\n  // You can set the theme to 'light', 'dark' or use 'auto' to default to the\n  // whatever prefers-color-scheme is set to in the browser. Default is 'auto'\n  theme: \"dark\",\n  // Enable debug messages in the console if you are having problems\n  debug: true\n});","map":{"version":3,"sources":["C:/MyDrive/DeskFolder/Development/gammo-webapp-main/pages/api/auth/[...nextauth].js"],"names":["NextAuth","Providers","FirebaseAdapter","firebase","firebaseConfig","apiKey","process","env","FIREBASE_apiKey","authDomain","FIREBASE_authDomain","projectId","FIREBASE_projectId","storageBucket","FIREBASE_storageBucket","messagingSenderId","FIREBASE_messagingSenderId","appId","FIREBASE_appId","measurementId","FIREBASE_measurementId","firestore","apps","initializeApp","refreshAccessToken","token","url","URLSearchParams","client_id","GOOGLE_CLIENT_ID","client_secret","GOOGLE_CLIENT_SECRET","grant_type","refresh_token","refreshToken","response","fetch","headers","method","refreshedTokens","json","ok","accessToken","access_token","accessTokenExpires","Date","now","expires_in","error","console","log","providers","Google","clientId","GOOGLE_ID","clientSecret","GOOGLE_SECRET","adapter","secret","SECRET","session","jwt","pages","callbacks","user","account","events","theme","debug"],"mappings":"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","sourcesContent":["import NextAuth from \"next-auth\";\nimport Providers from \"next-auth/providers\";\nimport { FirebaseAdapter } from \"@next-auth/firebase-adapter\";\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: process.env.FIREBASE_apiKey,\n  authDomain: process.env.FIREBASE_authDomain,\n  projectId: process.env.FIREBASE_projectId,\n  storageBucket: process.env.FIREBASE_storageBucket,\n  messagingSenderId: process.env.FIREBASE_messagingSenderId,\n  appId: process.env.FIREBASE_appId,\n  measurementId: process.env.FIREBASE_measurementId\n};\n\nconst firestore = (\n  firebase.apps[0] ?? firebase.initializeApp(firebaseConfig)\n).firestore();\n\n//refresh auth token\nasync function refreshAccessToken(token) {\n  try {\n    const url =\n      \"https://oauth2.googleapis.com/token?\" +\n      new URLSearchParams({\n        client_id: process.env.GOOGLE_CLIENT_ID,\n        client_secret: process.env.GOOGLE_CLIENT_SECRET,\n        grant_type: \"refresh_token\",\n        refresh_token: token.refreshToken\n      });\n\n    const response = await fetch(url, {\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      },\n      method: \"POST\"\n    });\n\n    const refreshedTokens = await response.json();\n\n    if (!response.ok) {\n      throw refreshedTokens;\n    }\n\n    return {\n      ...token,\n      accessToken: refreshedTokens.access_token,\n      accessTokenExpires: Date.now() + refreshedTokens.expires_in * 1000,\n      refreshToken: refreshedTokens.refresh_token ?? token.refreshToken // Fall back to old refresh token\n    };\n  } catch (error) {\n    console.log(error);\n\n    return {\n      ...token,\n      error: \"RefreshAccessTokenError\"\n    };\n  }\n}\n//end refresh token code\n\nexport default NextAuth({\n  providers: [\n    Providers.Google({\n      clientId: process.env.GOOGLE_ID,\n      clientSecret: process.env.GOOGLE_SECRET\n    })\n\n    // Providers.Email({\n    //   server: {\n    //     host: process.env.EMAIL_SERVER_HOST,\n    //     port: process.env.EMAIL_SERVER_PORT,\n    //     auth: {\n    //       user: process.env.EMAIL_SERVER_USER,\n    //       pass: process.env.EMAIL_SERVER_PASSWORD\n    //     }\n    //   },\n    //   from: process.env.EMAIL_FROM\n    // }),\n  ],\n\n  adapter: FirebaseAdapter(firestore),\n  // Database optional. MySQL, Maria DB, Postgres and MongoDB are supported.\n  // https://next-auth.js.org/configuration/databases\n  //\n  // Notes:\n  // * You must install an appropriate node_module for your database\n  // * The Email provider requires a database (OAuth providers do not)\n  //database: process.env.DATABASE_URL,\n\n  // The secret should be set to a reasonably long random string.\n  // It is used to sign cookies and to sign and encrypt JSON Web Tokens, unless\n  // a separate secret is defined explicitly for encrypting the JWT.\n  secret: process.env.SECRET,\n\n  session: {\n    // Use JSON Web Tokens for session instead of database sessions.\n    // This option can be used with or without a database for users/accounts.\n    // Note: `jwt` is automatically set to `true` if no database is specified.\n    jwt: true\n    // Seconds - How long until an idle session expires and is no longer valid.\n    // maxAge: 30 * 24 * 60 * 60, // 30 days\n    // Seconds - Throttle how frequently to write to database to extend a session.\n    // Use it to limit write operations. Set to 0 to always update the database.\n    // Note: This option is ignored if using JSON Web Tokens\n    // updateAge: 24 * 60 * 60, // 24 hours\n  },\n\n  // JSON Web tokens are only used for sessions if the `jwt: true` session\n  // option is set - or by default if no database is specified.\n  // https://next-auth.js.org/configuration/options#jwt\n  jwt: {\n    // A secret to use for key generation (you should set this explicitly)\n    // secret: 'INp8IvdIyeMcoGAgFGoA61DdBglwwSqnXJZkgz8PSnw',\n    // Set to true to use encryption (default: false)\n    // encryption: true,\n    // You can define your own encode/decode functions for signing and encryption\n    // if you want to override the default behaviour.\n    // encode: async ({ secret, token, maxAge }) => {},\n    // decode: async ({ secret, token, maxAge }) => {},\n  },\n\n  // You can define custom pages to override the built-in ones. These will be regular Next.js pages\n  // so ensure that they are placed outside of the '/api' folder, e.g. signIn: '/auth/mycustom-signin'\n  // The routes shown here are the default URLs that will be used when a custom\n  // pages is not specified for that route.\n  // https://next-auth.js.org/configuration/pages\n  pages: {\n    // signIn: '/signin',  // Displays signin buttons\n    //  signOut: '/auth/signout', // Displays form with sign out button\n    // error: '/auth/error', // Error code passed in query string as ?error=\n    // verifyRequest: '/auth/verify-request', // Used for check email page\n    // newUser: null // If set, new users will be directed here on first sign in\n  },\n\n  // Callbacks are asynchronous functions you can use to control what happens\n  // when an action is performed.\n  // https://next-auth.js.org/configuration/callbacks\n  callbacks: {\n    // async signIn(user, account, profile) { return true },\n    // async redirect(url, baseUrl) { return baseUrl },\n    // async session(session, user) { return session },\n    // async jwt(token, user, account, profile, isNewUser) { return token }\n\n    //old code start\n    // jwt: async (token, user, account, profile, isNewUser) => {\n\n    //   user && (token.user = user);\n    //   return token; // ...here\n    // },\n    // session: async (session, user, sessionToken) => {\n    //   session.user = user.user;\n    //   return session;\n    //old code end\n\n    //new start\n    async jwt({ token, user, account }) {\n      // Initial sign in\n      if (account && user) {\n        return {\n          accessToken: account.access_token,\n          accessTokenExpires: Date.now() + account.expires_in * 1000,\n          refreshToken: account.refresh_token,\n          user\n        };\n      }\n\n      // Return previous token if the access token has not expired yet\n      if (Date.now() < token.accessTokenExpires) {\n        return token;\n      }\n\n      // Access token has expired, try to update it\n      return refreshAccessToken(token);\n    },\n    async session({ session, token }) {\n      session.user = token.user;\n      session.accessToken = token.accessToken;\n      session.error = token.error;\n\n      return session;\n      //new code ends\n    }\n  },\n\n  // Events are useful for loggingyarn dev\n  // https://next-auth.js.org/configuration/events\n  //this is the place where we can start custom api handling  with events like createUserr() , updateUser(), getUser\n  events: {},\n\n  // You can set the theme to 'light', 'dark' or use 'auto' to default to the\n  // whatever prefers-color-scheme is set to in the browser. Default is 'auto'\n  theme: \"dark\",\n\n  // Enable debug messages in the console if you are having problems\n  debug: true\n});\n"]},"metadata":{},"sourceType":"module"}