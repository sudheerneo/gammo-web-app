_N_E =
(window["webpackJsonp_N_E"] = window["webpackJsonp_N_E"] || []).push([["pages/_app"],{

/***/ "./node_modules/@babel/runtime/helpers/arrayLikeToArray.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/arrayLikeToArray.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
module.exports = _arrayLikeToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/arrayWithHoles.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/arrayWithHoles.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
module.exports = _arrayWithHoles, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/asyncToGenerator.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function () {
    var self = this,
      args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(undefined);
    });
  };
}
module.exports = _asyncToGenerator, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/defineProperty.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/defineProperty.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var toPropertyKey = __webpack_require__(/*! ./toPropertyKey.js */ "./node_modules/@babel/runtime/helpers/toPropertyKey.js");
function _defineProperty(obj, key, value) {
  key = toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
module.exports = _defineProperty, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/interopRequireDefault.js ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
module.exports = _interopRequireDefault, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _iterableToArrayLimit(arr, i) {
  var _i = null == arr ? null : "undefined" != typeof Symbol && arr[Symbol.iterator] || arr["@@iterator"];
  if (null != _i) {
    var _s,
      _e,
      _x,
      _r,
      _arr = [],
      _n = !0,
      _d = !1;
    try {
      if (_x = (_i = _i.call(arr)).next, 0 === i) {
        if (Object(_i) !== _i) return;
        _n = !1;
      } else for (; !(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0);
    } catch (err) {
      _d = !0, _e = err;
    } finally {
      try {
        if (!_n && null != _i["return"] && (_r = _i["return"](), Object(_r) !== _r)) return;
      } finally {
        if (_d) throw _e;
      }
    }
    return _arr;
  }
}
module.exports = _iterableToArrayLimit, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/nonIterableRest.js":
/*!****************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/nonIterableRest.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
module.exports = _nonIterableRest, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/regeneratorRuntime.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/regeneratorRuntime.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var _typeof = __webpack_require__(/*! ./typeof.js */ "./node_modules/@babel/runtime/helpers/typeof.js")["default"];
function _regeneratorRuntime() {
  "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */
  module.exports = _regeneratorRuntime = function _regeneratorRuntime() {
    return exports;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports;
  var exports = {},
    Op = Object.prototype,
    hasOwn = Op.hasOwnProperty,
    defineProperty = Object.defineProperty || function (obj, key, desc) {
      obj[key] = desc.value;
    },
    $Symbol = "function" == typeof Symbol ? Symbol : {},
    iteratorSymbol = $Symbol.iterator || "@@iterator",
    asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
    toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
  function define(obj, key, value) {
    return Object.defineProperty(obj, key, {
      value: value,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), obj[key];
  }
  try {
    define({}, "");
  } catch (err) {
    define = function define(obj, key, value) {
      return obj[key] = value;
    };
  }
  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
      generator = Object.create(protoGenerator.prototype),
      context = new Context(tryLocsList || []);
    return defineProperty(generator, "_invoke", {
      value: makeInvokeMethod(innerFn, self, context)
    }), generator;
  }
  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }
  exports.wrap = wrap;
  var ContinueSentinel = {};
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });
  var getProto = Object.getPrototypeOf,
    NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }
  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if ("throw" !== record.type) {
        var result = record.arg,
          value = result.value;
        return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
          invoke("next", value, resolve, reject);
        }, function (err) {
          invoke("throw", err, resolve, reject);
        }) : PromiseImpl.resolve(value).then(function (unwrapped) {
          result.value = unwrapped, resolve(result);
        }, function (error) {
          return invoke("throw", error, resolve, reject);
        });
      }
      reject(record.arg);
    }
    var previousPromise;
    defineProperty(this, "_invoke", {
      value: function value(method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }
        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
    });
  }
  function makeInvokeMethod(innerFn, self, context) {
    var state = "suspendedStart";
    return function (method, arg) {
      if ("executing" === state) throw new Error("Generator is already running");
      if ("completed" === state) {
        if ("throw" === method) throw arg;
        return doneResult();
      }
      for (context.method = method, context.arg = arg;;) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }
        if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
          if ("suspendedStart" === state) throw state = "completed", context.arg;
          context.dispatchException(context.arg);
        } else "return" === context.method && context.abrupt("return", context.arg);
        state = "executing";
        var record = tryCatch(innerFn, self, context);
        if ("normal" === record.type) {
          if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
          return {
            value: record.arg,
            done: context.done
          };
        }
        "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
      }
    };
  }
  function maybeInvokeDelegate(delegate, context) {
    var methodName = context.method,
      method = delegate.iterator[methodName];
    if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel;
    var record = tryCatch(method, delegate.iterator, context.arg);
    if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
    var info = record.arg;
    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
  }
  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };
    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
  }
  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal", delete record.arg, entry.completion = record;
  }
  function Context(tryLocsList) {
    this.tryEntries = [{
      tryLoc: "root"
    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
  }
  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) return iteratorMethod.call(iterable);
      if ("function" == typeof iterable.next) return iterable;
      if (!isNaN(iterable.length)) {
        var i = -1,
          next = function next() {
            for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
            return next.value = undefined, next.done = !0, next;
          };
        return next.next = next;
      }
    }
    return {
      next: doneResult
    };
  }
  function doneResult() {
    return {
      value: undefined,
      done: !0
    };
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: !0
  }), defineProperty(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: !0
  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
    var ctor = "function" == typeof genFun && genFun.constructor;
    return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
  }, exports.mark = function (genFun) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
  }, exports.awrap = function (arg) {
    return {
      __await: arg
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    void 0 === PromiseImpl && (PromiseImpl = Promise);
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
    return this;
  }), define(Gp, "toString", function () {
    return "[object Generator]";
  }), exports.keys = function (val) {
    var object = Object(val),
      keys = [];
    for (var key in object) keys.push(key);
    return keys.reverse(), function next() {
      for (; keys.length;) {
        var key = keys.pop();
        if (key in object) return next.value = key, next.done = !1, next;
      }
      return next.done = !0, next;
    };
  }, exports.values = values, Context.prototype = {
    constructor: Context,
    reset: function reset(skipTempReset) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
    },
    stop: function stop() {
      this.done = !0;
      var rootRecord = this.tryEntries[0].completion;
      if ("throw" === rootRecord.type) throw rootRecord.arg;
      return this.rval;
    },
    dispatchException: function dispatchException(exception) {
      if (this.done) throw exception;
      var context = this;
      function handle(loc, caught) {
        return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
      }
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i],
          record = entry.completion;
        if ("root" === entry.tryLoc) return handle("end");
        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc"),
            hasFinally = hasOwn.call(entry, "finallyLoc");
          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
          } else {
            if (!hasFinally) throw new Error("try statement without catch or finally");
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          }
        }
      }
    },
    abrupt: function abrupt(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }
      finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
      var record = finallyEntry ? finallyEntry.completion : {};
      return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
    },
    complete: function complete(record, afterLoc) {
      if ("throw" === record.type) throw record.arg;
      return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
    },
    finish: function finish(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
      }
    },
    "catch": function _catch(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if ("throw" === record.type) {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }
      throw new Error("illegal catch attempt");
    },
    delegateYield: function delegateYield(iterable, resultName, nextLoc) {
      return this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
    }
  }, exports;
}
module.exports = _regeneratorRuntime, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/slicedToArray.js":
/*!**************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/slicedToArray.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayWithHoles = __webpack_require__(/*! ./arrayWithHoles.js */ "./node_modules/@babel/runtime/helpers/arrayWithHoles.js");
var iterableToArrayLimit = __webpack_require__(/*! ./iterableToArrayLimit.js */ "./node_modules/@babel/runtime/helpers/iterableToArrayLimit.js");
var unsupportedIterableToArray = __webpack_require__(/*! ./unsupportedIterableToArray.js */ "./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js");
var nonIterableRest = __webpack_require__(/*! ./nonIterableRest.js */ "./node_modules/@babel/runtime/helpers/nonIterableRest.js");
function _slicedToArray(arr, i) {
  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();
}
module.exports = _slicedToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/toPrimitive.js":
/*!************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/toPrimitive.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var _typeof = __webpack_require__(/*! ./typeof.js */ "./node_modules/@babel/runtime/helpers/typeof.js")["default"];
function _toPrimitive(input, hint) {
  if (_typeof(input) !== "object" || input === null) return input;
  var prim = input[Symbol.toPrimitive];
  if (prim !== undefined) {
    var res = prim.call(input, hint || "default");
    if (_typeof(res) !== "object") return res;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (hint === "string" ? String : Number)(input);
}
module.exports = _toPrimitive, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/toPropertyKey.js":
/*!**************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/toPropertyKey.js ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var _typeof = __webpack_require__(/*! ./typeof.js */ "./node_modules/@babel/runtime/helpers/typeof.js")["default"];
var toPrimitive = __webpack_require__(/*! ./toPrimitive.js */ "./node_modules/@babel/runtime/helpers/toPrimitive.js");
function _toPropertyKey(arg) {
  var key = toPrimitive(arg, "string");
  return _typeof(key) === "symbol" ? key : String(key);
}
module.exports = _toPropertyKey, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/typeof.js":
/*!*******************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/typeof.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) {
  "@babel/helpers - typeof";

  return (module.exports = _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, module.exports.__esModule = true, module.exports["default"] = module.exports), _typeof(obj);
}
module.exports = _typeof, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayLikeToArray = __webpack_require__(/*! ./arrayLikeToArray.js */ "./node_modules/@babel/runtime/helpers/arrayLikeToArray.js");
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
}
module.exports = _unsupportedIterableToArray, module.exports.__esModule = true, module.exports["default"] = module.exports;

/***/ }),

/***/ "./node_modules/@babel/runtime/regenerator/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@babel/runtime/regenerator/index.js ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// TODO(Babel 8): Remove this file.

var runtime = __webpack_require__(/*! ../helpers/regeneratorRuntime */ "./node_modules/@babel/runtime/helpers/regeneratorRuntime.js")();
module.exports = runtime;

// Copied from https://github.com/facebook/regenerator/blob/main/packages/runtime/runtime.js#L736=
try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}


/***/ }),

/***/ "./node_modules/next-auth/client.js":
/*!******************************************!*\
  !*** ./node_modules/next-auth/client.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./dist/client */ "./node_modules/next-auth/dist/client/index.js").default


/***/ }),

/***/ "./node_modules/next-auth/dist/client/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/next-auth/dist/client/index.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/@babel/runtime/helpers/interopRequireDefault.js");

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/@babel/runtime/helpers/typeof.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useSession = useSession;
exports.session = exports.getSession = getSession;
exports.csrfToken = exports.getCsrfToken = getCsrfToken;
exports.providers = exports.getProviders = getProviders;
exports.signin = exports.signIn = signIn;
exports.signout = exports.signOut = signOut;
exports.options = exports.setOptions = setOptions;
exports.Provider = Provider;
exports.default = void 0;

var _regenerator = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/regenerator */ "./node_modules/@babel/runtime/regenerator/index.js"));

var _defineProperty2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/@babel/runtime/helpers/defineProperty.js"));

var _asyncToGenerator2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ "./node_modules/@babel/runtime/helpers/asyncToGenerator.js"));

var _slicedToArray2 = _interopRequireDefault(__webpack_require__(/*! @babel/runtime/helpers/slicedToArray */ "./node_modules/@babel/runtime/helpers/slicedToArray.js"));

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var _logger2 = _interopRequireWildcard(__webpack_require__(/*! ../lib/logger */ "./node_modules/next-auth/dist/lib/logger.js"));

var _parseUrl = _interopRequireDefault(__webpack_require__(/*! ../lib/parse-url */ "./node_modules/next-auth/dist/lib/parse-url.js"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

var __NEXTAUTH = {
  baseUrl: (0, _parseUrl.default)(process.env.NEXTAUTH_URL || process.env.VERCEL_URL).baseUrl,
  basePath: (0, _parseUrl.default)(process.env.NEXTAUTH_URL).basePath,
  baseUrlServer: (0, _parseUrl.default)(process.env.NEXTAUTH_URL_INTERNAL || process.env.NEXTAUTH_URL || process.env.VERCEL_URL).baseUrl,
  basePathServer: (0, _parseUrl.default)(process.env.NEXTAUTH_URL_INTERNAL || process.env.NEXTAUTH_URL).basePath,
  keepAlive: 0,
  clientMaxAge: 0,
  _clientLastSync: 0,
  _clientSyncTimer: null,
  _eventListenersAdded: false,
  _clientSession: undefined,
  _getSession: function _getSession() {}
};
var logger = (0, _logger2.proxyLogger)(_logger2.default, __NEXTAUTH.basePath);
var broadcast = BroadcastChannel();

if (typeof window !== "undefined" && !__NEXTAUTH._eventListenersAdded) {
  __NEXTAUTH._eventListenersAdded = true;
  broadcast.receive(function () {
    return __NEXTAUTH._getSession({
      event: "storage"
    });
  });
  document.addEventListener("visibilitychange", function () {
    !document.hidden && __NEXTAUTH._getSession({
      event: "visibilitychange"
    });
  }, false);
}

var SessionContext = (0, _react.createContext)();

function useSession(session) {
  var context = (0, _react.useContext)(SessionContext);
  if (context) return context;
  return _useSessionHook(session);
}

function _useSessionHook(session) {
  var _useState = (0, _react.useState)(session),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      data = _useState2[0],
      setData = _useState2[1];

  var _useState3 = (0, _react.useState)(!data),
      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
      loading = _useState4[0],
      setLoading = _useState4[1];

  (0, _react.useEffect)(function () {
    __NEXTAUTH._getSession = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee() {
      var _ref2,
          _ref2$event,
          event,
          triggredByEvent,
          triggeredByStorageEvent,
          clientMaxAge,
          clientLastSync,
          currentTime,
          clientSession,
          newClientSessionData,
          _args = arguments;

      return _regenerator.default.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _ref2 = _args.length > 0 && _args[0] !== undefined ? _args[0] : {}, _ref2$event = _ref2.event, event = _ref2$event === void 0 ? null : _ref2$event;
              _context.prev = 1;
              triggredByEvent = event !== null;
              triggeredByStorageEvent = event === "storage";
              clientMaxAge = __NEXTAUTH.clientMaxAge;
              clientLastSync = parseInt(__NEXTAUTH._clientLastSync);
              currentTime = _now();
              clientSession = __NEXTAUTH._clientSession;

              if (!(!triggeredByStorageEvent && clientSession !== undefined)) {
                _context.next = 19;
                break;
              }

              if (!(clientMaxAge === 0 && triggredByEvent !== true)) {
                _context.next = 13;
                break;
              }

              return _context.abrupt("return");

            case 13:
              if (!(clientMaxAge > 0 && clientSession === null)) {
                _context.next = 17;
                break;
              }

              return _context.abrupt("return");

            case 17:
              if (!(clientMaxAge > 0 && currentTime < clientLastSync + clientMaxAge)) {
                _context.next = 19;
                break;
              }

              return _context.abrupt("return");

            case 19:
              if (clientSession === undefined) {
                __NEXTAUTH._clientSession = null;
              }

              __NEXTAUTH._clientLastSync = _now();
              _context.next = 23;
              return getSession({
                triggerEvent: !triggeredByStorageEvent
              });

            case 23:
              newClientSessionData = _context.sent;
              __NEXTAUTH._clientSession = newClientSessionData;
              setData(newClientSessionData);
              setLoading(false);
              _context.next = 33;
              break;

            case 29:
              _context.prev = 29;
              _context.t0 = _context["catch"](1);
              logger.error("CLIENT_USE_SESSION_ERROR", _context.t0);
              setLoading(false);

            case 33:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, null, [[1, 29]]);
    }));

    __NEXTAUTH._getSession();
  });
  return [data, loading];
}

function getSession(_x) {
  return _getSession2.apply(this, arguments);
}

function _getSession2() {
  _getSession2 = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee4(ctx) {
    var _ctx$triggerEvent;

    var session;
    return _regenerator.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return _fetchData("session", ctx);

          case 2:
            session = _context4.sent;

            if ((_ctx$triggerEvent = ctx === null || ctx === void 0 ? void 0 : ctx.triggerEvent) !== null && _ctx$triggerEvent !== void 0 ? _ctx$triggerEvent : true) {
              broadcast.post({
                event: "session",
                data: {
                  trigger: "getSession"
                }
              });
            }

            return _context4.abrupt("return", session);

          case 5:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  }));
  return _getSession2.apply(this, arguments);
}

function getCsrfToken(_x2) {
  return _getCsrfToken.apply(this, arguments);
}

function _getCsrfToken() {
  _getCsrfToken = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee5(ctx) {
    var _yield$_fetchData;

    return _regenerator.default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return _fetchData("csrf", ctx);

          case 2:
            _context5.t1 = _yield$_fetchData = _context5.sent;
            _context5.t0 = _context5.t1 === null;

            if (_context5.t0) {
              _context5.next = 6;
              break;
            }

            _context5.t0 = _yield$_fetchData === void 0;

          case 6:
            if (!_context5.t0) {
              _context5.next = 10;
              break;
            }

            _context5.t2 = void 0;
            _context5.next = 11;
            break;

          case 10:
            _context5.t2 = _yield$_fetchData.csrfToken;

          case 11:
            return _context5.abrupt("return", _context5.t2);

          case 12:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  }));
  return _getCsrfToken.apply(this, arguments);
}

function getProviders() {
  return _getProviders.apply(this, arguments);
}

function _getProviders() {
  _getProviders = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee6() {
    return _regenerator.default.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return _fetchData("providers");

          case 2:
            return _context6.abrupt("return", _context6.sent);

          case 3:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  }));
  return _getProviders.apply(this, arguments);
}

function signIn(_x3) {
  return _signIn.apply(this, arguments);
}

function _signIn() {
  _signIn = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee7(provider) {
    var options,
        authorizationParams,
        _options$callbackUrl,
        callbackUrl,
        _options$redirect,
        redirect,
        baseUrl,
        providers,
        isCredentials,
        isEmail,
        isSupportingReturn,
        signInUrl,
        _signInUrl,
        res,
        data,
        _data$url,
        url,
        error,
        _args7 = arguments;

    return _regenerator.default.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            options = _args7.length > 1 && _args7[1] !== undefined ? _args7[1] : {};
            authorizationParams = _args7.length > 2 && _args7[2] !== undefined ? _args7[2] : {};
            _options$callbackUrl = options.callbackUrl, callbackUrl = _options$callbackUrl === void 0 ? window.location.href : _options$callbackUrl, _options$redirect = options.redirect, redirect = _options$redirect === void 0 ? true : _options$redirect;
            baseUrl = _apiBaseUrl();
            _context7.next = 6;
            return getProviders();

          case 6:
            providers = _context7.sent;

            if (providers) {
              _context7.next = 9;
              break;
            }

            return _context7.abrupt("return", window.location.replace("".concat(baseUrl, "/error")));

          case 9:
            if (provider in providers) {
              _context7.next = 11;
              break;
            }

            return _context7.abrupt("return", window.location.replace("".concat(baseUrl, "/signin?callbackUrl=").concat(encodeURIComponent(callbackUrl))));

          case 11:
            isCredentials = providers[provider].type === "credentials";
            isEmail = providers[provider].type === "email";
            isSupportingReturn = isCredentials || isEmail;
            signInUrl = isCredentials ? "".concat(baseUrl, "/callback/").concat(provider) : "".concat(baseUrl, "/signin/").concat(provider);
            _signInUrl = "".concat(signInUrl, "?").concat(new URLSearchParams(authorizationParams));
            _context7.t0 = fetch;
            _context7.t1 = _signInUrl;
            _context7.t2 = {
              "Content-Type": "application/x-www-form-urlencoded"
            };
            _context7.t3 = URLSearchParams;
            _context7.t4 = _objectSpread;
            _context7.t5 = _objectSpread({}, options);
            _context7.t6 = {};
            _context7.next = 25;
            return getCsrfToken();

          case 25:
            _context7.t7 = _context7.sent;
            _context7.t8 = callbackUrl;
            _context7.t9 = {
              csrfToken: _context7.t7,
              callbackUrl: _context7.t8,
              json: true
            };
            _context7.t10 = (0, _context7.t4)(_context7.t5, _context7.t6, _context7.t9);
            _context7.t11 = new _context7.t3(_context7.t10);
            _context7.t12 = {
              method: "post",
              headers: _context7.t2,
              body: _context7.t11
            };
            _context7.next = 33;
            return (0, _context7.t0)(_context7.t1, _context7.t12);

          case 33:
            res = _context7.sent;
            _context7.next = 36;
            return res.json();

          case 36:
            data = _context7.sent;

            if (!(redirect || !isSupportingReturn)) {
              _context7.next = 42;
              break;
            }

            url = (_data$url = data.url) !== null && _data$url !== void 0 ? _data$url : callbackUrl;
            window.location.replace(url);
            if (url.includes("#")) window.location.reload();
            return _context7.abrupt("return");

          case 42:
            error = new URL(data.url).searchParams.get("error");

            if (!res.ok) {
              _context7.next = 46;
              break;
            }

            _context7.next = 46;
            return __NEXTAUTH._getSession({
              event: "storage"
            });

          case 46:
            return _context7.abrupt("return", {
              error: error,
              status: res.status,
              ok: res.ok,
              url: error ? null : data.url
            });

          case 47:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  }));
  return _signIn.apply(this, arguments);
}

function signOut() {
  return _signOut.apply(this, arguments);
}

function _signOut() {
  _signOut = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee8() {
    var options,
        _options$callbackUrl2,
        callbackUrl,
        _options$redirect2,
        redirect,
        baseUrl,
        fetchOptions,
        res,
        data,
        _data$url2,
        url,
        _args8 = arguments;

    return _regenerator.default.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            options = _args8.length > 0 && _args8[0] !== undefined ? _args8[0] : {};
            _options$callbackUrl2 = options.callbackUrl, callbackUrl = _options$callbackUrl2 === void 0 ? window.location.href : _options$callbackUrl2, _options$redirect2 = options.redirect, redirect = _options$redirect2 === void 0 ? true : _options$redirect2;
            baseUrl = _apiBaseUrl();
            _context8.t0 = {
              "Content-Type": "application/x-www-form-urlencoded"
            };
            _context8.t1 = URLSearchParams;
            _context8.next = 7;
            return getCsrfToken();

          case 7:
            _context8.t2 = _context8.sent;
            _context8.t3 = callbackUrl;
            _context8.t4 = {
              csrfToken: _context8.t2,
              callbackUrl: _context8.t3,
              json: true
            };
            _context8.t5 = new _context8.t1(_context8.t4);
            fetchOptions = {
              method: "post",
              headers: _context8.t0,
              body: _context8.t5
            };
            _context8.next = 14;
            return fetch("".concat(baseUrl, "/signout"), fetchOptions);

          case 14:
            res = _context8.sent;
            _context8.next = 17;
            return res.json();

          case 17:
            data = _context8.sent;
            broadcast.post({
              event: "session",
              data: {
                trigger: "signout"
              }
            });

            if (!redirect) {
              _context8.next = 24;
              break;
            }

            url = (_data$url2 = data.url) !== null && _data$url2 !== void 0 ? _data$url2 : callbackUrl;
            window.location.replace(url);
            if (url.includes("#")) window.location.reload();
            return _context8.abrupt("return");

          case 24:
            _context8.next = 26;
            return __NEXTAUTH._getSession({
              event: "storage"
            });

          case 26:
            return _context8.abrupt("return", data);

          case 27:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  }));
  return _signOut.apply(this, arguments);
}

function setOptions() {
  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      baseUrl = _ref3.baseUrl,
      basePath = _ref3.basePath,
      clientMaxAge = _ref3.clientMaxAge,
      keepAlive = _ref3.keepAlive;

  if (baseUrl) __NEXTAUTH.baseUrl = baseUrl;
  if (basePath) __NEXTAUTH.basePath = basePath;
  if (clientMaxAge) __NEXTAUTH.clientMaxAge = clientMaxAge;

  if (keepAlive) {
    __NEXTAUTH.keepAlive = keepAlive;
    if (typeof window === "undefined") return;

    if (__NEXTAUTH._clientSyncTimer !== null) {
      clearTimeout(__NEXTAUTH._clientSyncTimer);
    }

    __NEXTAUTH._clientSyncTimer = setTimeout((0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee2() {
      return _regenerator.default.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (__NEXTAUTH._clientSession) {
                _context2.next = 2;
                break;
              }

              return _context2.abrupt("return");

            case 2:
              _context2.next = 4;
              return __NEXTAUTH._getSession({
                event: "timer"
              });

            case 4:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    })), keepAlive * 1000);
  }
}

function Provider(_ref5) {
  var children = _ref5.children,
      session = _ref5.session,
      options = _ref5.options;
  setOptions(options);
  return (0, _react.createElement)(SessionContext.Provider, {
    value: useSession(session)
  }, children);
}

function _fetchData(_x4) {
  return _fetchData2.apply(this, arguments);
}

function _fetchData2() {
  _fetchData2 = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee9(path) {
    var _ref7,
        ctx,
        _ref7$req,
        req,
        baseUrl,
        options,
        res,
        data,
        _args9 = arguments;

    return _regenerator.default.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _ref7 = _args9.length > 1 && _args9[1] !== undefined ? _args9[1] : {}, ctx = _ref7.ctx, _ref7$req = _ref7.req, req = _ref7$req === void 0 ? ctx === null || ctx === void 0 ? void 0 : ctx.req : _ref7$req;
            _context9.prev = 1;
            _context9.next = 4;
            return _apiBaseUrl();

          case 4:
            baseUrl = _context9.sent;
            options = req ? {
              headers: {
                cookie: req.headers.cookie
              }
            } : {};
            _context9.next = 8;
            return fetch("".concat(baseUrl, "/").concat(path), options);

          case 8:
            res = _context9.sent;
            _context9.next = 11;
            return res.json();

          case 11:
            data = _context9.sent;

            if (res.ok) {
              _context9.next = 14;
              break;
            }

            throw data;

          case 14:
            return _context9.abrupt("return", Object.keys(data).length > 0 ? data : null);

          case 17:
            _context9.prev = 17;
            _context9.t0 = _context9["catch"](1);
            logger.error("CLIENT_FETCH_ERROR", path, _context9.t0);
            return _context9.abrupt("return", null);

          case 21:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9, null, [[1, 17]]);
  }));
  return _fetchData2.apply(this, arguments);
}

function _apiBaseUrl() {
  if (typeof window === "undefined") {
    if (!process.env.NEXTAUTH_URL) {
      logger.warn("NEXTAUTH_URL", "NEXTAUTH_URL environment variable not set");
    }

    return "".concat(__NEXTAUTH.baseUrlServer).concat(__NEXTAUTH.basePathServer);
  }

  return __NEXTAUTH.basePath;
}

function _now() {
  return Math.floor(Date.now() / 1000);
}

function BroadcastChannel() {
  var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "nextauth.message";
  return {
    receive: function receive(onReceive) {
      if (typeof window === "undefined") return;
      window.addEventListener("storage", function () {
        var _ref6 = (0, _asyncToGenerator2.default)(_regenerator.default.mark(function _callee3(event) {
          var message;
          return _regenerator.default.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  if (!(event.key !== name)) {
                    _context3.next = 2;
                    break;
                  }

                  return _context3.abrupt("return");

                case 2:
                  message = JSON.parse(event.newValue);

                  if (!((message === null || message === void 0 ? void 0 : message.event) !== "session" || !(message !== null && message !== void 0 && message.data))) {
                    _context3.next = 5;
                    break;
                  }

                  return _context3.abrupt("return");

                case 5:
                  onReceive(message);

                case 6:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3);
        }));

        return function (_x5) {
          return _ref6.apply(this, arguments);
        };
      }());
    },
    post: function post(message) {
      if (typeof localStorage === "undefined") return;
      localStorage.setItem(name, JSON.stringify(_objectSpread(_objectSpread({}, message), {}, {
        timestamp: _now()
      })));
    }
  };
}

var _default = {
  getSession: getSession,
  getCsrfToken: getCsrfToken,
  getProviders: getProviders,
  useSession: useSession,
  signIn: signIn,
  signOut: signOut,
  Provider: Provider,
  setOptions: setOptions,
  options: setOptions,
  session: getSession,
  providers: getProviders,
  csrfToken: getCsrfToken,
  signin: signIn,
  signout: signOut
};
exports.default = _default;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/next-auth/dist/lib/logger.js":
/*!***************************************************!*\
  !*** ./node_modules/next-auth/dist/lib/logger.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setLogger = setLogger;
exports.proxyLogger = proxyLogger;
exports.default = void 0;
const _logger = {
  error(code, ...message) {
    console.error(`[next-auth][error][${code.toLowerCase()}]`, `\nhttps://next-auth.js.org/errors#${code.toLowerCase()}`, ...message);
  },

  warn(code, ...message) {
    console.warn(`[next-auth][warn][${code.toLowerCase()}]`, `\nhttps://next-auth.js.org/warnings#${code.toLowerCase()}`, ...message);
  },

  debug(code, ...message) {
    var _process, _process$env;

    if (!((_process = process) !== null && _process !== void 0 && (_process$env = _process.env) !== null && _process$env !== void 0 && _process$env._NEXTAUTH_DEBUG)) return;
    console.log(`[next-auth][debug][${code.toLowerCase()}]`, ...message);
  }

};

function setLogger(newLogger = {}) {
  if (newLogger.error) _logger.error = newLogger.error;
  if (newLogger.warn) _logger.warn = newLogger.warn;
  if (newLogger.debug) _logger.debug = newLogger.debug;
}

var _default = _logger;
exports.default = _default;

function proxyLogger(logger = _logger, basePath) {
  try {
    if (typeof window === "undefined") {
      return logger;
    }

    const clientLogger = {};

    for (const level in logger) {
      clientLogger[level] = (code, ...message) => {
        _logger[level](code, ...message);

        const url = `${basePath}/_log`;
        const body = new URLSearchParams({
          level,
          code,
          message: JSON.stringify(message.map(m => {
            if (m instanceof Error) {
              return {
                name: m.name,
                message: m.message,
                stack: m.stack
              };
            }

            return m;
          }))
        });

        if (navigator.sendBeacon) {
          return navigator.sendBeacon(url, body);
        }

        return fetch(url, {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body
        });
      };
    }

    return clientLogger;
  } catch (_unused) {
    return _logger;
  }
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/next-auth/dist/lib/parse-url.js":
/*!******************************************************!*\
  !*** ./node_modules/next-auth/dist/lib/parse-url.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = parseUrl;

function parseUrl(url) {
  const defaultHost = 'http://localhost:3000';
  const defaultPath = '/api/auth';

  if (!url) {
    url = `${defaultHost}${defaultPath}`;
  }

  const protocol = url.startsWith('http:') ? 'http' : 'https';
  url = url.replace(/^https?:\/\//, '').replace(/\/$/, '');
  const [_host, ..._path] = url.split('/');
  const baseUrl = _host ? `${protocol}://${_host}` : defaultHost;
  const basePath = _path.length > 0 ? `/${_path.join('/')}` : defaultPath;
  return {
    baseUrl,
    basePath
  };
}

/***/ }),

/***/ "./node_modules/next/dist/build/polyfills/object-assign.js":
/*!*****************************************************************!*\
  !*** ./node_modules/next/dist/build/polyfills/object-assign.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var assign=Object.assign.bind(Object);module.exports=assign;module.exports.default=module.exports;
//# sourceMappingURL=object-assign.js.map

/***/ }),

/***/ "./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?page=%2F_app&absolutePagePath=private-next-pages%2F_app.js!./":
/*!*********************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?page=%2F_app&absolutePagePath=private-next-pages%2F_app.js ***!
  \*********************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


    (window.__NEXT_P = window.__NEXT_P || []).push([
      "/_app",
      function () {
        return __webpack_require__(/*! private-next-pages/_app.js */ "./pages/_app.js");
      }
    ]);
  

/***/ }),

/***/ "./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js ***!
  \************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
const isOldIE=function isOldIE(){let memo;return function memorize(){if(typeof memo==='undefined'){// Test for IE <= 9 as proposed by Browserhacks
// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
// Tests for existence of standard globals is to allow style-loader
// to operate correctly into non-standard environments
// @see https://github.com/webpack-contrib/style-loader/issues/177
memo=Boolean(window&&document&&document.all&&!window.atob);}return memo;};}();const getTarget=function getTarget(){const memo={};return function memorize(target){if(typeof memo[target]==='undefined'){let styleTarget=document.querySelector(target);// Special case to return head of iframe instead of iframe itself
if(window.HTMLIFrameElement&&styleTarget instanceof window.HTMLIFrameElement){try{// This will throw an exception if access to iframe is blocked
// due to cross-origin restrictions
styleTarget=styleTarget.contentDocument.head;}catch(e){// istanbul ignore next
styleTarget=null;}}memo[target]=styleTarget;}return memo[target];};}();const stylesInDom=[];function getIndexByIdentifier(identifier){let result=-1;for(let i=0;i<stylesInDom.length;i++){if(stylesInDom[i].identifier===identifier){result=i;break;}}return result;}function modulesToDom(list,options){const idCountMap={};const identifiers=[];for(let i=0;i<list.length;i++){const item=list[i];const id=options.base?item[0]+options.base:item[0];const count=idCountMap[id]||0;const identifier=id+' '+count.toString();idCountMap[id]=count+1;const index=getIndexByIdentifier(identifier);const obj={css:item[1],media:item[2],sourceMap:item[3]};if(index!==-1){stylesInDom[index].references++;stylesInDom[index].updater(obj);}else{stylesInDom.push({identifier:identifier,updater:addStyle(obj,options),references:1});}identifiers.push(identifier);}return identifiers;}function insertStyleElement(options){const style=document.createElement('style');const attributes=options.attributes||{};if(typeof attributes.nonce==='undefined'){const nonce=// eslint-disable-next-line no-undef
 true?__webpack_require__.nc:undefined;if(nonce){attributes.nonce=nonce;}}Object.keys(attributes).forEach(function(key){style.setAttribute(key,attributes[key]);});if(typeof options.insert==='function'){options.insert(style);}else{const target=getTarget(options.insert||'head');if(!target){throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");}target.appendChild(style);}return style;}function removeStyleElement(style){// istanbul ignore if
if(style.parentNode===null){return false;}style.parentNode.removeChild(style);}/* istanbul ignore next  */const replaceText=function replaceText(){const textStore=[];return function replace(index,replacement){textStore[index]=replacement;return textStore.filter(Boolean).join('\n');};}();function applyToSingletonTag(style,index,remove,obj){const css=remove?'':obj.media?'@media '+obj.media+' {'+obj.css+'}':obj.css;// For old IE
/* istanbul ignore if  */if(style.styleSheet){style.styleSheet.cssText=replaceText(index,css);}else{const cssNode=document.createTextNode(css);const childNodes=style.childNodes;if(childNodes[index]){style.removeChild(childNodes[index]);}if(childNodes.length){style.insertBefore(cssNode,childNodes[index]);}else{style.appendChild(cssNode);}}}function applyToTag(style,options,obj){let css=obj.css;const media=obj.media;const sourceMap=obj.sourceMap;if(media){style.setAttribute('media',media);}else{style.removeAttribute('media');}if(sourceMap&&typeof btoa!=='undefined'){css+='\n/*# sourceMappingURL=data:application/json;base64,'+btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))))+' */';}// For old IE
/* istanbul ignore if  */if(style.styleSheet){style.styleSheet.cssText=css;}else{while(style.firstChild){style.removeChild(style.firstChild);}style.appendChild(document.createTextNode(css));}}let singleton=null;let singletonCounter=0;function addStyle(obj,options){let style;let update;let remove;if(options.singleton){const styleIndex=singletonCounter++;style=singleton||(singleton=insertStyleElement(options));update=applyToSingletonTag.bind(null,style,styleIndex,false);remove=applyToSingletonTag.bind(null,style,styleIndex,true);}else{style=insertStyleElement(options);update=applyToTag.bind(null,style,options);remove=function(){removeStyleElement(style);};}update(obj);return function updateStyle(newObj){if(newObj){if(newObj.css===obj.css&&newObj.media===obj.media&&newObj.sourceMap===obj.sourceMap){return;}update(obj=newObj);}else{remove();}};}module.exports=function(list,options){options=options||{};// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
// tags it will allow on a page
if(!options.singleton&&typeof options.singleton!=='boolean'){options.singleton=isOldIE();}list=list||[];let lastIdentifiers=modulesToDom(list,options);return function update(newList){newList=newList||[];if(Object.prototype.toString.call(newList)!=='[object Array]'){return;}for(let i=0;i<lastIdentifiers.length;i++){const identifier=lastIdentifiers[i];const index=getIndexByIdentifier(identifier);stylesInDom[index].references--;}const newLastIdentifiers=modulesToDom(newList,options);for(let i=0;i<lastIdentifiers.length;i++){const identifier=lastIdentifiers[i];const index=getIndexByIdentifier(identifier);if(stylesInDom[index].references===0){stylesInDom[index].updater();stylesInDom.splice(index,1);}}lastIdentifiers=newLastIdentifiers;};};
//# sourceMappingURL=injectStylesIntoStyleTag.js.map

/***/ }),

/***/ "./node_modules/next/dist/client/normalize-trailing-slash.js":
/*!*******************************************************************!*\
  !*** ./node_modules/next/dist/client/normalize-trailing-slash.js ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {

exports.__esModule = true;
exports.removePathTrailingSlash = removePathTrailingSlash;
exports.normalizePathTrailingSlash = void 0;
/**
* Removes the trailing slash of a path if there is one. Preserves the root path `/`.
*/

function removePathTrailingSlash(path) {
  return path.endsWith('/') && path !== '/' ? path.slice(0, -1) : path;
}
/**
* Normalizes the trailing slash of a path according to the `trailingSlash` option
* in `next.config.js`.
*/


var normalizePathTrailingSlash =  false ? undefined : removePathTrailingSlash;
exports.normalizePathTrailingSlash = normalizePathTrailingSlash;

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../compiled/webpack/module.js */ "./node_modules/next/dist/compiled/webpack/module.js")(module)))

/***/ }),

/***/ "./node_modules/next/dist/client/request-idle-callback.js":
/*!****************************************************************!*\
  !*** ./node_modules/next/dist/client/request-idle-callback.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {

exports.__esModule = true;
exports.cancelIdleCallback = exports.requestIdleCallback = void 0;

var requestIdleCallback = typeof self !== 'undefined' && self.requestIdleCallback || function (cb) {
  var start = Date.now();
  return setTimeout(function () {
    cb({
      didTimeout: false,
      timeRemaining: function timeRemaining() {
        return Math.max(0, 50 - (Date.now() - start));
      }
    });
  }, 1);
};

exports.requestIdleCallback = requestIdleCallback;

var cancelIdleCallback = typeof self !== 'undefined' && self.cancelIdleCallback || function (id) {
  return clearTimeout(id);
};

exports.cancelIdleCallback = cancelIdleCallback;

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../compiled/webpack/module.js */ "./node_modules/next/dist/compiled/webpack/module.js")(module)))

/***/ }),

/***/ "./node_modules/next/dist/client/route-loader.js":
/*!*******************************************************!*\
  !*** ./node_modules/next/dist/client/route-loader.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {

var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/next/node_modules/@babel/runtime/helpers/interopRequireDefault.js");

exports.__esModule = true;
exports.markAssetError = markAssetError;
exports.isAssetError = isAssetError;
exports.getClientBuildManifest = getClientBuildManifest;
exports["default"] = void 0;

var _getAssetPathFromRoute = _interopRequireDefault(__webpack_require__(/*! ../next-server/lib/router/utils/get-asset-path-from-route */ "./node_modules/next/dist/next-server/lib/router/utils/get-asset-path-from-route.js"));

var _requestIdleCallback = __webpack_require__(/*! ./request-idle-callback */ "./node_modules/next/dist/client/request-idle-callback.js"); // 3.8s was arbitrarily chosen as it's what https://web.dev/interactive
// considers as "Good" time-to-interactive. We must assume something went
// wrong beyond this point, and then fall-back to a full page transition to
// show the user something of value.


var MS_MAX_IDLE_DELAY = 3800;

function withFuture(key, map, generator) {
  var entry = map.get(key);

  if (entry) {
    if ('future' in entry) {
      return entry.future;
    }

    return Promise.resolve(entry);
  }

  var resolver;
  var prom = new Promise(function (resolve) {
    resolver = resolve;
  });
  map.set(key, entry = {
    resolve: resolver,
    future: prom
  });
  return generator ? // eslint-disable-next-line no-sequences
  generator().then(function (value) {
    return resolver(value), value;
  }) : prom;
}

function hasPrefetch(link) {
  try {
    link = document.createElement('link');
    return (// detect IE11 since it supports prefetch but isn't detected
      // with relList.support
      !!window.MSInputMethodContext && !!document.documentMode || link.relList.supports('prefetch')
    );
  } catch (_unused) {
    return false;
  }
}

var canPrefetch = hasPrefetch();

function prefetchViaDom(href, as, link) {
  return new Promise(function (res, rej) {
    if (document.querySelector("link[rel=\"prefetch\"][href^=\"".concat(href, "\"]"))) {
      return res();
    }

    link = document.createElement('link'); // The order of property assignment here is intentional:

    if (as) link.as = as;
    link.rel = "prefetch";
    link.crossOrigin = undefined;
    link.onload = res;
    link.onerror = rej; // `href` should always be last:

    link.href = href;
    document.head.appendChild(link);
  });
}

var ASSET_LOAD_ERROR = Symbol('ASSET_LOAD_ERROR'); // TODO: unexport

function markAssetError(err) {
  return Object.defineProperty(err, ASSET_LOAD_ERROR, {});
}

function isAssetError(err) {
  return err && ASSET_LOAD_ERROR in err;
}

function appendScript(src, script) {
  return new Promise(function (resolve, reject) {
    script = document.createElement('script'); // The order of property assignment here is intentional.
    // 1. Setup success/failure hooks in case the browser synchronously
    //    executes when `src` is set.

    script.onload = resolve;

    script.onerror = function () {
      return reject(markAssetError(new Error("Failed to load script: ".concat(src))));
    }; // 2. Configure the cross-origin attribute before setting `src` in case the
    //    browser begins to fetch.


    script.crossOrigin = undefined; // 3. Finally, set the source and inject into the DOM in case the child
    //    must be appended for fetching to start.

    script.src = src;
    document.body.appendChild(script);
  });
} // Resolve a promise that times out after given amount of milliseconds.


function resolvePromiseWithTimeout(p, ms, err) {
  return new Promise(function (resolve, reject) {
    var cancelled = false;
    p.then(function (r) {
      // Resolved, cancel the timeout
      cancelled = true;
      resolve(r);
    })["catch"](reject);
    (0, _requestIdleCallback.requestIdleCallback)(function () {
      return setTimeout(function () {
        if (!cancelled) {
          reject(err);
        }
      }, ms);
    });
  });
} // TODO: stop exporting or cache the failure
// It'd be best to stop exporting this. It's an implementation detail. We're
// only exporting it for backwards compatibilty with the `page-loader`.
// Only cache this response as a last resort if we cannot eliminate all other
// code branches that use the Build Manifest Callback and push them through
// the Route Loader interface.


function getClientBuildManifest() {
  if (self.__BUILD_MANIFEST) {
    return Promise.resolve(self.__BUILD_MANIFEST);
  }

  var onBuildManifest = new Promise(function (resolve) {
    // Mandatory because this is not concurrent safe:
    var cb = self.__BUILD_MANIFEST_CB;

    self.__BUILD_MANIFEST_CB = function () {
      resolve(self.__BUILD_MANIFEST);
      cb && cb();
    };
  });
  return resolvePromiseWithTimeout(onBuildManifest, MS_MAX_IDLE_DELAY, markAssetError(new Error('Failed to load client build manifest')));
}

function getFilesForRoute(assetPrefix, route) {
  if (true) {
    return Promise.resolve({
      scripts: [assetPrefix + '/_next/static/chunks/pages' + encodeURI((0, _getAssetPathFromRoute["default"])(route, '.js'))],
      // Styles are handled by `style-loader` in development:
      css: []
    });
  }

  return getClientBuildManifest().then(function (manifest) {
    if (!(route in manifest)) {
      throw markAssetError(new Error("Failed to lookup route: ".concat(route)));
    }

    var allFiles = manifest[route].map(function (entry) {
      return assetPrefix + '/_next/' + encodeURI(entry);
    });
    return {
      scripts: allFiles.filter(function (v) {
        return v.endsWith('.js');
      }),
      css: allFiles.filter(function (v) {
        return v.endsWith('.css');
      })
    };
  });
}

function createRouteLoader(assetPrefix) {
  var entrypoints = new Map();
  var loadedScripts = new Map();
  var styleSheets = new Map();
  var routes = new Map();

  function maybeExecuteScript(src) {
    var prom = loadedScripts.get(src);

    if (prom) {
      return prom;
    } // Skip executing script if it's already in the DOM:


    if (document.querySelector("script[src^=\"".concat(src, "\"]"))) {
      return Promise.resolve();
    }

    loadedScripts.set(src, prom = appendScript(src));
    return prom;
  }

  function fetchStyleSheet(href) {
    var prom = styleSheets.get(href);

    if (prom) {
      return prom;
    }

    styleSheets.set(href, prom = fetch(href).then(function (res) {
      if (!res.ok) {
        throw new Error("Failed to load stylesheet: ".concat(href));
      }

      return res.text().then(function (text) {
        return {
          href: href,
          content: text
        };
      });
    })["catch"](function (err) {
      throw markAssetError(err);
    }));
    return prom;
  }

  return {
    whenEntrypoint: function whenEntrypoint(route) {
      return withFuture(route, entrypoints);
    },
    onEntrypoint: function onEntrypoint(route, execute) {
      Promise.resolve(execute).then(function (fn) {
        return fn();
      }).then(function (exports) {
        return {
          component: exports && exports["default"] || exports,
          exports: exports
        };
      }, function (err) {
        return {
          error: err
        };
      }).then(function (input) {
        var old = entrypoints.get(route);
        entrypoints.set(route, input);
        if (old && 'resolve' in old) old.resolve(input);
      });
    },
    loadRoute: function loadRoute(route, prefetch) {
      var _this = this;

      return withFuture(route, routes, function () {
        return resolvePromiseWithTimeout(getFilesForRoute(assetPrefix, route).then(function (_ref) {
          var scripts = _ref.scripts,
              css = _ref.css;
          return Promise.all([entrypoints.has(route) ? [] : Promise.all(scripts.map(maybeExecuteScript)), Promise.all(css.map(fetchStyleSheet))]);
        }).then(function (res) {
          return _this.whenEntrypoint(route).then(function (entrypoint) {
            return {
              entrypoint: entrypoint,
              styles: res[1]
            };
          });
        }), MS_MAX_IDLE_DELAY, markAssetError(new Error("Route did not complete loading: ".concat(route)))).then(function (_ref2) {
          var entrypoint = _ref2.entrypoint,
              styles = _ref2.styles;
          var res = Object.assign({
            styles: styles
          }, entrypoint);
          return 'error' in entrypoint ? entrypoint : res;
        })["catch"](function (err) {
          if (prefetch) {
            // we don't want to cache errors during prefetch
            throw err;
          }

          return {
            error: err
          };
        });
      });
    },
    prefetch: function prefetch(route) {
      var _this2 = this;

      // https://github.com/GoogleChromeLabs/quicklink/blob/453a661fa1fa940e2d2e044452398e38c67a98fb/src/index.mjs#L115-L118
      // License: Apache 2.0
      var cn;

      if (cn = navigator.connection) {
        // Don't prefetch if using 2G or if Save-Data is enabled.
        if (cn.saveData || /2g/.test(cn.effectiveType)) return Promise.resolve();
      }

      return getFilesForRoute(assetPrefix, route).then(function (output) {
        return Promise.all(canPrefetch ? output.scripts.map(function (script) {
          return prefetchViaDom(script, 'script');
        }) : []);
      }).then(function () {
        (0, _requestIdleCallback.requestIdleCallback)(function () {
          return _this2.loadRoute(route, true)["catch"](function () {});
        });
      })["catch"]( // swallow prefetch errors
      function () {});
    }
  };
}

var _default = createRouteLoader;
exports["default"] = _default;

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../compiled/webpack/module.js */ "./node_modules/next/dist/compiled/webpack/module.js")(module)))

/***/ }),

/***/ "./node_modules/next/dist/client/router.js":
/*!*************************************************!*\
  !*** ./node_modules/next/dist/client/router.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {

var _construct = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/construct */ "./node_modules/next/node_modules/@babel/runtime/helpers/construct.js");

var _s = $RefreshSig$();

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var _interopRequireWildcard = __webpack_require__(/*! @babel/runtime/helpers/interopRequireWildcard */ "./node_modules/next/node_modules/@babel/runtime/helpers/interopRequireWildcard.js");

var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/next/node_modules/@babel/runtime/helpers/interopRequireDefault.js");

exports.__esModule = true;
exports.useRouter = useRouter;
exports.makePublicRouterInstance = makePublicRouterInstance;
exports.createRouter = exports.withRouter = exports["default"] = void 0;

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "./node_modules/react/index.js"));

var _router2 = _interopRequireWildcard(__webpack_require__(/*! ../next-server/lib/router/router */ "./node_modules/next/dist/next-server/lib/router/router.js"));

exports.Router = _router2["default"];
exports.NextRouter = _router2.NextRouter;

var _routerContext = __webpack_require__(/*! ../next-server/lib/router-context */ "./node_modules/next/dist/next-server/lib/router-context.js");

var _withRouter = _interopRequireDefault(__webpack_require__(/*! ./with-router */ "./node_modules/next/dist/client/with-router.js"));

exports.withRouter = _withRouter["default"];
/* global window */

var singletonRouter = {
  router: null,
  // holds the actual router instance
  readyCallbacks: [],
  ready: function ready(cb) {
    if (this.router) return cb();

    if (true) {
      this.readyCallbacks.push(cb);
    }
  }
}; // Create public properties and methods of the router in the singletonRouter

var urlPropertyFields = ['pathname', 'route', 'query', 'asPath', 'components', 'isFallback', 'basePath', 'locale', 'locales', 'defaultLocale', 'isReady', 'isPreview', 'isLocaleDomain'];
var routerEvents = ['routeChangeStart', 'beforeHistoryChange', 'routeChangeComplete', 'routeChangeError', 'hashChangeStart', 'hashChangeComplete'];
var coreMethodFields = ['push', 'replace', 'reload', 'back', 'prefetch', 'beforePopState']; // Events is a static property on the router, the router doesn't have to be initialized to use it

Object.defineProperty(singletonRouter, 'events', {
  get: function get() {
    return _router2["default"].events;
  }
});
urlPropertyFields.forEach(function (field) {
  // Here we need to use Object.defineProperty because, we need to return
  // the property assigned to the actual router
  // The value might get changed as we change routes and this is the
  // proper way to access it
  Object.defineProperty(singletonRouter, field, {
    get: function get() {
      var router = getRouter();
      return router[field];
    }
  });
});
coreMethodFields.forEach(function (field) {
  // We don't really know the types here, so we add them later instead
  ;

  singletonRouter[field] = function () {
    var router = getRouter();
    return router[field].apply(router, arguments);
  };
});
routerEvents.forEach(function (event) {
  singletonRouter.ready(function () {
    _router2["default"].events.on(event, function () {
      var eventField = "on".concat(event.charAt(0).toUpperCase()).concat(event.substring(1));
      var _singletonRouter = singletonRouter;

      if (_singletonRouter[eventField]) {
        try {
          _singletonRouter[eventField].apply(_singletonRouter, arguments);
        } catch (err) {
          console.error("Error when running the Router event: ".concat(eventField));
          console.error("".concat(err.message, "\n").concat(err.stack));
        }
      }
    });
  });
});

function getRouter() {
  if (!singletonRouter.router) {
    var message = 'No router instance found.\n' + 'You should only use "next/router" inside the client side of your app.\n';
    throw new Error(message);
  }

  return singletonRouter.router;
} // Export the singletonRouter and this is the public API.


var _default = singletonRouter; // Reexport the withRoute HOC

exports["default"] = _default;

function useRouter() {
  _s();

  return _react["default"].useContext(_routerContext.RouterContext);
} // INTERNAL APIS
// -------------
// (do not use following exports inside the app)
// Create a router and assign it as the singleton instance.
// This is used in client side when we are initilizing the app.
// This should **not** use inside the server.


_s(useRouter, "gDsCjeeItUuvgOWf1v4qoK9RF6k=");

var createRouter = function createRouter() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  singletonRouter.router = _construct(_router2["default"], args);
  singletonRouter.readyCallbacks.forEach(function (cb) {
    return cb();
  });
  singletonRouter.readyCallbacks = [];
  return singletonRouter.router;
}; // This function is used to create the `withRouter` router instance


exports.createRouter = createRouter;

function makePublicRouterInstance(router) {
  var _router = router;
  var instance = {};

  var _iterator = _createForOfIteratorHelper(urlPropertyFields),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var property = _step.value;

      if (typeof _router[property] === 'object') {
        instance[property] = Object.assign(Array.isArray(_router[property]) ? [] : {}, _router[property]); // makes sure query is not stateful

        continue;
      }

      instance[property] = _router[property];
    } // Events is a static property on the router, the router doesn't have to be initialized to use it

  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  instance.events = _router2["default"].events;
  coreMethodFields.forEach(function (field) {
    instance[field] = function () {
      return _router[field].apply(_router, arguments);
    };
  });
  return instance;
}

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../compiled/webpack/module.js */ "./node_modules/next/dist/compiled/webpack/module.js")(module)))

/***/ }),

/***/ "./node_modules/next/dist/client/with-router.js":
/*!******************************************************!*\
  !*** ./node_modules/next/dist/client/with-router.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {

var _interopRequireDefault = __webpack_require__(/*! @babel/runtime/helpers/interopRequireDefault */ "./node_modules/next/node_modules/@babel/runtime/helpers/interopRequireDefault.js");

exports.__esModule = true;
exports["default"] = withRouter;

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "./node_modules/react/index.js"));

var _router = __webpack_require__(/*! ./router */ "./node_modules/next/dist/client/router.js");

function withRouter(ComposedComponent) {
  function WithRouterWrapper(props) {
    return /*#__PURE__*/_react["default"].createElement(ComposedComponent, Object.assign({
      router: (0, _router.useRouter)()
    }, props));
  }

  WithRouterWrapper.getInitialProps = ComposedComponent.getInitialProps // This is needed to allow checking for custom getInitialProps in _app
  ;
  WithRouterWrapper.origGetInitialProps = ComposedComponent.origGetInitialProps;

  if (true) {
    var name = ComposedComponent.displayName || ComposedComponent.name || 'Unknown';
    WithRouterWrapper.displayName = "withRouter(".concat(name, ")");
  }

  return WithRouterWrapper;
}

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../compiled/webpack/module.js */ "./node_modules/next/dist/compiled/webpack/module.js")(module)))

/***/ }),

/***/ "./node_modules/next/dist/compiled/css-loader/api.js":
/*!***********************************!*\
  !*** (webpack)/css-loader/api.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* WEBPACK VAR INJECTION */(function(__dirname) {module.exports=function(){"use strict";var n={762:function(n){n.exports=function(n){var t=[];t.toString=function toString(){return this.map(function(t){var r=cssWithMappingToString(t,n);if(t[2]){return"@media ".concat(t[2]," {").concat(r,"}")}return r}).join("")};t.i=function(n,r,o){if(typeof n==="string"){n=[[null,n,""]]}var e={};if(o){for(var a=0;a<this.length;a++){var c=this[a][0];if(c!=null){e[c]=true}}}for(var i=0;i<n.length;i++){var u=[].concat(n[i]);if(o&&e[u[0]]){continue}if(r){if(!u[2]){u[2]=r}else{u[2]="".concat(r," and ").concat(u[2])}}t.push(u)}};return t};function cssWithMappingToString(n,t){var r=n[1]||"";var o=n[3];if(!o){return r}if(t&&typeof btoa==="function"){var e=toComment(o);var a=o.sources.map(function(n){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(n," */")});return[r].concat(a).concat([e]).join("\n")}return[r].join("\n")}function toComment(n){var t=btoa(unescape(encodeURIComponent(JSON.stringify(n))));var r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t);return"/*# ".concat(r," */")}}};var t={};function __nccwpck_require__(r){if(t[r]){return t[r].exports}var o=t[r]={exports:{}};var e=true;try{n[r](o,o.exports,__nccwpck_require__);e=false}finally{if(e)delete t[r]}return o.exports}__nccwpck_require__.ab=__dirname+"/";return __nccwpck_require__(762)}();
/* WEBPACK VAR INJECTION */}.call(this, "/"))

/***/ }),

/***/ "./node_modules/next/dist/compiled/css-loader/cjs.js?!./node_modules/next/dist/compiled/postcss-loader/cjs.js?!./pages/styles.css":
/*!**************************************************************************************************************************!*\
  !*** (webpack)/css-loader/cjs.js??ref--5-oneOf-6-1!(webpack)/postcss-loader/cjs.js??ref--5-oneOf-6-2!./pages/styles.css ***!
  \**************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../node_modules/next/dist/compiled/css-loader/api.js */ "./node_modules/next/dist/compiled/css-loader/api.js");
/* harmony import */ var _node_modules_next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0__);
// Imports

var ___CSS_LOADER_EXPORT___ = _node_modules_next_dist_compiled_css_loader_api_js__WEBPACK_IMPORTED_MODULE_0___default()(true);
___CSS_LOADER_EXPORT___.push([module.i, "@import url(https://fonts.googleapis.com/css2?family=Roboto:wght@400;600;700&display=swap);"]);
// Module
___CSS_LOADER_EXPORT___.push([module.i, "@charset \"UTF-8\";\r\nuser-area {\r\n\tpadding-top: 0px !important;\r\n\tpadding-bottom: 0px !important;\r\n\tmargin-top: 0px !important;\r\n\tmargin-bottom: 0px !important;\r\n\t\r\n }\r\n .slideFix {\r\n  display: none;\r\n }\r\n\r\n\r\n@media only screen and (max-width: 380px) {\r\nbody{\r\n    -moz-transform: scale(0.8, 0.8); /* Moz-browsers */\r\n    zoom: 0.8; /* Other non-webkit browsers */\r\n    zoom: 80%; /* Webkit browsers code */\r\n}\r\n}\r\n\r\n/************************ CSS table of content ************************\r\n *\r\n * 1)  reset css\r\n * 2)  global css\r\n * 3)  header \r\n * 4)  hero\r\n * 5)  inner-hero-section\r\n * 6)  about section\r\n * 7)  next-draw-section \r\n * 8)  how to play section\r\n * 9)  contest section\r\n * 10) contest slider section\r\n * 11) contest feature section\r\n * 12) winner section\r\n * 13) winner details section\r\n * 14) latest winner section\r\n * 15) overview section\r\n * 16) features section\r\n * 17) team section\r\n * 18) testimonial section\r\n * 19) support section\r\n * 20) counter section\r\n * 21) contest-details-section\r\n * 22) lottery-details\r\n * 23) cart section\r\n * 24) checkout section\r\n * 25) affiliate single section\r\n * 26) how it work section\r\n * 27) affiliate partner section\r\n * 28) top affiliate section\r\n * 29) video section\r\n * 30) buy ticket section\r\n * 31) client section\r\n * 32) faq section\r\n * 33) blog section\r\n * 34) blog single section\r\n * 35) contact section\r\n * 36) login\r\n * 37) user section\r\n * 38) error-section\r\n * 39) sidebar\r\n * 40) footer section\r\n *\r\n **************************************************************** */\r\n/* reset css start */\r\n/* @import url(\"https://fonts.googleapis.com/css2?family=Josefin+Sans:wght@400;600;700&display=swap\"); */\r\nhtml {\r\n  scroll-behavior: smooth; }\r\n\r\n  /* hide scrollbar ian Chrome */\r\nbody::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n\r\n  /* hide scrollbar ian IE, Firefox */\r\nbody{\r\n  -ms-overflow-style: none;  /* IE and Edge */\r\n    scrollbar-width: none;  /* Firefox */\r\n}\r\n\r\nbody {\r\n  /* font-family: \"Josefin Sans\", sans-serif; */\r\n  /* overflow: hidden; */\r\n  font-family: \"Roboto\", sans-serif;\r\n  font-size: 15px;\r\n  padding: 0;\r\n  margin: 0;\r\n  font-weight: 300;\r\n  position: relative;\r\n  background-color: #000033;\r\n  overflow-x: hidden; }\r\n\r\nimg {\r\n  max-width: 100%;\r\n  height: auto; }\r\n\r\nul, ol {\r\n  padding: 0;\r\n  margin: 0;\r\n  list-style: none; }\r\n\r\nbutton {\r\n  cursor: pointer; }\r\n\r\n*:focus {\r\n  outline: none; }\r\n\r\nbutton {\r\n  border: none; }\r\n\r\nbutton:focus {\r\n  outline: none; }\r\n\r\nspan {\r\n  display: inline-block; }\r\n\r\na:hover {\r\n  color: #ff0000; }\r\n\r\n/* reset css end */\r\n/* global css strat */\r\n.mb-30 {\r\n  margin-bottom: 30px; }\r\n\r\n.mt-30 {\r\n  margin-top: 30px; }\r\n\r\n.mt-40 {\r\n  margin-top: 40px; }\r\n\r\n.mt-50 {\r\n  margin-top: 50px; }\r\n\r\n.mt-80 {\r\n  margin-top: 80px; }\r\n\r\n.mb-40 {\r\n  margin-bottom: 40px; }\r\n\r\n.mb-50 {\r\n  margin-bottom: 50px; }\r\n\r\n.mb-none-30 {\r\n  margin-bottom: -30px !important; }\r\n\r\n.mb-none-40 {\r\n  margin-bottom: -40px !important; }\r\n\r\n.mb-none-50 {\r\n  margin-bottom: -50px !important; }\r\n\r\n.pt-90 {\r\n  padding-top: 90px; }\r\n\r\n.pb-90 {\r\n  padding-bottom: 90px; }\r\n\r\n.pt-120 {\r\n  padding-top: 120px; }\r\n  @media (max-width: 991px) {\r\n    .pt-120 {\r\n      padding-top: 90px; } }\r\n  @media (max-width: 575px) {\r\n    .pt-120 {\r\n      padding-top: 80px; } }\r\n\r\n.pb-120 {\r\n  padding-bottom: 120px; }\r\n  @media (max-width: 991px) {\r\n    .pb-120 {\r\n      padding-bottom: 90px; } }\r\n  @media (max-width: 575px) {\r\n    .pb-120 {\r\n      padding-bottom: 80px; } }\r\n\r\n.pt-150 {\r\n  padding-top: 150px; }\r\n  @media (max-width: 991px) {\r\n    .pt-150 {\r\n      padding-top: 90px; } }\r\n  @media (max-width: 575px) {\r\n    .pt-150 {\r\n      padding-top: 80px; } }\r\n\r\n.pb-150 {\r\n  padding-bottom: 150px; }\r\n  @media (max-width: 991px) {\r\n    .pb-150 {\r\n      padding-bottom: 90px; } }\r\n  @media (max-width: 575px) {\r\n    .pb-150 {\r\n      padding-bottom: 80px; } }\r\n\r\n.mt-100 {\r\n  margin-top: 100px; }\r\n\r\n.bg_img {\r\n  background-size: cover;\r\n  background-position: center; }\r\n\r\n.bg--one {\r\n  background-color: #0f0232 !important; }\r\n\r\n.bg--two {\r\n  background-color: #02014a !important; }\r\n\r\n.nice-select {\r\n  width: 100%;\r\n  min-height: 50px;\r\n  line-height: 50px;\r\n  border-radius: 3px;\r\n  -webkit-border-radius: 3px;\r\n  -moz-border-radius: 3px;\r\n  -ms-border-radius: 3px;\r\n  -o-border-radius: 3px; }\r\n  .nice-select .list {\r\n    width: 100%;\r\n    -webkit-box-shadow: 0 2px 15px 0 rgba(0, 0, 0, 0.15);\r\n            box-shadow: 0 2px 15px 0 rgba(0, 0, 0, 0.15); }\r\n\r\n.position-relative {\r\n  z-index: 1; }\r\n\r\n.bg-el {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: -1;\r\n  width: 100%; }\r\n  .bg-el img {\r\n    width: 100%;\r\n    object-fit: cover;\r\n    -o-object-fit: cover;\r\n    object-position: center;\r\n    -o-object-position: center; }\r\n\r\n.section-bg {\r\n  background-color: #0f0232; }\r\n\r\n.section-bg-two {\r\n  background-color: #02014a; }\r\n\r\n.section-header {\r\n  margin-bottom: 70px;\r\n  margin-top: -8px; }\r\n  @media (max-width: 991px) {\r\n    .section-header {\r\n      margin-bottom: 50px; } }\r\n  .section-header p {\r\n    margin-top: 10px;\r\n    font-size: 18px;\r\n    color: #f1f3ff; }\r\n  .section-header.has--bg {\r\n    position: relative;\r\n    z-index: 1; }\r\n    .section-header.has--bg .header-image {\r\n      position: absolute;\r\n      top: 0;\r\n      left: 0;\r\n      width: 100%;\r\n      height: 65px;\r\n      text-align: center;\r\n      z-index: -1;\r\n      display: -webkit-flex;\r\n      display: -moz-box;\r\n      display: flex;\r\n      -webkit-align-items: center;\r\n         -moz-box-align: center;\r\n              align-items: center;\r\n      -webkit-justify-content: center;\r\n         -moz-box-pack: center;\r\n              justify-content: center; }\r\n      .section-header.has--bg .header-image.style--two {\r\n        left: -50px;\r\n        text-align: left; }\r\n  .section-header.style--two {\r\n    margin-bottom: 30px; }\r\n\r\n.section-sub-title {\r\n  font-size: 24px;\r\n  font-family: \"Josefin Sans\", sans-serif;\r\n  color: #ec038b;\r\n  font-weight: 600;\r\n  margin-bottom: 10px; }\r\n  @media (max-width: 767px) {\r\n    .section-sub-title {\r\n      font-size: 20px; } }\r\n\r\n.section-title {\r\n  font-size: 60px;\r\n  text-transform: capitalize; }\r\n  @media (max-width: 1199px) {\r\n    .section-title {\r\n      font-size: 56px; } }\r\n  @media (max-width: 991px) {\r\n    .section-title {\r\n      font-size: 48px; } }\r\n  @media (max-width: 767px) {\r\n    .section-title {\r\n      font-size: 36px; } }\r\n  @media (max-width: 575px) {\r\n    .section-title {\r\n      font-size: 32px; } }\r\n  .section-title.style--two {\r\n    text-transform: unset; }\r\n\r\n.border-radius-100 {\r\n  border-radius: 50% !important;\r\n  -webkit-border-radius: 50% !important;\r\n  -moz-border-radius: 50% !important;\r\n  -ms-border-radius: 50% !important;\r\n  -o-border-radius: 50% !important; }\r\n\r\n.hover--effect-1 {\r\n  -webkit-transition: all 0.3s;\r\n  -moz-transition: all 0.3s;\r\n  transition: all 0.3s; }\r\n  .hover--effect-1:hover {\r\n    -webkit-transform: translateY(-5px) scale(1.05);\r\n    -moz-transform: translateY(-5px) scale(1.05);\r\n         transform: translateY(-5px) scale(1.05); }\r\n\r\n.bold-bottom--border {\r\n  border-bottom: 20px solid #342171; }\r\n\r\n.video-button {\r\n  width: 105px;\r\n  height: 105px;\r\n  color: #ffffff;\r\n  border-radius: 50%;\r\n  -webkit-border-radius: 50%;\r\n  -moz-border-radius: 50%;\r\n  -ms-border-radius: 50%;\r\n  -o-border-radius: 50%;\r\n  display: inline-block;\r\n  background-color: #000033;\r\n  text-align: center;\r\n  line-height: 125px;\r\n  animation: pulse 2000ms linear infinite;\r\n  -webkit-animation: pulse 2000ms linear infinite;\r\n  -moz-animation: pulse 2000ms linear infinite; }\r\n  .video-button::before, .video-button::after {\r\n    position: absolute;\r\n    content: \"\";\r\n    width: 100%;\r\n    height: 100%;\r\n    left: 0;\r\n    top: 0;\r\n    border-radius: 74px;\r\n    background-color: #000033;\r\n    opacity: 0.15;\r\n    z-index: -10; }\r\n  .video-button::before {\r\n    z-index: -10;\r\n    animation: inner-ripple 2000ms linear infinite;\r\n    -webkit-animation: inner-ripple 2000ms linear infinite;\r\n    -moz-animation: inner-ripple 2000ms linear infinite; }\r\n  .video-button::after {\r\n    z-index: -10;\r\n    animation: outer-ripple 2000ms linear infinite;\r\n    -webkit-animation: outer-ripple 2000ms linear infinite;\r\n    -moz-animation: outer-ripple 2000ms linear infinite; }\r\n  .video-button i {\r\n    margin-left: 10px;\r\n    font-size: 36px; }\r\n\r\n@-webkit-keyframes outer-ripple {\r\n  0% {\r\n    -webkit-transform: scale(1);\r\n    transform: scale(1);\r\n    opacity: 0.5; }\r\n  80% {\r\n    -webkit-transform: scale(1.5);\r\n    transform: scale(1.5);\r\n    opacity: 0; }\r\n  100% {\r\n    -webkit-transform: scale(2.5);\r\n    transform: scale(2.5);\r\n    opacity: 0; } }\r\n@keyframes outer-ripple {\r\n  0% {\r\n    -webkit-transform: scale(1);\r\n    -moz-transform: scale(1);\r\n         transform: scale(1);\r\n    opacity: 0.5; }\r\n  80% {\r\n    -webkit-transform: scale(1.5);\r\n    -moz-transform: scale(1.5);\r\n         transform: scale(1.5);\r\n    opacity: 0; }\r\n  100% {\r\n    -webkit-transform: scale(2.5);\r\n    -moz-transform: scale(2.5);\r\n         transform: scale(2.5);\r\n    opacity: 0; } }\r\n@-webkit-keyframes inner-ripple {\r\n  0% {\r\n    -webkit-transform: scale(1);\r\n    transform: scale(1);\r\n    opacity: 0.5; }\r\n  30% {\r\n    -webkit-transform: scale(1);\r\n    transform: scale(1);\r\n    opacity: 0.5; }\r\n  100% {\r\n    -webkit-transform: scale(1.5);\r\n    transform: scale(1.5);\r\n    opacity: 0; } }\r\n@keyframes inner-ripple {\r\n  0% {\r\n    -webkit-transform: scale(1);\r\n    -moz-transform: scale(1);\r\n         transform: scale(1);\r\n    opacity: 0.5; }\r\n  30% {\r\n    -webkit-transform: scale(1);\r\n    -moz-transform: scale(1);\r\n         transform: scale(1);\r\n    opacity: 0.5; }\r\n  100% {\r\n    -webkit-transform: scale(1.5);\r\n    -moz-transform: scale(1.5);\r\n         transform: scale(1.5);\r\n    opacity: 0; } }\r\n.cmn-list {\r\n  margin-top: 20px; }\r\n  .cmn-list li + li {\r\n    margin-top: 15px; }\r\n  .cmn-list li {\r\n    position: relative;\r\n    padding-left: 40px; }\r\n    .cmn-list li::before {\r\n      position: absolute;\r\n      content: \"\";\r\n      top: 5px;\r\n      left: 0;\r\n      width: 20px;\r\n      height: 10px;\r\n      border-left: 1px solid #000033;\r\n      border-bottom: 1px solid #000033;\r\n      -webkit-transform: rotate(-45deg);\r\n      -moz-transform: rotate(-45deg);\r\n           transform: rotate(-45deg); }\r\n\r\n.cmn-list-2 {\r\n  margin-top: 20px; }\r\n  .cmn-list-2 li + li {\r\n    margin-top: 10px; }\r\n  .cmn-list-2 li {\r\n    position: relative;\r\n    padding-left: 45px; }\r\n    .cmn-list-2 li:nth-last-of-type(3n+3)::before {\r\n      border-color: #a22546; }\r\n    .cmn-list-2 li:nth-last-of-type(3n+2)::before {\r\n      border-color: #f7a139; }\r\n    .cmn-list-2 li:nth-last-of-type(3n+1)::before {\r\n      border-color: #3097d1; }\r\n    .cmn-list-2 li::before {\r\n      position: absolute;\r\n      content: \"\";\r\n      top: 5px;\r\n      left: 0;\r\n      width: 20px;\r\n      height: 10px;\r\n      border-left: 1px solid red;\r\n      border-bottom: 1px solid red;\r\n      -webkit-transform: rotate(-45deg);\r\n      -moz-transform: rotate(-45deg);\r\n           transform: rotate(-45deg); }\r\n\r\n.number-list--style {\r\n  list-style-type: decimal;\r\n  padding-left: 15px; }\r\n  .number-list--style li span {\r\n    font-weight: 500;\r\n    color: #000033; }\r\n\r\n.pagination .page-item.active .page-link {\r\n  background-image: -moz-linear-gradient(-30deg, #c165dd 0%, #5c27fe 100%);\r\n  background-image: -webkit-linear-gradient(-30deg, #c165dd 0%, #5c27fe 100%);\r\n  background-image: -ms-linear-gradient(-30deg, #c165dd 0%, #5c27fe 100%);\r\n  -webkit-box-shadow: 0px 3px 7px 0px rgba(0, 0, 0, 0.35);\r\n          box-shadow: 0px 3px 7px 0px rgba(0, 0, 0, 0.35);\r\n  color: #ffffff; }\r\n.pagination .page-item.disabled .page-link {\r\n  color: #8079db; }\r\n.pagination .page-item .page-link {\r\n  width: 42px;\r\n  height: 42px;\r\n  display: -webkit-flex;\r\n  display: -moz-box;\r\n  display: flex;\r\n  -webkit-flex-wrap: wrap;\r\n          flex-wrap: wrap;\r\n  -webkit-align-items: center;\r\n     -moz-box-align: center;\r\n          align-items: center;\r\n  -webkit-justify-content: center;\r\n     -moz-box-pack: center;\r\n          justify-content: center;\r\n  border: none;\r\n  background-image: none;\r\n  background-color: transparent;\r\n  -webkit-box-shadow: none;\r\n          box-shadow: none;\r\n  color: #7f96dd;\r\n  border-radius: 50%;\r\n  -webkit-border-radius: 50%;\r\n  -moz-border-radius: 50%;\r\n  -ms-border-radius: 50%;\r\n  -o-border-radius: 50%; }\r\n  .pagination .page-item .page-link.prev, .pagination .page-item .page-link.next {\r\n    width: auto;\r\n    height: auto;\r\n    background-image: none;\r\n    background-color: transparent;\r\n    -webkit-box-shadow: none;\r\n            box-shadow: none; }\r\n  .pagination .page-item .page-link.next {\r\n    color: #ffffff; }\r\n\r\n.cmn-accordion .card + .card {\r\n  margin-top: 20px; }\r\n.cmn-accordion .card {\r\n  border: none;\r\n  background-color: #311a83;\r\n  padding-left: 30px;\r\n  padding-right: 30px;\r\n  border-radius: 10px !important;\r\n  -webkit-border-radius: 10px !important;\r\n  -moz-border-radius: 10px !important;\r\n  -ms-border-radius: 10px !important;\r\n  -o-border-radius: 10px !important; }\r\n  @media (max-width: 575px) {\r\n    .cmn-accordion .card {\r\n      padding-left: 15px;\r\n      padding-right: 15px; } }\r\n.cmn-accordion .card-header {\r\n  background-color: #311a83;\r\n  padding: 0;\r\n  margin-bottom: 0 !important;\r\n  border: none; }\r\n  .cmn-accordion .card-header .btn-link {\r\n    padding: 25px 0;\r\n    display: block;\r\n    width: 100%;\r\n    -webkit-justify-content: space-between;\r\n       -moz-box-pack: justify;\r\n            justify-content: space-between;\r\n    cursor: pointer;\r\n    position: relative;\r\n    text-align: left;\r\n    padding-right: 25px;\r\n    font-size: 20px;\r\n    color: #ffffff; }\r\n    @media (max-width: 767px) {\r\n      .cmn-accordion .card-header .btn-link {\r\n        font-size: 18px; } }\r\n    @media (max-width: 575px) {\r\n      .cmn-accordion .card-header .btn-link {\r\n        font-size: 16px; } }\r\n    .cmn-accordion .card-header .btn-link.collapsed::after {\r\n      content: \"\"; }\r\n    .cmn-accordion .card-header .btn-link::after {\r\n      position: absolute;\r\n      content: \"\";\r\n      right: 0;\r\n      top: 25px;\r\n      font-family: \"Line Awesome Free\";\r\n      font-weight: 900;\r\n      width: 40px;\r\n      height: 40px;\r\n      background-image: -moz-linear-gradient(90deg, #3da9f5 0%, #683df5 100%);\r\n      background-image: -webkit-linear-gradient(90deg, #3da9f5 0%, #683df5 100%);\r\n      background-image: -ms-linear-gradient(90deg, #3da9f5 0%, #683df5 100%);\r\n      color: #ffffff;\r\n      font-size: 24px;\r\n      display: -webkit-flex;\r\n      display: -moz-box;\r\n      display: flex;\r\n      -webkit-align-items: center;\r\n         -moz-box-align: center;\r\n              align-items: center;\r\n      -webkit-justify-content: center;\r\n         -moz-box-pack: center;\r\n              justify-content: center;\r\n      -webkit-transition: all 0.3s;\r\n      -moz-transition: all 0.3s;\r\n      transition: all 0.3s;\r\n      border-radius: 50%;\r\n      -webkit-border-radius: 50%;\r\n      -moz-border-radius: 50%;\r\n      -ms-border-radius: 50%;\r\n      -o-border-radius: 50%; }\r\n      @media (max-width: 575px) {\r\n        .cmn-accordion .card-header .btn-link::after {\r\n          width: 25px;\r\n          height: 25px;\r\n          font-size: 16px; } }\r\n    .cmn-accordion .card-header .btn-link:focus, .cmn-accordion .card-header .btn-link:hover {\r\n      outline: none;\r\n      text-decoration: none;\r\n      -webkit-box-shadow: none;\r\n              box-shadow: none; }\r\n.cmn-accordion .card-body {\r\n  padding: 30px 0;\r\n  border-top: 1px solid #4129a2; }\r\n  @media (max-width: 575px) {\r\n    .cmn-accordion .card-body p {\r\n      font-size: 16px; } }\r\n\r\n.cmn-tabs {\r\n  border: none; }\r\n  .cmn-tabs li a {\r\n    padding: 14px 35px;\r\n    font-size: 18px;\r\n    font-weight: 600;\r\n    color: #ffffff;\r\n    border-radius: 999px !important;\r\n    -webkit-border-radius: 999px !important;\r\n    -moz-border-radius: 999px !important;\r\n    -ms-border-radius: 999px !important;\r\n    -o-border-radius: 999px !important;\r\n    background-image: -moz-linear-gradient(45deg, #d73df5 0%, #8f3df5 100%);\r\n    background-image: -webkit-linear-gradient(45deg, #d73df5 0%, #8f3df5 100%);\r\n    background-image: -ms-linear-gradient(45deg, #d73df5 0%, #8f3df5 100%);\r\n    -webkit-box-shadow: -1.113px 7.922px 16px 0px rgba(143, 61, 245, 0.63);\r\n            box-shadow: -1.113px 7.922px 16px 0px rgba(143, 61, 245, 0.63);\r\n    border: none !important;\r\n    text-transform: capitalize; }\r\n    @media (max-width: 575px) {\r\n      .cmn-tabs li a {\r\n        padding: 12px 25px;\r\n        font-size: 16px; } }\r\n    .cmn-tabs li a.active {\r\n      background-image: -moz-linear-gradient(86deg, #ec038b 0%, #fb6468 44%, #fbb936 100%);\r\n      background-image: -webkit-linear-gradient(86deg, #ec038b 0%, #fb6468 44%, #fbb936 100%);\r\n      background-image: -ms-linear-gradient(86deg, #ec038b 0%, #fb6468 44%, #fbb936 100%);\r\n      -webkit-box-shadow: 0px 17px 40px 0px rgba(124, 78, 25, 0.35);\r\n              box-shadow: 0px 17px 40px 0px rgba(124, 78, 25, 0.35);\r\n      color: #ffffff !important; }\r\n\r\nblockquote p {\r\n  font-weight: 700;\r\n  font-size: 24px;\r\n  color: #ffffff; }\r\n\r\n.page-breadcrumb {\r\n  display: -webkit-flex;\r\n  display: -moz-box;\r\n  display: flex;\r\n  -webkit-flex-wrap: wrap;\r\n          flex-wrap: wrap;\r\n  margin-top: 15px; }\r\n  .page-breadcrumb li {\r\n    color: #ffffff;\r\n    text-transform: capitalize; }\r\n    .page-breadcrumb li::after {\r\n      content: \"-\";\r\n      color: #ffffff;\r\n      margin: 0 5px; }\r\n    .page-breadcrumb li:first-child::before {\r\n      content: \"\";\r\n      font-family: \"Flaticon\";\r\n      color: #ef428c;\r\n      margin-right: 6px; }\r\n    .page-breadcrumb li:last-child::after {\r\n      display: none; }\r\n    .page-breadcrumb li a {\r\n      color: #ffffff;\r\n      text-transform: capitalize; }\r\n\r\n@-webkit-keyframes customBounce {\r\n  0% {\r\n    -webkit-transform: translateY(0);\r\n    transform: translateY(0); }\r\n  25% {\r\n    -webkit-transform: translateY(-10px);\r\n    transform: translateY(-10px); }\r\n  50% {\r\n    -webkit-transform: translateY(-20px);\r\n    transform: translateY(-20px); }\r\n  75% {\r\n    -webkit-transform: translateY(-10px);\r\n    transform: translateY(-10px); }\r\n  100% {\r\n    -webkit-transform: translateY(0);\r\n    transform: translateY(0); } }\r\n@keyframes customBounce {\r\n  0% {\r\n    -webkit-transform: translateY(0);\r\n    -moz-transform: translateY(0);\r\n         transform: translateY(0); }\r\n  25% {\r\n    -webkit-transform: translateY(-10px);\r\n    -moz-transform: translateY(-10px);\r\n         transform: translateY(-10px); }\r\n  50% {\r\n    -webkit-transform: translateY(-20px);\r\n    -moz-transform: translateY(-20px);\r\n         transform: translateY(-20px); }\r\n  75% {\r\n    -webkit-transform: translateY(-10px);\r\n    -moz-transform: translateY(-10px);\r\n         transform: translateY(-10px); }\r\n  100% {\r\n    -webkit-transform: translateY(0);\r\n    -moz-transform: translateY(0);\r\n         transform: translateY(0); } }\r\n.scroll-to-top {\r\n  height: 60px;\r\n  width: 60px;\r\n  position: fixed;\r\n  bottom: 5%;\r\n  right: 5%;\r\n  display: none;\r\n  z-index: 99999;\r\n  cursor: pointer;\r\n  text-align: center;\r\n  border-radius: 50%;\r\n  background-image: -moz-linear-gradient(89deg, #5f16a9 0%, #cf15f8 100%);\r\n  background-image: -webkit-linear-gradient(89deg, #5f16a9 0%, #cf15f8 100%);\r\n  background-image: -ms-linear-gradient(89deg, #5f16a9 0%, #cf15f8 100%);\r\n  line-height: 77px;\r\n  -webkit-box-shadow: 0 5px 15px 0 rgba(0, 0, 0, 0.25);\r\n          box-shadow: 0 5px 15px 0 rgba(0, 0, 0, 0.25); }\r\n  .scroll-to-top .scroll-icon {\r\n    font-size: 36px;\r\n    color: #ffffff;\r\n    display: inline-block; }\r\n\r\n.preloader {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100vh;\r\n  display: -webkit-flex;\r\n  display: -moz-box;\r\n  display: flex;\r\n  -webkit-justify-content: center;\r\n     -moz-box-pack: center;\r\n          justify-content: center;\r\n  -webkit-align-items: center;\r\n     -moz-box-align: center;\r\n          align-items: center;\r\n  background-image: -moz-linear-gradient(89deg, #5f16a9 0%, #cf15f8 100%);\r\n  background-image: -webkit-linear-gradient(89deg, #5f16a9 0%, #cf15f8 100%);\r\n  background-image: -ms-linear-gradient(89deg, #5f16a9 0%, #cf15f8 100%);\r\n  z-index: 999;\r\n  overflow: hidden; }\r\n  .preloader .spinner {\r\n    /* margin: 100px auto; */\r\n    margin: 300px auto;\r\n    width: 40px;\r\n    height: 40px;\r\n    position: relative;\r\n    text-align: center;\r\n    -webkit-animation: sk-rotate 2s infinite linear;\r\n    animation: sk-rotate 2s infinite linear; }\r\n  .preloader .dot1, .preloader .dot2 {\r\n    width: 60%;\r\n    height: 60%;\r\n    display: inline-block;\r\n    position: absolute;\r\n    top: 0;\r\n    background-color: #ffffff;\r\n    border-radius: 100%;\r\n    -webkit-animation: sk-bounce 2s infinite ease-in-out;\r\n    animation: sk-bounce 2s infinite ease-in-out; }\r\n  .preloader .dot2 {\r\n    top: auto;\r\n    bottom: 0;\r\n    -webkit-animation-delay: -1s;\r\n    animation-delay: -1s; }\r\n\r\n@-webkit-keyframes sk-rotate {\r\n  100% {\r\n    -webkit-transform: rotate(360deg);\r\n    transform: rotate(360deg); } }\r\n@keyframes sk-rotate {\r\n  100% {\r\n    -webkit-transform: rotate(360deg);\r\n    -moz-transform: rotate(360deg);\r\n         transform: rotate(360deg); } }\r\n@-webkit-keyframes sk-bounce {\r\n  0%, 100% {\r\n    transform: scale(0);\r\n    -webkit-transform: scale(0); }\r\n  50% {\r\n    transform: scale(1);\r\n    -webkit-transform: scale(1); } }\r\n@keyframes sk-bounce {\r\n  0%, 100% {\r\n    -moz-transform: scale(0);\r\n         transform: scale(0);\r\n    -webkit-transform: scale(0); }\r\n  50% {\r\n    -moz-transform: scale(1);\r\n         transform: scale(1);\r\n    -webkit-transform: scale(1); } }\r\n/* global css end */\r\nh1 {\r\n  font-size: 62px; }\r\n\r\nh2 {\r\n  font-size: 40px; }\r\n  @media (max-width: 991px) {\r\n    h2 {\r\n      font-size: 36px; } }\r\n  @media (max-width: 575px) {\r\n    h2 {\r\n      font-size: 28px; } }\r\n\r\nh3 {\r\n  font-size: 24px; }\r\n  @media (max-width: 767px) {\r\n    h3 {\r\n      font-size: 22px; } }\r\n\r\nh4 {\r\n  font-size: 22px; }\r\n  @media (max-width: 767px) {\r\n    h4 {\r\n      font-size: 20px; } }\r\n\r\nh5 {\r\n  font-size: 20px; }\r\n  @media (max-width: 767px) {\r\n    h5 {\r\n      font-size: 18px; } }\r\n\r\nh6 {\r\n  font-size: 18px; }\r\n\r\nh1, h2, h3, h4, h5, h6 {\r\n  font-family: \"Josefin Sans\", sans-serif;\r\n  color: #ffffff;\r\n  font-weight: 600;\r\n  margin: 0;\r\n  line-height: 1.3; }\r\n\r\nh1 > a, h2 > a, h3 > a, h4 > a, h5 > a, h6 > a {\r\n  font-family: \"Josefin Sans\", sans-serif;\r\n  color: #ffffff;\r\n  font-weight: 600;\r\n  -webkit-transition: all 0.3s;\r\n  -moz-transition: all 0.3s;\r\n  transition: all 0.3s;\r\n  line-height: 1.3; }\r\n\r\np, li, span {\r\n  font-size: 16px;\r\n  color: #c4cbf9;\r\n  line-height: 1.5;\r\n  margin: 0; }\r\n\r\np {\r\n  font-size: 18px; }\r\n\r\na {\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  font-family: \"Josefin Sans\", sans-serif;\r\n  color: #ffffff; }\r\n\r\na:hover {\r\n  text-decoration: none; }\r\n\r\n/* button css start */\r\n.cmn-btn {\r\n  padding: 12px 30px;\r\n  min-width: 230px;\r\n  text-align: center;\r\n  font-size: 22px;\r\n  font-weight: 600;\r\n  text-transform: uppercase;\r\n  border-radius: 999px;\r\n  -webkit-border-radius: 999px;\r\n  -moz-border-radius: 999px;\r\n  -ms-border-radius: 999px;\r\n  -o-border-radius: 999px;\r\n  background-image: -moz-linear-gradient(0deg, #e2906e 0%, #e83a99 100%);\r\n  background-image: -webkit-linear-gradient(0deg, #e2906e 0%, #e83a99 100%);\r\n  background-image: -ms-linear-gradient(0deg, #e2906e 0%, #e83a99 100%);\r\n  -webkit-box-shadow: 2.419px 9.703px 12.48px 0.52px rgba(232, 58, 153, 0.5);\r\n          box-shadow: 2.419px 9.703px 12.48px 0.52px rgba(232, 58, 153, 0.5);\r\n  -webkit-transition: all 0.3s;\r\n  -moz-transition: all 0.3s;\r\n  transition: all 0.3s;\r\n  color: #ffffff; }\r\n  .cmn-btn:hover {\r\n    color: #ffffff;\r\n    background-size: 120%;\r\n    -webkit-transform: translateY(-3px);\r\n    -moz-transform: translateY(-3px);\r\n         transform: translateY(-3px); }\r\n  @media (max-width: 1199px) {\r\n    .cmn-btn {\r\n      font-size: 18px;\r\n      min-width: 200px; } }\r\n  @media (max-width: 991px) {\r\n    .cmn-btn {\r\n      font-size: 16px; } }\r\n  @media (max-width: 767px) {\r\n    .cmn-btn {\r\n      font-size: 14px; } }\r\n  .cmn-btn.style--two {\r\n    background-image: -moz-linear-gradient(-45deg, #c165dd 0%, #5c27fe 100%);\r\n    background-image: -webkit-linear-gradient(-45deg, #c165dd 0%, #5c27fe 100%);\r\n    background-image: -ms-linear-gradient(-45deg, #c165dd 0%, #5c27fe 100%);\r\n    -webkit-box-shadow: 0px 17px 40px 0px rgba(0, 0, 0, 0.53);\r\n            box-shadow: 0px 17px 40px 0px rgba(0, 0, 0, 0.53);\r\n    font-size: 22px; }\r\n    @media (max-width: 1199px) {\r\n      .cmn-btn.style--two {\r\n        font-size: 18px; } }\r\n    @media (max-width: 991px) {\r\n      .cmn-btn.style--two {\r\n        font-size: 16px; } }\r\n    @media (max-width: 767px) {\r\n      .cmn-btn.style--two {\r\n        font-size: 14px; } }\r\n  .cmn-btn.btn--sm {\r\n    padding: 10px 22px;\r\n    font-size: 14px; }\r\n  .cmn-btn.btn--lg {\r\n    padding: 12px 45px; }\r\n\r\n.btn-grp {\r\n  display: -webkit-flex;\r\n  display: -moz-box;\r\n  display: flex;\r\n  -webkit-flex-wrap: wrap;\r\n          flex-wrap: wrap;\r\n  -webkit-justify-content: center;\r\n     -moz-box-pack: center;\r\n          justify-content: center;\r\n  margin-left: -10px;\r\n  margin-right: -10px; }\r\n  .btn-grp *[class*=\"btn\"] {\r\n    margin: 5px 10px;\r\n    -webkit-align-items: center;\r\n       -moz-box-align: center;\r\n            align-items: center; }\r\n    .btn-grp *[class*=\"btn\"].d-flex {\r\n      padding: 8px 35px; }\r\n\r\n*[class*=\"btn\"] .btn-sm {\r\n  padding: 6px 20px; }\r\n\r\n.submit-btn {\r\n  padding: 16px 50px;\r\n  background-color: #220a81;\r\n  -webkit-box-shadow: 0px 4px 30px 15px rgba(0, 162, 255, 0.49), inset 0px 0px 12px 6px #30a8db;\r\n          box-shadow: 0px 4px 30px 15px rgba(0, 162, 255, 0.49), inset 0px 0px 12px 6px #30a8db;\r\n  position: relative;\r\n  z-index: 9;\r\n  text-transform: uppercase;\r\n  color: #ffffff;\r\n  border-radius: 999px;\r\n  -webkit-border-radius: 999px;\r\n  -moz-border-radius: 999px;\r\n  -ms-border-radius: 999px;\r\n  -o-border-radius: 999px; }\r\n  @media (max-width: 575px) {\r\n    .submit-btn {\r\n      font-size: 16px; } }\r\n\r\n/* button css end */\r\n/* form css start */\r\n.form-control {\r\n  color: #ffffff;\r\n  min-height: 50px;\r\n  border-radius: 3px;\r\n  -webkit-border-radius: 3px;\r\n  -moz-border-radius: 3px;\r\n  -ms-border-radius: 3px;\r\n  -o-border-radius: 3px; }\r\n  .form-control.style--two {\r\n    padding: 15px 30px;\r\n    -webkit-box-shadow: inset 0px 0px 5px 2px #30a8db;\r\n            box-shadow: inset 0px 0px 5px 2px #30a8db;\r\n    border: 1px solid rgba(29, 46, 129, 0.3);\r\n    background-color: rgba(38, 13, 76, 0);\r\n    border-radius: 999px;\r\n    -webkit-border-radius: 999px;\r\n    -moz-border-radius: 999px;\r\n    -ms-border-radius: 999px;\r\n    -o-border-radius: 999px;\r\n    color: #ffffff; }\r\n    .form-control.style--two:focus, .form-control.style--two:active {\r\n      -webkit-box-shadow: inset 0px 0px 10px 2px #30a8db;\r\n              box-shadow: inset 0px 0px 10px 2px #30a8db;\r\n      border-color: #30a8db !important; }\r\n  .form-control:focus {\r\n    background-color: transparent;\r\n    -webkit-box-shadow: none;\r\n            box-shadow: none;\r\n    border-color: #c0464d; }\r\n\r\nselect {\r\n  padding: 10px 20px;\r\n  width: 100%;\r\n  border: 1px solid rgba(255, 255, 255, 0.1);\r\n  cursor: pointer;\r\n  color: #c4cbf9;\r\n  background-color: transparent;\r\n  height: 50px;\r\n  border-radius: 4px;\r\n  -webkit-border-radius: 4px;\r\n  -moz-border-radius: 4px;\r\n  -ms-border-radius: 4px;\r\n  -o-border-radius: 4px; }\r\n  select option {\r\n    background-color: #02014a; }\r\n\r\ntextarea {\r\n  min-height: 120px !important;\r\n  resize: none;\r\n  width: 100%; }\r\n\r\nlabel {\r\n  color: #ffffff;\r\n  margin-bottom: 13px; }\r\n\r\ninput, textarea {\r\n  color: #ffffff; }\r\n  input::-webkit-input-placeholder, textarea::-webkit-input-placeholder {\r\n    color: #6180c0 !important; }\r\n  input::-moz-placeholder, textarea::-moz-placeholder {\r\n    color: #6180c0 !important; }\r\n  input:-ms-input-placeholder, textarea:-ms-input-placeholder {\r\n    color: #6180c0 !important; }\r\n  input:-moz-placeholder, textarea:-moz-placeholder {\r\n    color: #6180c0 !important; }\r\n  input:focus, input:active, textarea:focus, textarea:active {\r\n    border-color: #c0464d !important; }\r\n\r\ntextarea {\r\n  border-radius: 20px !important;\r\n  -webkit-border-radius: 20px !important;\r\n  -moz-border-radius: 20px !important;\r\n  -ms-border-radius: 20px !important;\r\n  -o-border-radius: 20px !important; }\r\n\r\ninput:focus,\r\ntextarea:focus,\r\n.nice-select.open {\r\n  border-color: #000033; }\r\n\r\n/* form css end */\r\n/* keyframes css start */\r\n@-webkit-keyframes rifaRounded {\r\n  0% {\r\n    -webkit-transform: translate(-50%, -50%) rotate(0deg);\r\n    transform: translate(-50%, -50%) rotate(0deg); }\r\n  100% {\r\n    -webkit-transform: translate(-50%, -50%) rotate(360deg);\r\n    transform: translate(-50%, -50%) rotate(360deg); } }\r\n@keyframes rifaRounded {\r\n  0% {\r\n    -webkit-transform: translate(-50%, -50%) rotate(0deg);\r\n    -moz-transform: translate(-50%, -50%) rotate(0deg);\r\n         transform: translate(-50%, -50%) rotate(0deg); }\r\n  100% {\r\n    -webkit-transform: translate(-50%, -50%) rotate(360deg);\r\n    -moz-transform: translate(-50%, -50%) rotate(360deg);\r\n         transform: translate(-50%, -50%) rotate(360deg); } }\r\n@-webkit-keyframes rifaPulse {\r\n  0% {\r\n    -webkit-transform: translate(-50%, -50%) scale(1);\r\n    transform: translate(-50%, -50%) scale(1); }\r\n  25% {\r\n    -webkit-transform: translate(-50%, -50%) scale(1.05);\r\n    transform: translate(-50%, -50%) scale(1.05); }\r\n  50% {\r\n    -webkit-transform: translate(-50%, -50%) scale(1.1);\r\n    transform: translate(-50%, -50%) scale(1.1); }\r\n  75% {\r\n    -webkit-transform: translate(-50%, -50%) scale(1.05);\r\n    transform: translate(-50%, -50%) scale(1.05); }\r\n  100% {\r\n    -webkit-transform: translate(-50%, -50%) scale(1);\r\n    transform: translate(-50%, -50%) scale(1); } }\r\n@keyframes rifaPulse {\r\n  0% {\r\n    -webkit-transform: translate(-50%, -50%) scale(1);\r\n    -moz-transform: translate(-50%, -50%) scale(1);\r\n         transform: translate(-50%, -50%) scale(1); }\r\n  25% {\r\n    -webkit-transform: translate(-50%, -50%) scale(1.05);\r\n    -moz-transform: translate(-50%, -50%) scale(1.05);\r\n         transform: translate(-50%, -50%) scale(1.05); }\r\n  50% {\r\n    -webkit-transform: translate(-50%, -50%) scale(1.1);\r\n    -moz-transform: translate(-50%, -50%) scale(1.1);\r\n         transform: translate(-50%, -50%) scale(1.1); }\r\n  75% {\r\n    -webkit-transform: translate(-50%, -50%) scale(1.05);\r\n    -moz-transform: translate(-50%, -50%) scale(1.05);\r\n         transform: translate(-50%, -50%) scale(1.05); }\r\n  100% {\r\n    -webkit-transform: translate(-50%, -50%) scale(1);\r\n    -moz-transform: translate(-50%, -50%) scale(1);\r\n         transform: translate(-50%, -50%) scale(1); } }\r\n@-webkit-keyframes rifaLight {\r\n  0% {\r\n    opacity: 1; }\r\n  25% {\r\n    opacity: 0.6; }\r\n  50% {\r\n    opacity: 1; }\r\n  75% {\r\n    opacity: 0.6; }\r\n  100% {\r\n    opacity: 1; } }\r\n@keyframes rifaLight {\r\n  0% {\r\n    opacity: 1; }\r\n  25% {\r\n    opacity: 0.6; }\r\n  50% {\r\n    opacity: 1; }\r\n  75% {\r\n    opacity: 0.6; }\r\n  100% {\r\n    opacity: 1; } }\r\n@-webkit-keyframes colorFlow {\r\n  0% {\r\n    background-size: 100%;\r\n    opacity: 1; }\r\n  25% {\r\n    background-size: 150%;\r\n    opacity: 0.5; }\r\n  50% {\r\n    background-size: 300%;\r\n    opacity: 0.9; }\r\n  75% {\r\n    background-size: 150%;\r\n    opacity: 0.5; }\r\n  100% {\r\n    background-size: 100%;\r\n    opacity: 1; } }\r\n@keyframes colorFlow {\r\n  0% {\r\n    background-size: 100%;\r\n    opacity: 1; }\r\n  25% {\r\n    background-size: 150%;\r\n    opacity: 0.5; }\r\n  50% {\r\n    background-size: 300%;\r\n    opacity: 0.9; }\r\n  75% {\r\n    background-size: 150%;\r\n    opacity: 0.5; }\r\n  100% {\r\n    background-size: 100%;\r\n    opacity: 1; } }\r\n/* keyframes css end */\r\n/* header start */\r\n.header {\r\n  position: fixed;\r\n  width: 100%;\r\n  left: 0;\r\n  top: 0;\r\n  z-index: 9; }\r\n  .header.menu-fixed {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    z-index: 9; }\r\n    .header.menu-fixed .navbar::before {\r\n      -webkit-clip-path: polygon(0% 0, 100% 0%, 100% 100%, 0% 100%);\r\n              clip-path: polygon(0% 0, 100% 0%, 100% 100%, 0% 100%); }\r\n    .header.menu-fixed .header__top {\r\n      display: none; }\r\n    .header.menu-fixed .header__bottom {\r\n      margin-top: 0;\r\n      -webkit-box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.1);\r\n              box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.1);\r\n      background-color: transparent; }\r\n      .header.menu-fixed .header__bottom .main-menu li a {\r\n        padding: 30px 15px 30px 0; }\r\n        @media (max-width: 1199px) {\r\n          .header.menu-fixed .header__bottom .main-menu li a {\r\n            padding: 10px 0; } }\r\n      .header.menu-fixed .header__bottom .main-menu li .sub-menu li a {\r\n        padding: 8px 20px; }\r\n  .header__bottom {\r\n    margin-top: 20px;\r\n    -webkit-transition: all 0.3s;\r\n    -moz-transition: all 0.3s;\r\n    transition: all 0.3s; }\r\n    @media (max-width: 1199px) {\r\n      .header__bottom {\r\n        margin-top: 0; } }\r\n  @media (max-width: 1199px) {\r\n    .header .site-logo img {\r\n      max-width: 150px; } }\r\n  @media (max-width: 1199px) {\r\n    .header .main-menu {\r\n      padding: 15px 0; } }\r\n  .header .main-menu li {\r\n    position: relative; }\r\n    .header .main-menu li.menu_has_children {\r\n      position: relative; }\r\n      .header .main-menu li.menu_has_children.open .sub-menu {\r\n        display: block; }\r\n      @media (max-width: 1199px) {\r\n        .header .main-menu li.menu_has_children > a {\r\n          display: block; } }\r\n      .header .main-menu li.menu_has_children > a::before {\r\n        position: absolute;\r\n        content: \"\";\r\n        font-family: \"Line Awesome Free\";\r\n        font-size: 16px;\r\n        font-weight: 900;\r\n        top: 0;\r\n        right: 0;\r\n        color: #ffffff;\r\n        -webkit-transition: all 0.3s;\r\n        -moz-transition: all 0.3s;\r\n        transition: all 0.3s;\r\n        display: none; }\r\n        @media (max-width: 1199px) {\r\n          .header .main-menu li.menu_has_children > a::before {\r\n            display: block;\r\n            top: 9px; } }\r\n      .header .main-menu li.menu_has_children:hover > a::before {\r\n        -webkit-transform: rotate(180deg);\r\n        -moz-transform: rotate(180deg);\r\n             transform: rotate(180deg);\r\n        color: #ffffff; }\r\n    .header .main-menu li a {\r\n      padding: 37px 15px 37px 0;\r\n      text-transform: uppercase;\r\n      font-size: 16px;\r\n      color: #e7e7f4;\r\n      position: relative; }\r\n      @media (max-width: 1199px) {\r\n        .header .main-menu li a {\r\n          padding: 8px 0;\r\n          display: block;\r\n          border-bottom: 1px solid rgba(255, 255, 255, 0.1); } }\r\n      .header .main-menu li a:hover, .header .main-menu li a:focus {\r\n        color: #ff0000; }\r\n    .header .main-menu li .sub-menu {\r\n      position: absolute;\r\n      width: 220px;\r\n      top: 105%;\r\n      left: -20px;\r\n      z-index: 999;\r\n      background-image: -moz-linear-gradient(89deg, #5f16a9 0%, #cf15f8 100%);\r\n      background-image: -webkit-linear-gradient(89deg, #5f16a9 0%, #cf15f8 100%);\r\n      background-image: -ms-linear-gradient(89deg, #5f16a9 0%, #cf15f8 100%);\r\n      padding: 10px 0;\r\n      -webkit-box-shadow: 0px 18px 54px -8px rgba(0, 0, 0, 0.15);\r\n      box-shadow: 0px 18px 54px -8px rgba(0, 0, 0, 0.15);\r\n      border-radius: 5px;\r\n      -webkit-border-radius: 5px;\r\n      -moz-border-radius: 5px;\r\n      -ms-border-radius: 5px;\r\n      -o-border-radius: 5px;\r\n      -webkit-transition: all 0.3s;\r\n      -moz-transition: all 0.3s;\r\n      transition: all 0.3s;\r\n      opacity: 0;\r\n      visibility: hidden; }\r\n      @media (max-width: 1199px) {\r\n        .header .main-menu li .sub-menu {\r\n          opacity: 1;\r\n          visibility: visible;\r\n          display: none;\r\n          position: static;\r\n          -webkit-transition: none;\r\n          -moz-transition: none;\r\n          transition: none;\r\n          width: 100%;\r\n          padding: 0; } }\r\n      .header .main-menu li .sub-menu li a {\r\n        padding: 8px 20px;\r\n        display: block;\r\n        color: #ffffff;\r\n        font-size: 14px; }\r\n        @media (max-width: 1199px) {\r\n          .header .main-menu li .sub-menu li a {\r\n            font-size: 16px; } }\r\n        .header .main-menu li .sub-menu li a:hover {\r\n          background-color: rgba(38, 174, 97, 0.05);\r\n          color: #ffffff;\r\n          text-decoration: underline; }\r\n      .header .main-menu li .sub-menu li + li {\r\n        margin-left: 0; }\r\n    .header .main-menu li:hover .sub-menu {\r\n      top: 100%;\r\n      opacity: 1;\r\n      visibility: visible; }\r\n  .header .main-menu li + li {\r\n    margin-left: 20px; }\r\n    @media (max-width: 1199px) {\r\n      .header .main-menu li + li {\r\n        margin-left: 0; } }\r\n  .header .nav-right {\r\n    margin-left: 30px; }\r\n    @media (max-width: 1199px) {\r\n      .header .nav-right {\r\n        margin-left: 0; } }\r\n    .header .nav-right a {\r\n      background-color: #ffffff;\r\n      border-radius: 999px;\r\n      -webkit-border-radius: 999px;\r\n      -moz-border-radius: 999px;\r\n      -ms-border-radius: 999px;\r\n      -o-border-radius: 999px;\r\n      color: #544590;\r\n      text-transform: uppercase;\r\n      font-size: 18px;\r\n      -webkit-box-shadow: 0px 10px 9px 0px rgba(26, 15, 63, 0.26);\r\n              box-shadow: 0px 10px 9px 0px rgba(26, 15, 63, 0.26);\r\n      padding: 11px 27px; }\r\n\r\n.navbar {\r\n  position: relative;\r\n  z-index: 1;\r\n  padding: 0 70px;\r\n  -webkit-filter: drop-shadow(5px 10px 10px rgba(26, 15, 63, 0.71));\r\n          filter: drop-shadow(5px 10px 10px rgba(26, 15, 63, 0.71)); }\r\n  @media (max-width: 1199px) {\r\n    .navbar {\r\n      padding: 0 30px; } }\r\n  .navbar::before {\r\n    position: absolute;\r\n    content: \"\";\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-image: -moz-linear-gradient(89deg, #5f16a9 0%, #cf15f8 100%);\r\n    background-image: -webkit-linear-gradient(89deg, #5f16a9 0%, #cf15f8 100%);\r\n    background-image: -ms-linear-gradient(89deg, #5f16a9 0%, #cf15f8 100%);\r\n    -webkit-box-shadow: 0px 12px 29px 0px rgba(26, 15, 63, 0.71);\r\n            box-shadow: 0px 12px 29px 0px rgba(26, 15, 63, 0.71);\r\n    z-index: -1;\r\n    -webkit-clip-path: polygon(6% 0, 100% 0%, 94% 100%, 0% 100%);\r\n            clip-path: polygon(6% 0, 100% 0%, 94% 100%, 0% 100%); }\r\n    @media (max-width: 1199px) {\r\n      .navbar::before {\r\n        -webkit-clip-path: polygon(0% 0, 100% 0%, 100% 100%, 0% 100%);\r\n                clip-path: polygon(0% 0, 100% 0%, 100% 100%, 0% 100%); } }\r\n\r\n@media (max-width: 1199px) {\r\n  .navbar-collapse {\r\n    padding: 0 20px 20px;\r\n    /* background-color: #070B28;  */\r\n  } }\r\n@media (max-width: 1199px) {\r\n  .navbar-collapse {\r\n    max-height: 550px;\r\n    overflow: auto; } }\r\n@media (max-width: 767px) {\r\n  .navbar-collapse {\r\n    max-height: 320px;\r\n    overflow: auto; } }\r\n\r\n.navbar-toggler {\r\n  padding: 0;\r\n  border: none; }\r\n  .navbar-toggler:focus {\r\n    outline: none; }\r\n\r\n.menu-toggle {\r\n  margin: 10px 0;\r\n  position: relative;\r\n  display: block;\r\n  width: 35px;\r\n  height: 20px;\r\n  cursor: pointer;\r\n  background: transparent;\r\n  border-top: 2px solid;\r\n  border-bottom: 2px solid;\r\n  color: #000000;\r\n  font-size: 0;\r\n  -webkit-transition: all 0.25s ease-in-out;\r\n  -moz-transition: all 0.25s ease-in-out;\r\n  transition: all 0.25s ease-in-out;\r\n  cursor: pointer; }\r\n  @media (max-width: 1199px) {\r\n    .menu-toggle {\r\n      color: #ffffff; } }\r\n\r\n.menu-toggle:before, .menu-toggle:after {\r\n  content: \"\";\r\n  display: block;\r\n  width: 100%;\r\n  height: 2px;\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  background: currentColor;\r\n  -webkit-transform: translate(-50%, -50%);\r\n  -moz-transform: translate(-50%, -50%);\r\n       transform: translate(-50%, -50%);\r\n  transition: -webkit-transform 0.25s ease-in-out;\r\n  -webkit-transition: -webkit-transform 0.25s ease-in-out;\r\n  -moz-transition: transform 0.25s ease-in-out, -moz-transform 0.25s ease-in-out;\r\n  transition: transform 0.25s ease-in-out;\r\n  transition: transform 0.25s ease-in-out, -webkit-transform 0.25s ease-in-out, -moz-transform 0.25s ease-in-out;\r\n  -moz-transition: -webkit-transform 0.25s ease-in-out;\r\n  -ms-transition: -webkit-transform 0.25s ease-in-out; }\r\n  @media (max-width: 1199px) {\r\n    .menu-toggle:before, .menu-toggle:after {\r\n      background-color: #ffffff; } }\r\n\r\nspan.is-active {\r\n  border-color: transparent; }\r\n\r\nspan.is-active:before {\r\n  -webkit-transform: translate(-50%, -50%) rotate(45deg);\r\n  -moz-transform: translate(-50%, -50%) rotate(45deg);\r\n       transform: translate(-50%, -50%) rotate(45deg); }\r\n\r\nspan.is-active:after {\r\n  -webkit-transform: translate(-50%, -50%) rotate(-45deg);\r\n  -moz-transform: translate(-50%, -50%) rotate(-45deg);\r\n       transform: translate(-50%, -50%) rotate(-45deg); }\r\n\r\nspan.menu-toggle:hover {\r\n  color: #000000; }\r\n  @media (max-width: 1199px) {\r\n    span.menu-toggle:hover {\r\n      color: #ffffff; } }\r\n\r\nspan.is-active {\r\n  border-color: transparent; }\r\n\r\nspan.is-active:before {\r\n  -webkit-transform: translate(-50%, -50%) rotate(45deg);\r\n  -moz-transform: translate(-50%, -50%) rotate(45deg);\r\n       transform: translate(-50%, -50%) rotate(45deg); }\r\n\r\nspan.is-active:after {\r\n  -webkit-transform: translate(-50%, -50%) rotate(-45deg);\r\n  -moz-transform: translate(-50%, -50%) rotate(-45deg);\r\n       transform: translate(-50%, -50%) rotate(-45deg); }\r\n\r\n/* header end */\r\n/* hero section css start */\r\n.hero {\r\n  padding-top: 245px;\r\n  padding-bottom: 300px;\r\n  position: relative; }\r\n  @media (max-width: 1199px) {\r\n    .hero {\r\n      padding-top: 200px;\r\n      padding-bottom: 190px; } }\r\n  .hero__shape {\r\n    position: absolute;\r\n    bottom: -2px;\r\n    left: 0; }\r\n    .hero__shape img {\r\n      width: 100%; }\r\n  .hero__content p {\r\n    font-size: 24px;\r\n    color: #ffffff; }\r\n    @media (max-width: 1199px) {\r\n      .hero__content p {\r\n        font-size: 18px; } }\r\n    @media (max-width: 767px) {\r\n      .hero__content p {\r\n        font-size: 16px; } }\r\n  .hero__content .cmn-btn {\r\n    margin-top: 40px; }\r\n  .hero__sub-title {\r\n    font-size: 28px;\r\n    color: #f91e68;\r\n    text-transform: uppercase;\r\n    margin-bottom: 10px;\r\n    font-weight: 700; }\r\n    @media (max-width: 1199px) {\r\n      .hero__sub-title {\r\n        font-size: 20px; } }\r\n    @media (max-width: 767px) {\r\n      .hero__sub-title {\r\n        font-size: 18px; } }\r\n    @media (max-width: 480px) {\r\n      .hero__sub-title {\r\n        font-size: 16px; } }\r\n  .hero__title {\r\n    font-size: 80px;\r\n    color: #ffffff;\r\n    text-transform: uppercase;\r\n    font-weight: 700;\r\n    line-height: 1.1; }\r\n    @media (max-width: 1199px) {\r\n      .hero__title {\r\n        font-size: 62px; } }\r\n    @media (max-width: 767px) {\r\n      .hero__title {\r\n        font-size: 48px; } }\r\n    @media (max-width: 480px) {\r\n      .hero__title {\r\n        font-size: 32px; } }\r\n  .hero [class*=\"el-\"] {\r\n    position: absolute; }\r\n    @media (max-width: 1450px) {\r\n      .hero [class*=\"el-\"] img {\r\n        width: 80%; } }\r\n    @media (max-width: 991px) {\r\n      .hero [class*=\"el-\"] img {\r\n        width: 50%; } }\r\n  .hero .el-1 {\r\n    top: 17%;\r\n    left: 42%; }\r\n  .hero .el-2 {\r\n    left: 5%;\r\n    bottom: 33%; }\r\n  .hero .el-3 {\r\n    right: 5%;\r\n    bottom: 14%; }\r\n  .hero .el-4 {\r\n    right: 19%;\r\n    bottom: 12%; }\r\n    @media (max-width: 1199px) {\r\n      .hero .el-4 img {\r\n        width: 50%; } }\r\n    @media (max-width: 991px) {\r\n      .hero .el-4 img {\r\n        width: 40%; } }\r\n  .hero .el-5 {\r\n    top: 26%;\r\n    left: 53%; }\r\n  .hero .el-6 {\r\n    top: 13%;\r\n    left: 6%; }\r\n  .hero .el-7 {\r\n    top: 3%;\r\n    right: 8%; }\r\n  .hero .el-8 {\r\n    top: 26%;\r\n    right: 16%; }\r\n  .hero .el-9 {\r\n    right: 44%;\r\n    bottom: 42%; }\r\n  .hero .el-10 {\r\n    top: 44%;\r\n    right: 35%; }\r\n  .hero .el-11 {\r\n    top: 44%;\r\n    right: 11%; }\r\n\r\n/* hero section css end */\r\n/* inner-hero css start */\r\n.inner-hero {\r\n  padding-top: 225px;\r\n  padding-bottom: 145px;\r\n  position: relative; }\r\n  @media (max-width: 1199px) {\r\n    .inner-hero {\r\n      padding-top: 150px; } }\r\n  .inner-hero .page-title {\r\n    font-size: 80px;\r\n    font-weight: 700; }\r\n    @media (max-width: 1199px) {\r\n      .inner-hero .page-title {\r\n        font-size: 56px; } }\r\n    @media (max-width: 767px) {\r\n      .inner-hero .page-title {\r\n        font-size: 48px; } }\r\n    @media (max-width: 575px) {\r\n      .inner-hero .page-title {\r\n        font-size: 36px; } }\r\n  .inner-hero .shape {\r\n    bottom: -3px;\r\n    left: 0; }\r\n  @media (max-width: 1199px) {\r\n    .inner-hero [class*=\"el\"] img {\r\n      width: 80%; } }\r\n  @media (max-width: 991px) {\r\n    .inner-hero [class*=\"el\"] img {\r\n      width: 50%; } }\r\n  .inner-hero .el-1 {\r\n    left: 13%;\r\n    bottom: 15%; }\r\n  .inner-hero .el-2 {\r\n    left: 31%;\r\n    bottom: 7%; }\r\n  .inner-hero .el-3 {\r\n    left: 47%;\r\n    bottom: 28%; }\r\n  .inner-hero .el-4 {\r\n    right: 21%;\r\n    bottom: 4%; }\r\n  .inner-hero .el-5 {\r\n    right: 12%;\r\n    bottom: 6%; }\r\n  .inner-hero .el-6 {\r\n    top: 6%;\r\n    right: 4%; }\r\n  .inner-hero.style--two {\r\n    padding-top: 300px;\r\n    padding-bottom: 300px; }\r\n    @media (max-width: 1199px) {\r\n      .inner-hero.style--two {\r\n        padding-top: 200px;\r\n        padding-bottom: 200px; } }\r\n  .inner-hero.style--three {\r\n    padding-top: 200px;\r\n    padding-bottom: 80px;\r\n    position: relative; }\r\n    @media (max-width: 1199px) {\r\n      .inner-hero.style--three {\r\n        padding-top: 130px; } }\r\n    .inner-hero.style--three .clip-path-img {\r\n      position: absolute;\r\n      top: 0;\r\n      left: 0;\r\n      width: 100%;\r\n      height: 100%;\r\n      -webkit-clip-path: ellipse(90% 75% at 50% 75%);\r\n      clip-path: ellipse(53% 75% at 50% 75%);\r\n      -webkit-transform: rotate(180deg);\r\n      -moz-transform: rotate(180deg);\r\n           transform: rotate(180deg); }\r\n      @media (max-width: 575px) {\r\n        .inner-hero.style--three .clip-path-img {\r\n          -webkit-clip-path: ellipse(100% 75% at 50% 75%);\r\n          clip-path: ellipse(100% 75% at 50% 75%); } }\r\n      .inner-hero.style--three .clip-path-img::before {\r\n        position: absolute;\r\n        content: \"\";\r\n        top: 0;\r\n        left: 0;\r\n        width: 100%;\r\n        height: 100%;\r\n        opacity: 0.65;\r\n        z-index: 1;\r\n        background: #bdc3c7;\r\n        background: -webkit-linear-gradient(to top, #000033, rgba(0, 0, 0, 0.05));\r\n        background: -webkit-gradient(linear, left bottom, left top, from(#000033), to(rgba(0, 0, 0, 0.05)));\r\n        background: -webkit-linear-gradient(bottom, #000033, rgba(0, 0, 0, 0.05));\r\n        background: -moz-linear-gradient(bottom, #000033, rgba(0, 0, 0, 0.05));\r\n        background: linear-gradient(to top, #000033, rgba(0, 0, 0, 0.05)); }\r\n      .inner-hero.style--three .clip-path-img img {\r\n        width: 100%;\r\n        height: 100%;\r\n        object-fit: cover;\r\n        -o-object-fit: cover;\r\n        object-position: center;\r\n        -o-object-position: center;\r\n        -webkit-transform: rotate(-180deg);\r\n        -moz-transform: rotate(-180deg);\r\n             transform: rotate(-180deg); }\r\n\r\n.single-game-hero .game-name {\r\n  font-size: 80px;\r\n  text-transform: uppercase;\r\n  text-shadow: 0px 16px 9px rgba(29, 28, 33, 0.34);\r\n  margin-bottom: 15px; }\r\n  @media (max-width: 1199px) {\r\n    .single-game-hero .game-name {\r\n      font-size: 56px; } }\r\n  @media (max-width: 767px) {\r\n    .single-game-hero .game-name {\r\n      font-size: 42px; } }\r\n  @media (max-width: 575px) {\r\n    .single-game-hero .game-name {\r\n      font-size: 36px; } }\r\n@media (max-width: 1199px) {\r\n  .single-game-hero .game-img {\r\n    width: 35%; } }\r\n@media (max-width: 575px) {\r\n  .single-game-hero .game-img {\r\n    width: 50%; } }\r\n\r\n.page-list {\r\n  display: -webkit-flex;\r\n  display: -moz-box;\r\n  display: flex;\r\n  -webkit-flex-wrap: wrap;\r\n          flex-wrap: wrap;\r\n  padding: -3px -8px; }\r\n  .page-list li {\r\n    padding: 3px 8px;\r\n    text-transform: uppercase;\r\n    color: #ffffff; }\r\n    .page-list li:last-child::after {\r\n      display: none; }\r\n    .page-list li::after {\r\n      content: \"\";\r\n      font-family: \"Line Awesome Free\";\r\n      font-weight: 900;\r\n      margin-left: 15px; }\r\n    .page-list li a {\r\n      color: #ffffff; }\r\n\r\n/* inner-hero css end */\r\n/* about us section css start */\r\n.video-btn {\r\n  width: 37px;\r\n  height: 37px;\r\n  color: #ffffff;\r\n  text-align: center;\r\n  line-height: 40px;\r\n  background-image: -moz-linear-gradient(0deg, #e2906e 0%, #e83a99 100%);\r\n  background-image: -webkit-linear-gradient(0deg, #e2906e 0%, #e83a99 100%);\r\n  background-image: -ms-linear-gradient(0deg, #e2906e 0%, #e83a99 100%);\r\n  border-radius: 50%;\r\n  -webkit-border-radius: 50%;\r\n  -moz-border-radius: 50%;\r\n  -ms-border-radius: 50%;\r\n  -o-border-radius: 50%;\r\n  position: relative;\r\n  z-index: 1; }\r\n  .video-btn::before {\r\n    position: absolute;\r\n    content: \"\";\r\n    top: 50%;\r\n    left: 50%;\r\n    width: 57px;\r\n    height: 54px;\r\n    background-image: -moz-linear-gradient(0deg, #e2906e 0%, #e83a99 100%);\r\n    background-image: -webkit-linear-gradient(0deg, #e2906e 0%, #e83a99 100%);\r\n    background-image: -ms-linear-gradient(0deg, #e2906e 0%, #e83a99 100%);\r\n    opacity: 0.6;\r\n    -webkit-transform: translate(-50%, -50%);\r\n    -moz-transform: translate(-50%, -50%);\r\n         transform: translate(-50%, -50%);\r\n    z-index: -1;\r\n    border-radius: 27% 33% 15% 48%/21% 47% 35% 51%;\r\n    -webkit-border-radius: 27% 33% 15% 48%/21% 47% 35% 51%;\r\n    -moz-border-radius: 27% 33% 15% 48%/21% 47% 35% 51%;\r\n    -ms-border-radius: 27% 33% 15% 48%/21% 47% 35% 51%;\r\n    -o-border-radius: 27% 33% 15% 48%/21% 47% 35% 51%;\r\n    -webkit-animation: flowRubber 5s infinite linear;\r\n            animation: flowRubber 5s infinite linear;\r\n    -webkit-animation-delay: 0.5s;\r\n            animation-delay: 0.5s; }\r\n  .video-btn::after {\r\n    position: absolute;\r\n    content: \"\";\r\n    top: 50%;\r\n    left: 50%;\r\n    width: 73px;\r\n    height: 74px;\r\n    background-image: -moz-linear-gradient(0deg, #e2906e 0%, #e83a99 100%);\r\n    background-image: -webkit-linear-gradient(0deg, #e2906e 0%, #e83a99 100%);\r\n    background-image: -ms-linear-gradient(0deg, #e2906e 0%, #e83a99 100%);\r\n    opacity: 0.4;\r\n    -webkit-transform: translate(-50%, -50%);\r\n    -moz-transform: translate(-50%, -50%);\r\n         transform: translate(-50%, -50%);\r\n    z-index: -1;\r\n    border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -webkit-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -moz-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -ms-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -o-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -webkit-animation: flowRubber 5s infinite linear;\r\n            animation: flowRubber 5s infinite linear; }\r\n\r\n@-webkit-keyframes flowRubber {\r\n  0% {\r\n    border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -webkit-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -moz-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -ms-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -o-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%; }\r\n  25% {\r\n    border-radius: 84% 43% 59% 45%/62% 38% 67% 49%;\r\n    -webkit-border-radius: 84% 43% 59% 45%/62% 38% 67% 49%;\r\n    -moz-border-radius: 84% 43% 59% 45%/62% 38% 67% 49%;\r\n    -ms-border-radius: 84% 43% 59% 45%/62% 38% 67% 49%;\r\n    -o-border-radius: 84% 43% 59% 45%/62% 38% 67% 49%; }\r\n  50% {\r\n    border-radius: 69% 70% 59% 86%/80% 77% 67% 49%;\r\n    -webkit-border-radius: 69% 70% 59% 86%/80% 77% 67% 49%;\r\n    -moz-border-radius: 69% 70% 59% 86%/80% 77% 67% 49%;\r\n    -ms-border-radius: 69% 70% 59% 86%/80% 77% 67% 49%;\r\n    -o-border-radius: 69% 70% 59% 86%/80% 77% 67% 49%; }\r\n  75% {\r\n    border-radius: 35% 70% 24% 94%/64% 61% 67% 49%;\r\n    -webkit-border-radius: 35% 70% 24% 94%/64% 61% 67% 49%;\r\n    -moz-border-radius: 35% 70% 24% 94%/64% 61% 67% 49%;\r\n    -ms-border-radius: 35% 70% 24% 94%/64% 61% 67% 49%;\r\n    -o-border-radius: 35% 70% 24% 94%/64% 61% 67% 49%; }\r\n  100% {\r\n    border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -webkit-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -moz-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -ms-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -o-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%; } }\r\n@keyframes flowRubber {\r\n  0% {\r\n    border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -webkit-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -moz-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -ms-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -o-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%; }\r\n  25% {\r\n    border-radius: 84% 43% 59% 45%/62% 38% 67% 49%;\r\n    -webkit-border-radius: 84% 43% 59% 45%/62% 38% 67% 49%;\r\n    -moz-border-radius: 84% 43% 59% 45%/62% 38% 67% 49%;\r\n    -ms-border-radius: 84% 43% 59% 45%/62% 38% 67% 49%;\r\n    -o-border-radius: 84% 43% 59% 45%/62% 38% 67% 49%; }\r\n  50% {\r\n    border-radius: 69% 70% 59% 86%/80% 77% 67% 49%;\r\n    -webkit-border-radius: 69% 70% 59% 86%/80% 77% 67% 49%;\r\n    -moz-border-radius: 69% 70% 59% 86%/80% 77% 67% 49%;\r\n    -ms-border-radius: 69% 70% 59% 86%/80% 77% 67% 49%;\r\n    -o-border-radius: 69% 70% 59% 86%/80% 77% 67% 49%; }\r\n  75% {\r\n    border-radius: 35% 70% 24% 94%/64% 61% 67% 49%;\r\n    -webkit-border-radius: 35% 70% 24% 94%/64% 61% 67% 49%;\r\n    -moz-border-radius: 35% 70% 24% 94%/64% 61% 67% 49%;\r\n    -ms-border-radius: 35% 70% 24% 94%/64% 61% 67% 49%;\r\n    -o-border-radius: 35% 70% 24% 94%/64% 61% 67% 49%; }\r\n  100% {\r\n    border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -webkit-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -moz-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -ms-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -o-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%; } }\r\n/* about us section css end */\r\n/* game section css start */\r\n[class*=\"game-el\"] {\r\n  position: absolute; }\r\n\r\n.game-el-1 {\r\n  top: 12%;\r\n  left: 0; }\r\n\r\n.game-el-2 {\r\n  left: -40px;\r\n  bottom: 15%; }\r\n\r\n.game-el-3 {\r\n  top: 0;\r\n  right: 0; }\r\n\r\n.game-el-4 {\r\n  bottom: 0;\r\n  right: 0; }\r\n\r\n.game-card__thumb {\r\n  border: 5px solid #620edf;\r\n  -webkit-box-shadow: 0px 10px 199px 0px rgba(26, 15, 63, 0.5);\r\n          box-shadow: 0px 10px 199px 0px rgba(26, 15, 63, 0.5);\r\n  border-radius: 10px;\r\n  -webkit-border-radius: 10px;\r\n  -moz-border-radius: 10px;\r\n  -ms-border-radius: 10px;\r\n  -o-border-radius: 10px;\r\n  overflow: hidden; }\r\n  .game-card__thumb img {\r\n    width: 100%; }\r\n.game-card__content {\r\n  padding: 20px;\r\n  background-color: #5e72eb;\r\n  border-radius: 10px;\r\n  -webkit-border-radius: 10px;\r\n  -moz-border-radius: 10px;\r\n  -ms-border-radius: 10px;\r\n  -o-border-radius: 10px;\r\n  display: -webkit-flex;\r\n  display: -moz-box;\r\n  display: flex;\r\n  -webkit-flex-wrap: wrap;\r\n          flex-wrap: wrap;\r\n  -webkit-justify-content: space-between;\r\n     -moz-box-pack: justify;\r\n          justify-content: space-between;\r\n  margin: -50px 15px 0 15px;\r\n  position: relative; }\r\n  @media (max-width: 575px) {\r\n    .game-card__content {\r\n      -webkit-justify-content: center;\r\n         -moz-box-pack: center;\r\n              justify-content: center; } }\r\n  .game-card__content p, .game-card__content span {\r\n    color: #dee5fc; }\r\n.game-card__details {\r\n  width: 65%; }\r\n  @media (max-width: 575px) {\r\n    .game-card__details {\r\n      width: 100%; } }\r\n.game-card__info {\r\n  display: -webkit-flex;\r\n  display: -moz-box;\r\n  display: flex;\r\n  -webkit-flex-wrap: wrap;\r\n          flex-wrap: wrap; }\r\n  .game-card__info .thumb {\r\n    width: 80px;\r\n    height: 80px;\r\n    -webkit-box-shadow: 0px 12px 13px 0px rgba(26, 15, 63, 0.46);\r\n            box-shadow: 0px 12px 13px 0px rgba(26, 15, 63, 0.46);\r\n    border-radius: 15px;\r\n    -webkit-border-radius: 15px;\r\n    -moz-border-radius: 15px;\r\n    -ms-border-radius: 15px;\r\n    -o-border-radius: 15px;\r\n    overflow: hidden; }\r\n    .game-card__info .thumb img {\r\n      height: 80px;\r\n      object-fit: cover;\r\n      -o-object-fit: cover;\r\n      object-position: center;\r\n      -o-object-position: center; }\r\n  .game-card__info .content {\r\n    width: -webkit-calc(100% - 80px);\r\n    width: -moz-calc(100% - 80px);\r\n    width: calc(100% - 80px);\r\n    padding-left: 30px; }\r\n    @media (max-width: 380px) {\r\n      .game-card__info .content {\r\n        width: 100%;\r\n        padding-left: 0;\r\n        margin-top: 20px; } }\r\n    .game-card__info .content p a {\r\n      color: #ffa200; }\r\n.game-card__title {\r\n  text-transform: uppercase;\r\n  margin-bottom: 8px; }\r\n  @media (max-width: 1199px) {\r\n    .game-card__title {\r\n      font-size: 20px; } }\r\n.game-card__ratings {\r\n  margin-top: 8px; }\r\n  @media (max-width: 575px) {\r\n    .game-card__ratings {\r\n      margin-left: 110px; } }\r\n  @media (max-width: 575px) {\r\n    .game-card__ratings {\r\n      margin-left: 0; } }\r\n  .game-card__ratings i {\r\n    font-size: 12px;\r\n    color: #ffa200; }\r\n  .game-card__ratings span {\r\n    color: #ffffff; }\r\n.game-card__action {\r\n  width: 30%; }\r\n  @media (max-width: 575px) {\r\n    .game-card__action {\r\n      width: 100%;\r\n      text-align: center;\r\n      margin-top: 20px; } }\r\n  @media (max-width: 575px) {\r\n    .game-card__action {\r\n      text-align: left; } }\r\n  @media (max-width: 1199px) {\r\n    .game-card__action > p {\r\n      font-size: 14px; } }\r\n.game-card.style--two .game-card__content {\r\n  padding: 40px 30px;\r\n  margin: 0;\r\n  width: 50%;\r\n  margin-left: auto;\r\n  margin-bottom: -120px; }\r\n  @media (max-width: 991px) {\r\n    .game-card.style--two .game-card__content {\r\n      width: 100%;\r\n      margin-bottom: 0; } }\r\n.game-card.style--two .game-card__thumb {\r\n  width: 58%;\r\n  margin-left: 90px; }\r\n  @media (max-width: 767px) {\r\n    .game-card.style--two .game-card__thumb {\r\n      margin: 0 auto;\r\n      width: 75%; } }\r\n  @media (max-width: 440px) {\r\n    .game-card.style--two .game-card__thumb {\r\n      width: 100%; } }\r\n.game-card.style--two .game-card__details {\r\n  width: 100%; }\r\n  .game-card.style--two .game-card__details .content a {\r\n    color: #ffa200; }\r\n  .game-card.style--two .game-card__details .content .game-card__title a {\r\n    color: #ffffff; }\r\n    .game-card.style--two .game-card__details .content .game-card__title a:hover {\r\n      color: #ff0000; }\r\n.game-card.style--two .game-card__ratings {\r\n  display: -webkit-flex;\r\n  display: -moz-box;\r\n  display: flex;\r\n  -webkit-align-items: center;\r\n     -moz-box-align: center;\r\n          align-items: center;\r\n  margin-top: 18px; }\r\n  .game-card.style--two .game-card__ratings i {\r\n    font-size: 10px; }\r\n  .game-card.style--two .game-card__ratings span {\r\n    font-size: 12px; }\r\n.game-card.style--two .game-card__footer {\r\n  display: -webkit-flex;\r\n  display: -moz-box;\r\n  display: flex;\r\n  -webkit-flex-wrap: wrap;\r\n          flex-wrap: wrap;\r\n  -webkit-justify-content: space-between;\r\n     -moz-box-pack: justify;\r\n          justify-content: space-between;\r\n  -webkit-align-items: flex-end;\r\n     -moz-box-align: end;\r\n          align-items: flex-end;\r\n  margin-top: -65px; }\r\n  @media (max-width: 767px) {\r\n    .game-card.style--two .game-card__footer {\r\n      -webkit-justify-content: center;\r\n         -moz-box-pack: center;\r\n              justify-content: center;\r\n      margin-top: -30px; } }\r\n  .game-card.style--two .game-card__footer .left {\r\n    display: -webkit-flex;\r\n    display: -moz-box;\r\n    display: flex;\r\n    -webkit-flex-wrap: wrap;\r\n            flex-wrap: wrap;\r\n    -webkit-justify-content: space-between;\r\n       -moz-box-pack: justify;\r\n            justify-content: space-between;\r\n    width: 40%; }\r\n    @media (max-width: 767px) {\r\n      .game-card.style--two .game-card__footer .left {\r\n        width: 50%; } }\r\n    @media (max-width: 575px) {\r\n      .game-card.style--two .game-card__footer .left {\r\n        width: 75%; } }\r\n    .game-card.style--two .game-card__footer .left .thumb {\r\n      width: -webkit-calc(100% / 2 - 15px);\r\n      width: -moz-calc(100% / 2 - 15px);\r\n      width: calc(100% / 2 - 15px);\r\n      border-radius: 10px;\r\n      -webkit-border-radius: 10px;\r\n      -moz-border-radius: 10px;\r\n      -ms-border-radius: 10px;\r\n      -o-border-radius: 10px;\r\n      overflow: hidden; }\r\n  .game-card.style--two .game-card__footer .right {\r\n    width: 40%;\r\n    display: -webkit-flex;\r\n    display: -moz-box;\r\n    display: flex;\r\n    -webkit-flex-wrap: wrap;\r\n            flex-wrap: wrap;\r\n    -webkit-align-items: center;\r\n       -moz-box-align: center;\r\n            align-items: center; }\r\n    @media (max-width: 767px) {\r\n      .game-card.style--two .game-card__footer .right {\r\n        width: 100%;\r\n        margin-top: 30px; } }\r\n    .game-card.style--two .game-card__footer .right .caption {\r\n      font-size: 14px;\r\n      color: #ffffff;\r\n      width: 25%;\r\n      border-right: 1px solid #353589; }\r\n      @media (max-width: 440px) {\r\n        .game-card.style--two .game-card__footer .right .caption {\r\n          width: 100%;\r\n          border: none;\r\n          text-align: center; } }\r\n    .game-card.style--two .game-card__footer .right .apps-btn {\r\n      width: 75%;\r\n      text-align: right; }\r\n      @media (max-width: 440px) {\r\n        .game-card.style--two .game-card__footer .right .apps-btn {\r\n          width: 100%;\r\n          text-align: center;\r\n          margin-top: 15px; } }\r\n      .game-card.style--two .game-card__footer .right .apps-btn a + a {\r\n        margin-left: 20px; }\r\n\r\n.single-game + .single-game {\r\n  margin-top: 50px; }\r\n\r\n.single-game:nth-child(even) .game-card.style--two .game-card__content {\r\n  margin-right: auto;\r\n  margin-left: 0; }\r\n.single-game:nth-child(even) .game-card.style--two .game-card__thumb {\r\n  margin-left: auto;\r\n  margin-right: 90px; }\r\n  @media (max-width: 767px) {\r\n    .single-game:nth-child(even) .game-card.style--two .game-card__thumb {\r\n      margin: 0 auto; } }\r\n.single-game:nth-child(even) .game-card.style--two .game-card__footer .left {\r\n  -webkit-order: 2;\r\n     -moz-box-ordinal-group: 3;\r\n          order: 2; }\r\n  @media (max-width: 767px) {\r\n    .single-game:nth-child(even) .game-card.style--two .game-card__footer .left {\r\n      -webkit-order: -1;\r\n         -moz-box-ordinal-group: 0;\r\n              order: -1; } }\r\n.single-game:nth-child(even) .game-card.style--two .game-card__footer .right {\r\n  -webkit-order: 1;\r\n     -moz-box-ordinal-group: 2;\r\n          order: 1; }\r\n\r\n.games-search-wrapper {\r\n  padding: 30px;\r\n  background-color: #311a83;\r\n  border-radius: 30px;\r\n  -webkit-border-radius: 30px;\r\n  -moz-border-radius: 30px;\r\n  -ms-border-radius: 30px;\r\n  -o-border-radius: 30px;\r\n  display: -webkit-flex;\r\n  display: -moz-box;\r\n  display: flex;\r\n  -webkit-flex-wrap: wrap;\r\n          flex-wrap: wrap;\r\n  -webkit-justify-content: space-between;\r\n     -moz-box-pack: justify;\r\n          justify-content: space-between;\r\n  -webkit-align-items: center;\r\n     -moz-box-align: center;\r\n          align-items: center; }\r\n  @media (max-width: 991px) {\r\n    .games-search-wrapper {\r\n      -webkit-align-items: flex-end;\r\n         -moz-box-align: end;\r\n              align-items: flex-end; } }\r\n  .games-search-wrapper .left {\r\n    width: 60%; }\r\n    @media (max-width: 1199px) {\r\n      .games-search-wrapper .left {\r\n        width: 70%; } }\r\n    @media (max-width: 767px) {\r\n      .games-search-wrapper .left {\r\n        width: 100%; } }\r\n  .games-search-wrapper .right {\r\n    width: 28%; }\r\n    @media (max-width: 767px) {\r\n      .games-search-wrapper .right {\r\n        width: 100%;\r\n        margin-top: 20px; } }\r\n\r\n.games-filter-from .nice-select {\r\n  padding: 0px 30px;\r\n  -webkit-box-shadow: inset 0px 0px 8px 4px #30a8db;\r\n          box-shadow: inset 0px 0px 8px 4px #30a8db;\r\n  border: 1px solid rgba(29, 46, 129, 0.3);\r\n  background-color: rgba(38, 13, 76, 0);\r\n  border-radius: 999px;\r\n  -webkit-border-radius: 999px;\r\n  -moz-border-radius: 999px;\r\n  -ms-border-radius: 999px;\r\n  -o-border-radius: 999px; }\r\n  .games-filter-from .nice-select::after {\r\n    width: 10px;\r\n    height: 10px;\r\n    margin-top: -7px;\r\n    right: 30px; }\r\n  .games-filter-from .nice-select .list {\r\n    background-color: #311a83; }\r\n    .games-filter-from .nice-select .list li.selected, .games-filter-from .nice-select .list li:hover {\r\n      background-color: #211258; }\r\n\r\n.games-search-from {\r\n  position: relative; }\r\n  .games-search-from button {\r\n    position: absolute;\r\n    top: 5px;\r\n    right: 10px;\r\n    background-color: transparent;\r\n    color: #ffffff;\r\n    font-size: 30px;\r\n    -webkit-transform: rotateY(180deg);\r\n    -moz-transform: rotateY(180deg);\r\n         transform: rotateY(180deg); }\r\n\r\n/* game section css end */\r\n/* game features section css start */\r\n.feature-card {\r\n  padding: 30px 30px 60px 30px;\r\n  text-align: center;\r\n  background-size: contain;\r\n  background-repeat: no-repeat; }\r\n  .feature-card:hover .feature-card__icon {\r\n    -webkit-animation: zoomIn 0.5s linear;\r\n            animation: zoomIn 0.5s linear; }\r\n  .feature-card__icon {\r\n    margin-bottom: 10px; }\r\n\r\n/* game features section css end */\r\n/* single game css start */\r\n.single-game-slider .slick-list {\r\n  margin: -15px; }\r\n.single-game-slider .single-slide {\r\n  border-radius: 20px;\r\n  -webkit-border-radius: 20px;\r\n  -moz-border-radius: 20px;\r\n  -ms-border-radius: 20px;\r\n  -o-border-radius: 20px;\r\n  overflow: hidden;\r\n  margin: 15px;\r\n  -webkit-box-shadow: 0px 16px 158px 0px rgba(29, 28, 33, 0.004);\r\n          box-shadow: 0px 16px 158px 0px rgba(29, 28, 33, 0.004); }\r\n  .single-game-slider .single-slide img {\r\n    width: 100%; }\r\n.single-game-slider .slick-arrow {\r\n  width: 40px;\r\n  height: 40px;\r\n  background-color: #7a5deb;\r\n  -webkit-box-shadow: 0px 5px 20px 0px rgba(180, 164, 245, 0.5);\r\n          box-shadow: 0px 5px 20px 0px rgba(180, 164, 245, 0.5);\r\n  color: #ffffff;\r\n  display: -webkit-flex;\r\n  display: -moz-box;\r\n  display: flex;\r\n  -webkit-flex-wrap: wrap;\r\n          flex-wrap: wrap;\r\n  -webkit-justify-content: center;\r\n     -moz-box-pack: center;\r\n          justify-content: center;\r\n  -webkit-align-items: center;\r\n     -moz-box-align: center;\r\n          align-items: center;\r\n  border-radius: 5px;\r\n  -webkit-border-radius: 5px;\r\n  -moz-border-radius: 5px;\r\n  -ms-border-radius: 5px;\r\n  -o-border-radius: 5px;\r\n  position: absolute;\r\n  top: 50%;\r\n  z-index: 1;\r\n  margin-top: -20px;\r\n  cursor: pointer; }\r\n  .single-game-slider .slick-arrow.prev {\r\n    left: -15px; }\r\n  .single-game-slider .slick-arrow.next {\r\n    right: -15px; }\r\n\r\n/* single game css end */\r\n/* game info css start */\r\n.game-compatible {\r\n  padding: 15px 30px;\r\n  background-color: rgba(5, 5, 67, 0);\r\n  border: 1px solid rgba(98, 14, 223, 0.2);\r\n  display: -webkit-flex;\r\n  display: -moz-box;\r\n  display: flex;\r\n  -webkit-flex-wrap: wrap;\r\n          flex-wrap: wrap;\r\n  border-radius: 5px;\r\n  -webkit-border-radius: 5px;\r\n  -moz-border-radius: 5px;\r\n  -ms-border-radius: 5px;\r\n  -o-border-radius: 5px;\r\n  -webkit-justify-content: space-between;\r\n     -moz-box-pack: justify;\r\n          justify-content: space-between; }\r\n  .game-compatible .single {\r\n    display: -webkit-flex;\r\n    display: -moz-box;\r\n    display: flex;\r\n    -webkit-flex-wrap: wrap;\r\n            flex-wrap: wrap;\r\n    -webkit-align-items: center;\r\n       -moz-box-align: center;\r\n            align-items: center; }\r\n    .game-compatible .single i {\r\n      color: #4f4f98;\r\n      font-size: 24px;\r\n      line-height: 1; }\r\n    .game-compatible .single .caption {\r\n      color: #ffffff;\r\n      font-size: 18px;\r\n      padding-left: 10px;\r\n      line-height: 1; }\r\n\r\n.game-language {\r\n  display: -webkit-flex;\r\n  display: -moz-box;\r\n  display: flex;\r\n  -webkit-flex-wrap: wrap;\r\n          flex-wrap: wrap;\r\n  margin: -5px -20px; }\r\n  .game-language .single {\r\n    display: -webkit-flex;\r\n    display: -moz-box;\r\n    display: flex;\r\n    -webkit-flex-wrap: wrap;\r\n            flex-wrap: wrap;\r\n    -webkit-align-items: center;\r\n       -moz-box-align: center;\r\n            align-items: center;\r\n    margin: 5px 20px; }\r\n    .game-language .single span {\r\n      padding-left: 10px; }\r\n\r\n/* game info css end */\r\n/* trailer section css start */\r\n.trailer_bg {\r\n  width: 100%;\r\n  height: 390px;\r\n  /* background-image: url('./assets/images/el-1.png'); */\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  background-position: center center;\r\n  padding-top: 40px; }\r\n  .trailer_bg .trailer_head {\r\n    max-width: 445px;\r\n    height: 173px;\r\n    margin: auto;\r\n    display: -webkit-flex;\r\n    display: -moz-box;\r\n    display: flex;\r\n    -webkit-align-items: center;\r\n       -moz-box-align: center;\r\n            align-items: center;\r\n    -webkit-justify-content: center;\r\n       -moz-box-pack: center;\r\n            justify-content: center;\r\n    /* background-image: url('./assets/images/el-1.png'); */\r\n    background-repeat: no-repeat;\r\n    background-size: contain;\r\n    background-position: center; }\r\n    .trailer_bg .trailer_head h1 {\r\n      font-family: \"Josefin Sans\", sans-serif;\r\n      font-size: 60px;\r\n      font-weight: 600;\r\n      line-height: 1.3;\r\n      color: #ffffff;\r\n      margin: 0px; }\r\n\r\n.trailer_container {\r\n  position: relative;\r\n  top: -100px;\r\n  left: 0px;\r\n  right: 0px;\r\n  margin-bottom: 90px; }\r\n  .trailer_container .trailer_items {\r\n    display: none; }\r\n    .trailer_container .trailer_items .trailer_thumbnail {\r\n      max-width: 1110px;\r\n      height: 498px;\r\n      position: relative; }\r\n      .trailer_container .trailer_items .trailer_thumbnail img {\r\n        width: 100%;\r\n        height: 498px;\r\n        border-radius: 30px;\r\n        border: none; }\r\n      .trailer_container .trailer_items .trailer_thumbnail .play_button {\r\n        text-decoration: none;\r\n        display: inline-block;\r\n        width: 155px;\r\n        height: 155px;\r\n        position: absolute;\r\n        top: 50%;\r\n        left: 50%;\r\n        -webkit-transform: translate(-50%, -50%);\r\n           -moz-transform: translate(-50%, -50%);\r\n                transform: translate(-50%, -50%);\r\n        border: 4px solid #ffffff;\r\n        display: -webkit-flex;\r\n        display: -moz-box;\r\n        display: flex;\r\n        -webkit-align-items: center;\r\n           -moz-box-align: center;\r\n                align-items: center;\r\n        -webkit-justify-content: center;\r\n           -moz-box-pack: center;\r\n                justify-content: center;\r\n        border-radius: 50%; }\r\n        .trailer_container .trailer_items .trailer_thumbnail .play_button i {\r\n          font-size: 42px;\r\n          color: #ffffff; }\r\n        .trailer_container .trailer_items .trailer_thumbnail .play_button:hover {\r\n          text-decoration: none;\r\n          color: #ffffff; }\r\n    .trailer_container .trailer_items .trailer_video {\r\n      max-width: 1110px;\r\n      height: 498px;\r\n      display: none; }\r\n      .trailer_container .trailer_items .trailer_video iframe {\r\n        width: 100%;\r\n        height: 100%;\r\n        border-radius: 30px;\r\n        border: none;\r\n        outline: none; }\r\n  .trailer_container .trailer_details {\r\n    padding: 30px;\r\n    background-image: -moz-linear-gradient(89deg, #5f16a9 0%, #cf15f8 100%);\r\n    background-image: -webkit-linear-gradient(89deg, #5f16a9 0%, #cf15f8 100%);\r\n    background-image: -webkit-linear-gradient(1deg, #5f16a9 0%, #cf15f8 100%);\r\n    background-image: -moz-linear-gradient(1deg, #5f16a9 0%, #cf15f8 100%);\r\n    background-image: linear-gradient(89deg, #5f16a9 0%, #cf15f8 100%);\r\n    -webkit-box-shadow: 0px 12px 43px 0px #301d75;\r\n            box-shadow: 0px 12px 43px 0px #301d75;\r\n    border-radius: 20px;\r\n    text-align: center;\r\n    max-width: 300px;\r\n    position: absolute;\r\n    bottom: -130px;\r\n    right: 130px; }\r\n    .trailer_container .trailer_details .game_content {\r\n      display: none; }\r\n    .trailer_container .trailer_details .active {\r\n      display: block; }\r\n    .trailer_container .trailer_details h4 {\r\n      font-family: \"Josefin Sans\", sans-serif;\r\n      font-size: 36px;\r\n      font-weight: 700;\r\n      text-transform: capitalaize;\r\n      color: #ffffff;\r\n      text-align: center; }\r\n    .trailer_container .trailer_details a {\r\n      text-decoration: underline;\r\n      display: inline-block;\r\n      font-family: \"Josefin Sans\", sans-serif;\r\n      font-size: 18px;\r\n      font-weight: 400;\r\n      line-height: 1.5;\r\n      color: #ffffff;\r\n      margin-top: 16px; }\r\n    .trailer_container .trailer_details .prev {\r\n      position: absolute;\r\n      bottom: 30px;\r\n      left: 28px;\r\n      text-decoration: none;\r\n      display: inline-block;\r\n      font-family: \"Josefin Sans\", sans-serif;\r\n      font-size: 18px;\r\n      font-weight: 400;\r\n      line-height: 1.5;\r\n      color: #f91e68;\r\n      cursor: pointer; }\r\n      .trailer_container .trailer_details .prev:hover {\r\n        text-decoration: none;\r\n        color: #f91e68; }\r\n    .trailer_container .trailer_details .next {\r\n      position: absolute;\r\n      bottom: 30px;\r\n      right: 28px;\r\n      text-decoration: none;\r\n      display: inline-block;\r\n      font-family: \"Josefin Sans\", sans-serif;\r\n      font-size: 18px;\r\n      font-weight: 400;\r\n      line-height: 1.5;\r\n      color: #f91e68;\r\n      cursor: pointer; }\r\n      .trailer_container .trailer_details .next:hover {\r\n        text-decoration: none;\r\n        color: #f91e68; }\r\n\r\n@media (max-width: 992px) {\r\n  .trailer_container {\r\n    position: relative;\r\n    left: 0px;\r\n    right: 0px; }\r\n    .trailer_container .trailer_items .trailer_thumbnail {\r\n      width: 100%;\r\n      height: 400px; }\r\n      .trailer_container .trailer_items .trailer_thumbnail .play_button {\r\n        width: 100px;\r\n        height: 100px; }\r\n        .trailer_container .trailer_items .trailer_thumbnail .play_button i {\r\n          font-size: 30px; }\r\n      .trailer_container .trailer_items .trailer_thumbnail img {\r\n        width: 100%;\r\n        height: 400px; }\r\n    .trailer_container .trailer_items .trailer_video {\r\n      width: 100%;\r\n      height: 400px; }\r\n      .trailer_container .trailer_items .trailer_video iframe {\r\n        width: 100%;\r\n        height: 400px; } }\r\n@media (max-width: 768px) {\r\n  .trailer_bg {\r\n    width: 100%;\r\n    height: 300px; }\r\n    .trailer_bg .trailer_head h1 {\r\n      font-size: 48px; }\r\n\r\n  .trailer_container {\r\n    position: relative;\r\n    top: -80px;\r\n    left: 0px;\r\n    right: 0px; }\r\n    .trailer_container .trailer_items .trailer_thumbnail {\r\n      width: 100%;\r\n      height: 300px; }\r\n      .trailer_container .trailer_items .trailer_thumbnail .play_button {\r\n        width: 70px;\r\n        height: 70px; }\r\n        .trailer_container .trailer_items .trailer_thumbnail .play_button i {\r\n          font-size: 18px; }\r\n      .trailer_container .trailer_items .trailer_thumbnail img {\r\n        width: 100%;\r\n        height: 300px;\r\n        border-radius: 8px; }\r\n    .trailer_container .trailer_items .trailer_video {\r\n      width: 100%;\r\n      height: 300px; }\r\n      .trailer_container .trailer_items .trailer_video iframe {\r\n        width: 100%;\r\n        height: 300px;\r\n        border-radius: 8px; }\r\n    .trailer_container .trailer_details {\r\n      position: absolute;\r\n      right: 50px; }\r\n      .trailer_container .trailer_details h4 {\r\n        font-size: 30px; } }\r\n@media (max-width: 425px) {\r\n  .trailer_bg .trailer_head h1 {\r\n    font-size: 36px; }\r\n\r\n  .trailer_container .trailer_items .trailer_thumbnail {\r\n    width: 100%;\r\n    height: 230px; }\r\n    .trailer_container .trailer_items .trailer_thumbnail .play_button {\r\n      width: 50px;\r\n      height: 50px; }\r\n      .trailer_container .trailer_items .trailer_thumbnail .play_button i {\r\n        font-size: 16px; }\r\n    .trailer_container .trailer_items .trailer_thumbnail img {\r\n      width: 100%;\r\n      height: 230px; }\r\n  .trailer_container .trailer_items .trailer_video {\r\n    width: 100%;\r\n    height: 230px; }\r\n    .trailer_container .trailer_items .trailer_video iframe {\r\n      width: 100%;\r\n      height: 230px; }\r\n  .trailer_container .trailer_details {\r\n    max-width: 260px;\r\n    position: absolute;\r\n    right: 20px;\r\n    padding: 30px 15px; }\r\n    .trailer_container .trailer_details h4 {\r\n      font-size: 24px; } }\r\n/*==================Game Trailer Style End=================== */\r\n/* trailer section css end */\r\n/* others games section css start */\r\n.view-all-header {\r\n  display: -webkit-flex;\r\n  display: -moz-box;\r\n  display: flex;\r\n  -webkit-flex-wrap: wrap;\r\n          flex-wrap: wrap;\r\n  -webkit-justify-content: space-between;\r\n     -moz-box-pack: justify;\r\n          justify-content: space-between;\r\n  -webkit-align-items: center;\r\n     -moz-box-align: center;\r\n          align-items: center;\r\n  padding-bottom: 10px;\r\n  border-bottom: 1px solid #3e3e96; }\r\n  .view-all-header .title {\r\n    width: -webkit-calc(100% - 100px);\r\n    width: -moz-calc(100% - 100px);\r\n    width: calc(100% - 100px); }\r\n  .view-all-header .link {\r\n    width: 100px; }\r\n\r\n.game-small-card {\r\n  text-align: center; }\r\n  .game-small-card__thumb {\r\n    overflow: hidden;\r\n    -webkit-box-shadow: 0px 12px 13px 0px rgba(26, 15, 63, 0.46);\r\n            box-shadow: 0px 12px 13px 0px rgba(26, 15, 63, 0.46);\r\n    border-radius: 15px;\r\n    -webkit-border-radius: 15px;\r\n    -moz-border-radius: 15px;\r\n    -ms-border-radius: 15px;\r\n    -o-border-radius: 15px; }\r\n    .game-small-card__thumb img {\r\n      width: 100%; }\r\n  .game-small-card__content {\r\n    margin-top: 20px; }\r\n\r\n/* others games section css end */\r\n/* about section css start */\r\n.about-obj-1 {\r\n  position: absolute;\r\n  right: 0;\r\n  top: 0; }\r\n\r\n.about-obj-2 {\r\n  position: absolute;\r\n  bottom: 120px;\r\n  left: 0; }\r\n\r\n.about-content .section-header {\r\n  margin-bottom: 15px; }\r\n\r\n.about-thumb {\r\n  position: relative; }\r\n  .about-thumb .image-1 {\r\n    position: relative;\r\n    z-index: 1;\r\n    margin-bottom: 25px;\r\n    -webkit-animation: customBounce 3s linear infinite;\r\n            animation: customBounce 3s linear infinite; }\r\n  .about-thumb .image-2 {\r\n    position: absolute;\r\n    bottom: 0;\r\n    left: 0; }\r\n\r\n/* about section css end */\r\n/* team section css start */\r\n.team-card {\r\n  text-align: center; }\r\n  .team-card:hover .team-card__thumb .obj {\r\n    width: 100px;\r\n    height: 91px;\r\n    top: 50%;\r\n    left: 50%;\r\n    -webkit-transform: translate(-50%, -50%);\r\n    -moz-transform: translate(-50%, -50%);\r\n         transform: translate(-50%, -50%); }\r\n  .team-card__thumb {\r\n    width: 167px;\r\n    height: 167px;\r\n    border-radius: 100%;\r\n    -webkit-border-radius: 100%;\r\n    -moz-border-radius: 100%;\r\n    -ms-border-radius: 100%;\r\n    -o-border-radius: 100%;\r\n    display: inline-block;\r\n    position: relative; }\r\n    .team-card__thumb .obj {\r\n      position: absolute;\r\n      top: 0;\r\n      left: -23px;\r\n      width: 200px;\r\n      height: 182px;\r\n      z-index: -1;\r\n      -webkit-transition: all 0.5s;\r\n      -moz-transition: all 0.5s;\r\n      transition: all 0.5s; }\r\n  .team-card__content {\r\n    margin-top: 50px; }\r\n    .team-card__content .name {\r\n      text-transform: capitalize; }\r\n    .team-card__content .designation {\r\n      color: #22b868; }\r\n\r\n/* team section css end */\r\n/* overview section css start */\r\n.overview-card {\r\n  padding: 30px;\r\n  background-color: rgba(255, 255, 255, 0.102);\r\n  -webkit-box-shadow: 1.045px 9.945px 35px 0px rgba(20, 25, 96, 0.79);\r\n          box-shadow: 1.045px 9.945px 35px 0px rgba(20, 25, 96, 0.79);\r\n  display: -webkit-flex;\r\n  display: -moz-box;\r\n  display: flex;\r\n  -webkit-flex-wrap: wrap;\r\n          flex-wrap: wrap;\r\n  -webkit-align-items: center;\r\n     -moz-box-align: center;\r\n          align-items: center;\r\n  border-radius: 20px;\r\n  -webkit-border-radius: 20px;\r\n  -moz-border-radius: 20px;\r\n  -ms-border-radius: 20px;\r\n  -o-border-radius: 20px; }\r\n  .overview-card__icon {\r\n    width: 100px;\r\n    height: 100px; }\r\n  .overview-card__content {\r\n    width: -webkit-calc(100% - 125px);\r\n    width: -moz-calc(100% - 125px);\r\n    width: calc(100% - 125px);\r\n    padding-left: 20px; }\r\n    .overview-card__content p {\r\n      text-transform: uppercase;\r\n      color: #00ffff;\r\n      margin-top: 6px; }\r\n      @media (max-width: 1199px) {\r\n        .overview-card__content p {\r\n          font-size: 16px; } }\r\n  .overview-card__number {\r\n    font-size: 36px; }\r\n    @media (max-width: 1199px) {\r\n      .overview-card__number {\r\n        font-size: 32px; } }\r\n  .overview-card.style--two {\r\n    background-color: rgba(62, 60, 184, 0.702);\r\n    -webkit-box-shadow: 1.045px 9.945px 35px 0px rgba(20, 25, 96, 0.79);\r\n            box-shadow: 1.045px 9.945px 35px 0px rgba(20, 25, 96, 0.79); }\r\n\r\n.testimonial-slider {\r\n  margin-top: 200px; }\r\n  .testimonial-slider .slick-list {\r\n    margin: -75px; }\r\n  .testimonial-slider .slick-arrow {\r\n    width: 40px;\r\n    height: 40px;\r\n    background-color: #7a5deb;\r\n    -webkit-box-shadow: 0px 5px 20px 0px rgba(180, 164, 245, 0.5);\r\n            box-shadow: 0px 5px 20px 0px rgba(180, 164, 245, 0.5);\r\n    color: #ffffff;\r\n    display: -webkit-flex;\r\n    display: -moz-box;\r\n    display: flex;\r\n    -webkit-flex-wrap: wrap;\r\n            flex-wrap: wrap;\r\n    -webkit-justify-content: center;\r\n       -moz-box-pack: center;\r\n            justify-content: center;\r\n    -webkit-align-items: center;\r\n       -moz-box-align: center;\r\n            align-items: center;\r\n    border-radius: 5px;\r\n    -webkit-border-radius: 5px;\r\n    -moz-border-radius: 5px;\r\n    -ms-border-radius: 5px;\r\n    -o-border-radius: 5px;\r\n    position: absolute;\r\n    top: 50%;\r\n    z-index: 1;\r\n    margin-top: -20px;\r\n    cursor: pointer; }\r\n    @media (max-width: 575px) {\r\n      .testimonial-slider .slick-arrow {\r\n        display: none; } }\r\n    .testimonial-slider .slick-arrow.prev {\r\n      left: -20px; }\r\n    .testimonial-slider .slick-arrow.next {\r\n      right: -20px; }\r\n\r\n.testimonial-single {\r\n  text-align: center;\r\n  padding: 40px 110px;\r\n  background-image: -moz-linear-gradient(89deg, #5f16a9 0%, #cf15f8 100%);\r\n  background-image: -webkit-linear-gradient(89deg, #5f16a9 0%, #cf15f8 100%);\r\n  background-image: -ms-linear-gradient(89deg, #5f16a9 0%, #cf15f8 100%);\r\n  -webkit-box-shadow: 0px 12px 43px 0px rgba(48, 29, 117, 0.96);\r\n          box-shadow: 0px 12px 43px 0px rgba(48, 29, 117, 0.96);\r\n  border-radius: 20px;\r\n  -webkit-border-radius: 20px;\r\n  -moz-border-radius: 20px;\r\n  -ms-border-radius: 20px;\r\n  -o-border-radius: 20px;\r\n  position: relative;\r\n  margin: 75px; }\r\n  @media (max-width: 767px) {\r\n    .testimonial-single {\r\n      padding: 40px; } }\r\n  .testimonial-single::before {\r\n    position: absolute;\r\n    content: \"\";\r\n    top: -75px;\r\n    left: 30px;\r\n    color: #ffffff;\r\n    font-size: 110px;\r\n    font-family: \"Line Awesome Free\";\r\n    font-weight: 900; }\r\n    @media (max-width: 575px) {\r\n      .testimonial-single::before {\r\n        font-size: 72px;\r\n        top: -25px; } }\r\n    @media (max-width: 380px) {\r\n      .testimonial-single::before {\r\n        top: -35px;\r\n        left: 15px;\r\n        font-size: 56px; } }\r\n  .testimonial-single::after {\r\n    position: absolute;\r\n    content: \"\";\r\n    bottom: -75px;\r\n    right: 30px;\r\n    color: #ffffff;\r\n    font-size: 110px;\r\n    font-family: \"Line Awesome Free\";\r\n    font-weight: 900; }\r\n    @media (max-width: 575px) {\r\n      .testimonial-single::after {\r\n        font-size: 72px;\r\n        bottom: -25px; } }\r\n    @media (max-width: 380px) {\r\n      .testimonial-single::after {\r\n        bottom: -35px;\r\n        right: 15px;\r\n        font-size: 56px; } }\r\n  .testimonial-single__thumb {\r\n    width: 150px;\r\n    height: 150px;\r\n    background: #800080;\r\n    background: -webkit-linear-gradient(to bottom, #c065dd, #5d28fe);\r\n    background: -webkit-gradient(linear, left top, left bottom, from(#c065dd), to(#5d28fe));\r\n    background: -webkit-linear-gradient(top, #c065dd, #5d28fe);\r\n    background: -moz-linear-gradient(top, #c065dd, #5d28fe);\r\n    background: linear-gradient(to bottom, #c065dd, #5d28fe);\r\n    -webkit-box-shadow: 0px 13px 4px 0px rgba(36, 25, 76, 0.01);\r\n            box-shadow: 0px 13px 4px 0px rgba(36, 25, 76, 0.01);\r\n    border-radius: 50%;\r\n    -webkit-border-radius: 50%;\r\n    -moz-border-radius: 50%;\r\n    -ms-border-radius: 50%;\r\n    -o-border-radius: 50%;\r\n    overflow: hidden;\r\n    display: inline-block;\r\n    position: relative;\r\n    padding: 4px;\r\n    margin-top: -115px; }\r\n    @media (max-width: 380px) {\r\n      .testimonial-single__thumb {\r\n        width: 110px;\r\n        height: 110px; } }\r\n  .testimonial-single__content {\r\n    margin-top: 30px; }\r\n    .testimonial-single__content p {\r\n      font-size: 28px;\r\n      color: #eae5fe; }\r\n      @media (max-width: 991px) {\r\n        .testimonial-single__content p {\r\n          font-size: 20px; } }\r\n  .testimonial-single .designation {\r\n    font-size: 24px;\r\n    font-weight: 600;\r\n    margin-top: 30px; }\r\n  .testimonial-single .ratings {\r\n    margin-top: 10px; }\r\n    .testimonial-single .ratings i {\r\n      color: #ffa200;\r\n      font-size: 14px; }\r\n\r\n/* overview section css end */\r\n/* blog section css start */\r\n.post-card {\r\n  padding: 10px;\r\n  background-color: #785ce7;\r\n  border-radius: 10px;\r\n  -webkit-border-radius: 10px;\r\n  -moz-border-radius: 10px;\r\n  -ms-border-radius: 10px;\r\n  -o-border-radius: 10px; }\r\n  .post-card__thumb {\r\n    max-height: 185px;\r\n    overflow: hidden;\r\n    border-radius: 10px;\r\n    -webkit-border-radius: 10px;\r\n    -moz-border-radius: 10px;\r\n    -ms-border-radius: 10px;\r\n    -o-border-radius: 10px; }\r\n    .post-card__thumb img {\r\n      width: 100%; }\r\n  .post-card__content {\r\n    padding: 20px;\r\n    position: relative; }\r\n    .post-card__content .date {\r\n      font-size: 16px;\r\n      color: #2dc3c3;\r\n      margin-bottom: 5px; }\r\n    .post-card__content .post-type {\r\n      position: absolute;\r\n      top: -20px;\r\n      right: 30px;\r\n      width: 40px;\r\n      height: 40px;\r\n      text-align: center;\r\n      line-height: 44px;\r\n      font-size: 24px;\r\n      border-radius: 50%;\r\n      -webkit-border-radius: 50%;\r\n      -moz-border-radius: 50%;\r\n      -ms-border-radius: 50%;\r\n      -o-border-radius: 50%;\r\n      background-image: -moz-linear-gradient(-45deg, #c165dd 0%, #5c27fe 100%);\r\n      background-image: -webkit-linear-gradient(-45deg, #c165dd 0%, #5c27fe 100%);\r\n      background-image: -ms-linear-gradient(-45deg, #c165dd 0%, #5c27fe 100%);\r\n      -webkit-box-shadow: 0px 1px 6px 0px rgba(40, 7, 169, 0.38);\r\n              box-shadow: 0px 1px 6px 0px rgba(40, 7, 169, 0.38); }\r\n  .post-card.style--two {\r\n    background-color: transparent;\r\n    border-radius: 0;\r\n    -webkit-border-radius: 0;\r\n    -moz-border-radius: 0;\r\n    -ms-border-radius: 0;\r\n    -o-border-radius: 0;\r\n    padding: 0; }\r\n    .post-card.style--two .post-card__thumb {\r\n      border-radius: 0;\r\n      -webkit-border-radius: 0;\r\n      -moz-border-radius: 0;\r\n      -ms-border-radius: 0;\r\n      -o-border-radius: 0;\r\n      max-height: 445px; }\r\n    .post-card.style--two .post-card__content {\r\n      margin-left: 30px;\r\n      margin-right: 30px;\r\n      margin-top: -100px;\r\n      padding: 30px;\r\n      background-color: #160351; }\r\n      @media (max-width: 575px) {\r\n        .post-card.style--two .post-card__content {\r\n          margin-left: 15px;\r\n          margin-right: 15px;\r\n          margin-top: -50px; } }\r\n    .post-card.style--two .post-card__title {\r\n      font-size: 35px; }\r\n      @media (max-width: 767px) {\r\n        .post-card.style--two .post-card__title {\r\n          font-size: 28px; } }\r\n      @media (max-width: 575px) {\r\n        .post-card.style--two .post-card__title {\r\n          font-size: 24px; } }\r\n    .post-card.style--two .time {\r\n      color: #766ee6;\r\n      margin-top: 20px; }\r\n  .post-card.style--three {\r\n    background-color: transparent;\r\n    border-radius: 0;\r\n    -webkit-border-radius: 0;\r\n    -moz-border-radius: 0;\r\n    -ms-border-radius: 0;\r\n    -o-border-radius: 0;\r\n    padding: 0; }\r\n    .post-card.style--three .post-card__thumb {\r\n      border-radius: 0;\r\n      -webkit-border-radius: 0;\r\n      -moz-border-radius: 0;\r\n      -ms-border-radius: 0;\r\n      -o-border-radius: 0;\r\n      max-height: 620px; }\r\n    .post-card.style--three .post-card__content {\r\n      margin: -140px 135px 0;\r\n      padding: 30px;\r\n      background-color: #160351; }\r\n      @media (max-width: 991px) {\r\n        .post-card.style--three .post-card__content {\r\n          margin: -100px 50px 0; } }\r\n      @media (max-width: 991px) {\r\n        .post-card.style--three .post-card__content {\r\n          margin: -50px 15px 0; } }\r\n    .post-card.style--three .post-card__title {\r\n      font-size: 35px; }\r\n      @media (max-width: 767px) {\r\n        .post-card.style--three .post-card__title {\r\n          font-size: 28px; } }\r\n      @media (max-width: 575px) {\r\n        .post-card.style--three .post-card__title {\r\n          font-size: 24px; } }\r\n    .post-card.style--three .time {\r\n      color: #766ee6;\r\n      margin-top: 20px; }\r\n\r\n.post-author {\r\n  display: -webkit-flex;\r\n  display: -moz-box;\r\n  display: flex;\r\n  -webkit-flex-wrap: wrap;\r\n          flex-wrap: wrap;\r\n  -webkit-align-items: center;\r\n     -moz-box-align: center;\r\n          align-items: center; }\r\n  .post-author__thumb {\r\n    width: 30px;\r\n    height: 30px;\r\n    border-radius: 50px;\r\n    -webkit-border-radius: 50px;\r\n    -moz-border-radius: 50px;\r\n    -ms-border-radius: 50px;\r\n    -o-border-radius: 50px;\r\n    overflow: hidden; }\r\n  .post-author__name {\r\n    color: #ffffff;\r\n    width: -webkit-calc(100% - 30px);\r\n    width: -moz-calc(100% - 30px);\r\n    width: calc(100% - 30px);\r\n    padding-left: 15px; }\r\n\r\n.blog-slider .slick-arrow {\r\n  position: absolute;\r\n  top: 50%;\r\n  margin-top: -20px;\r\n  width: 40px;\r\n  height: 40px;\r\n  text-align: center;\r\n  line-height: 45px;\r\n  color: #ffffff;\r\n  font-size: 28px;\r\n  border-radius: 5px;\r\n  -webkit-border-radius: 5px;\r\n  -moz-border-radius: 5px;\r\n  -ms-border-radius: 5px;\r\n  -o-border-radius: 5px;\r\n  background-image: -moz-linear-gradient(0deg, #e2906e 0%, #e83a99 100%);\r\n  background-image: -webkit-linear-gradient(0deg, #e2906e 0%, #e83a99 100%);\r\n  background-image: -ms-linear-gradient(0deg, #e2906e 0%, #e83a99 100%);\r\n  cursor: pointer;\r\n  z-index: 1; }\r\n  .blog-slider .slick-arrow.prev {\r\n    left: -20px; }\r\n    @media (max-width: 575px) {\r\n      .blog-slider .slick-arrow.prev {\r\n        left: 0; } }\r\n  .blog-slider .slick-arrow.next {\r\n    right: -20px; }\r\n    @media (max-width: 575px) {\r\n      .blog-slider .slick-arrow.next {\r\n        right: 0; } }\r\n.blog-slider .slick-list {\r\n  margin: -15px; }\r\n.blog-slider .post-card {\r\n  margin: 15px; }\r\n\r\n/* blog section css end */\r\n/* blog details section css start */\r\n.blog-details {\r\n  margin-top: -165px; }\r\n  .blog-details__header {\r\n    padding: 80px 95px;\r\n    background-color: #160351;\r\n    border-radius: 20px;\r\n    -webkit-border-radius: 20px;\r\n    -moz-border-radius: 20px;\r\n    -ms-border-radius: 20px;\r\n    -o-border-radius: 20px; }\r\n    @media (max-width: 991px) {\r\n      .blog-details__header {\r\n        padding: 50px 30px; } }\r\n  .blog-details__title {\r\n    font-size: 60px;\r\n    text-align: center; }\r\n    @media (max-width: 1199px) {\r\n      .blog-details__title {\r\n        font-size: 48px; } }\r\n    @media (max-width: 991px) {\r\n      .blog-details__title {\r\n        font-size: 36px; } }\r\n    @media (max-width: 767px) {\r\n      .blog-details__title {\r\n        font-size: 28px; } }\r\n  .blog-details .meta-post {\r\n    display: -webkit-flex;\r\n    display: -moz-box;\r\n    display: flex;\r\n    -webkit-flex-wrap: wrap;\r\n            flex-wrap: wrap;\r\n    -webkit-align-items: center;\r\n       -moz-box-align: center;\r\n            align-items: center;\r\n    margin: -3px -12px; }\r\n    @media (max-width: 991px) {\r\n      .blog-details .meta-post {\r\n        -webkit-justify-content: center;\r\n           -moz-box-pack: center;\r\n                justify-content: center; } }\r\n    .blog-details .meta-post li {\r\n      margin: 3px 12px; }\r\n    .blog-details .meta-post .post-author__thumb {\r\n      width: 40px;\r\n      height: 40px; }\r\n    .blog-details .meta-post .post-author__name {\r\n      width: -webkit-calc(100% - 40px);\r\n      width: -moz-calc(100% - 40px);\r\n      width: calc(100% - 40px);\r\n      padding-left: 5px; }\r\n  .blog-details .social-links {\r\n    -webkit-align-items: center;\r\n       -moz-box-align: center;\r\n            align-items: center;\r\n    -webkit-justify-content: flex-end;\r\n       -moz-box-pack: end;\r\n            justify-content: flex-end; }\r\n    @media (max-width: 991px) {\r\n      .blog-details .social-links {\r\n        -webkit-justify-content: center;\r\n           -moz-box-pack: center;\r\n                justify-content: center;\r\n        margin-top: 15px; } }\r\n    .blog-details .social-links li span {\r\n      color: #ffffff; }\r\n    .blog-details .social-links li a {\r\n      width: 44px;\r\n      height: 44px;\r\n      line-height: 46px;\r\n      background-color: rgba(104, 61, 245, 0);\r\n      border: 1px solid rgba(255, 255, 255, 0.2); }\r\n      .blog-details .social-links li a:hover {\r\n        background-image: -moz-linear-gradient(86deg, #ec038b 0%, #fb6468 44%, #fbb936 100%);\r\n        background-image: -webkit-linear-gradient(86deg, #ec038b 0%, #fb6468 44%, #fbb936 100%);\r\n        background-image: -ms-linear-gradient(86deg, #ec038b 0%, #fb6468 44%, #fbb936 100%);\r\n        -webkit-box-shadow: 0px 17px 40px 0px rgba(124, 78, 25, 0.35);\r\n                box-shadow: 0px 17px 40px 0px rgba(124, 78, 25, 0.35); }\r\n  .blog-details__content p {\r\n    margin-top: 20px; }\r\n    .blog-details__content p a {\r\n      color: #6157f9;\r\n      text-decoration: underline; }\r\n  .blog-details__content blockquote {\r\n    margin-top: 40px;\r\n    padding: 30px 45px;\r\n    background-color: #05023b;\r\n    border-radius: 20px;\r\n    -webkit-border-radius: 20px;\r\n    -moz-border-radius: 20px;\r\n    -ms-border-radius: 20px;\r\n    -o-border-radius: 20px; }\r\n    @media (max-width: 575px) {\r\n      .blog-details__content blockquote {\r\n        padding: 20px; } }\r\n    .blog-details__content blockquote p {\r\n      margin-top: 0;\r\n      font-size: 28px;\r\n      color: #d2ddfb;\r\n      font-weight: 400; }\r\n      @media (max-width: 991px) {\r\n        .blog-details__content blockquote p {\r\n          font-size: 20px; } }\r\n      @media (max-width: 575px) {\r\n        .blog-details__content blockquote p {\r\n          font-size: 16px; } }\r\n  .blog-details__content .img-holder img {\r\n    border-radius: 20px;\r\n    -webkit-border-radius: 20px;\r\n    -moz-border-radius: 20px;\r\n    -ms-border-radius: 20px;\r\n    -o-border-radius: 20px; }\r\n  .blog-details__content .video-thumb {\r\n    position: relative;\r\n    overflow: hidden;\r\n    border-radius: 10px;\r\n    -webkit-border-radius: 10px;\r\n    -moz-border-radius: 10px;\r\n    -ms-border-radius: 10px;\r\n    -o-border-radius: 10px; }\r\n    .blog-details__content .video-thumb__icon {\r\n      position: absolute;\r\n      top: 50%;\r\n      left: 50%;\r\n      width: 120px;\r\n      height: 120px;\r\n      margin-top: -60px;\r\n      margin-left: -60px;\r\n      background-color: rgba(114, 56, 196, 0.8);\r\n      color: #ffffff;\r\n      font-size: 52px;\r\n      display: -webkit-flex;\r\n      display: -moz-box;\r\n      display: flex;\r\n      -webkit-justify-content: center;\r\n         -moz-box-pack: center;\r\n              justify-content: center;\r\n      -webkit-align-items: center;\r\n         -moz-box-align: center;\r\n              align-items: center;\r\n      -webkit-box-shadow: 0px 27px 103px 0px rgba(7, 11, 78, 0.67);\r\n              box-shadow: 0px 27px 103px 0px rgba(7, 11, 78, 0.67);\r\n      border-radius: 50%;\r\n      -webkit-border-radius: 50%;\r\n      -moz-border-radius: 50%;\r\n      -ms-border-radius: 50%;\r\n      -o-border-radius: 50%;\r\n      -webkit-animation: pulse 1.5s infinite;\r\n              animation: pulse 1.5s infinite; }\r\n      @media (max-width: 480px) {\r\n        .blog-details__content .video-thumb__icon {\r\n          width: 100px;\r\n          height: 100px;\r\n          margin-top: -50px;\r\n          margin-left: -50px;\r\n          font-size: 36px; } }\r\n  .blog-details__sub-title {\r\n    font-size: 36px;\r\n    margin-bottom: 20px; }\r\n    @media (max-width: 991px) {\r\n      .blog-details__sub-title {\r\n        font-size: 28px; } }\r\n    @media (max-width: 767px) {\r\n      .blog-details__sub-title {\r\n        font-size: 24px; } }\r\n\r\n.border-bottom {\r\n  border-color: #223172 !important; }\r\n\r\n.author {\r\n  padding: 50px;\r\n  background-color: #160351;\r\n  border-radius: 20px;\r\n  -webkit-border-radius: 20px;\r\n  -moz-border-radius: 20px;\r\n  -ms-border-radius: 20px;\r\n  -o-border-radius: 20px;\r\n  display: -webkit-flex;\r\n  display: -moz-box;\r\n  display: flex;\r\n  -webkit-flex-wrap: wrap;\r\n          flex-wrap: wrap; }\r\n  @media (max-width: 575px) {\r\n    .author {\r\n      padding: 30px; } }\r\n  .author__thumb {\r\n    width: 125px;\r\n    height: 125px;\r\n    overflow: hidden;\r\n    border-radius: 50%;\r\n    -webkit-border-radius: 50%;\r\n    -moz-border-radius: 50%;\r\n    -ms-border-radius: 50%;\r\n    -o-border-radius: 50%; }\r\n    .author__thumb img {\r\n      width: inherit;\r\n      height: inherit;\r\n      object-fit: cover;\r\n      -o-object-fit: cover;\r\n      object-position: center;\r\n      -o-object-position: center; }\r\n  .author__content {\r\n    width: -webkit-calc(100% - 125px);\r\n    width: -moz-calc(100% - 125px);\r\n    width: calc(100% - 125px);\r\n    padding-left: 30px; }\r\n    @media (max-width: 767px) {\r\n      .author__content {\r\n        width: 100%;\r\n        padding-left: 0;\r\n        margin-top: 30px; } }\r\n    .author__content .top-title {\r\n      font-family: \"Josefin Sans\", sans-serif;\r\n      font-weight: 600;\r\n      color: #ec038b;\r\n      font-size: 24px;\r\n      margin-bottom: 15px; }\r\n    .author__content .name {\r\n      font-size: 36px; }\r\n\r\n/* blog details section css end */\r\n/* contact section start */\r\n.contact-left-el {\r\n  position: absolute;\r\n  bottom: 10%;\r\n  left: 0;\r\n  z-index: -1; }\r\n  @media (max-width: 991px) {\r\n    .contact-left-el {\r\n      bottom: 40%; } }\r\n  @media (max-width: 1450px) {\r\n    .contact-left-el img {\r\n      width: 80%; } }\r\n\r\n.contact-right-el {\r\n  position: absolute;\r\n  bottom: 5%;\r\n  right: 0;\r\n  z-index: -1;\r\n  text-align: right; }\r\n  @media (max-width: 991px) {\r\n    .contact-right-el {\r\n      bottom: 20%; } }\r\n  @media (max-width: 1450px) {\r\n    .contact-right-el img {\r\n      width: 80%; } }\r\n  @media (max-width: 1199px) {\r\n    .contact-right-el img {\r\n      width: 60%; } }\r\n\r\n.contact-form-wrapper {\r\n  padding: 30px;\r\n  background-color: #311a83;\r\n  border: 1px solid rgba(255, 255, 255, 0.1);\r\n  border-radius: 20px;\r\n  -webkit-border-radius: 20px;\r\n  -moz-border-radius: 20px;\r\n  -ms-border-radius: 20px;\r\n  -o-border-radius: 20px; }\r\n\r\n.contact-item {\r\n  display: -webkit-flex;\r\n  display: -moz-box;\r\n  display: flex;\r\n  -webkit-flex-wrap: wrap;\r\n          flex-wrap: wrap; }\r\n  .contact-item__icon {\r\n    width: 78px;\r\n    height: 78px;\r\n    display: -webkit-flex;\r\n    display: -moz-box;\r\n    display: flex;\r\n    -webkit-align-items: center;\r\n       -moz-box-align: center;\r\n            align-items: center;\r\n    -webkit-justify-content: center;\r\n       -moz-box-pack: center;\r\n            justify-content: center;\r\n    background-color: rgba(70, 15, 122, 0.6);\r\n    -webkit-box-shadow: 0px 4px 10px 8px rgba(0, 162, 255, 0.15), inset 0px 0px 12px 6px #a816e5;\r\n            box-shadow: 0px 4px 10px 8px rgba(0, 162, 255, 0.15), inset 0px 0px 12px 6px #a816e5;\r\n    border-radius: 50%;\r\n    -webkit-border-radius: 50%;\r\n    -moz-border-radius: 50%;\r\n    -ms-border-radius: 50%;\r\n    -o-border-radius: 50%; }\r\n    .contact-item__icon i {\r\n      color: #00a2ff;\r\n      font-size: 36px;\r\n      text-shadow: 0 0 30px rgba(0, 162, 255, 0.5); }\r\n  .contact-item__content {\r\n    width: -webkit-calc(100% - 78px);\r\n    width: -moz-calc(100% - 78px);\r\n    width: calc(100% - 78px);\r\n    padding-left: 20px; }\r\n    .contact-item__content .title {\r\n      margin-bottom: 5px; }\r\n    .contact-item__content a {\r\n      color: #c4cbf9; }\r\n\r\n/* contact section end */\r\n/* faq section css start */\r\n.faq-wrapper {\r\n  padding: 120px 190px 0;\r\n  background-color: #000033;\r\n  -webkit-box-shadow: 2.581px -36.91px 29px 0px rgba(0, 0, 51, 0.29);\r\n          box-shadow: 2.581px -36.91px 29px 0px rgba(0, 0, 51, 0.29);\r\n  border-radius: 10px;\r\n  -webkit-border-radius: 10px;\r\n  -moz-border-radius: 10px;\r\n  -ms-border-radius: 10px;\r\n  -o-border-radius: 10px; }\r\n  @media (max-width: 1199px) {\r\n    .faq-wrapper {\r\n      padding: 50px 90px 0; } }\r\n  @media (max-width: 991px) {\r\n    .faq-wrapper {\r\n      padding: 50px 0; } }\r\n\r\n/* faq section css end */\r\n/* account area css start */\r\n.account-area {\r\n  padding: 50px 30px;\r\n  background-color: #ffffff;\r\n  border-radius: 20px;\r\n  -webkit-border-radius: 20px;\r\n  -moz-border-radius: 20px;\r\n  -ms-border-radius: 20px;\r\n  -o-border-radius: 20px; }\r\n  .account-area .title {\r\n    text-align: center;\r\n    font-size: 28px;\r\n    color: #3b368c; }\r\n  .account-area p {\r\n    color: #54518d; }\r\n    .account-area p a {\r\n      color: #0403c4; }\r\n\r\n.account-form label {\r\n  color: #3b368c;\r\n  font-weight: 600;\r\n  font-size: 18px; }\r\n.account-form .form-control {\r\n  height: 60px;\r\n  padding: 10px 30px;\r\n  background-color: #f6f6fa; }\r\n.account-form .cmn-btn {\r\n  border-radius: 10px;\r\n  -webkit-border-radius: 10px;\r\n  -moz-border-radius: 10px;\r\n  -ms-border-radius: 10px;\r\n  -o-border-radius: 10px;\r\n  font-weight: 400;\r\n  text-transform: none;\r\n  font-size: 18px; }\r\n.account-form .form-group {\r\n  margin-bottom: 20px; }\r\n\r\n.or-devider {\r\n  position: relative;\r\n  text-align: center;\r\n  z-index: 1; }\r\n  .or-devider::before {\r\n    position: absolute;\r\n    content: \"\";\r\n    top: 12px;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 1px;\r\n    background-color: #dddce7;\r\n    z-index: -1; }\r\n  .or-devider span {\r\n    color: #3b368c;\r\n    font-weight: 700;\r\n    background-color: #ffffff;\r\n    padding: 2px 15px; }\r\n\r\n.google-btn {\r\n  padding: 10px 25px;\r\n  border: 1px solid #aa9dd0;\r\n  display: -webkit-inline-flex;\r\n  display: -moz-inline-box;\r\n  display: inline-flex;\r\n  -webkit-align-items: center;\r\n     -moz-box-align: center;\r\n          align-items: center;\r\n  border-radius: 999px;\r\n  -webkit-border-radius: 999px;\r\n  -moz-border-radius: 999px;\r\n  -ms-border-radius: 999px;\r\n  -o-border-radius: 999px;\r\n  color: #54518d; }\r\n  .google-btn img {\r\n    margin-right: 10px; }\r\n\r\n/* account area css end */\r\n/* sidebar css start */\r\n.widget + .widget {\r\n  margin-top: 30px; }\r\n\r\n.widget {\r\n  padding: 30px;\r\n  background-color: #160351;\r\n  -webkit-box-shadow: 0px 10px 5px 0px rgba(119, 123, 146, 0.02);\r\n          box-shadow: 0px 10px 5px 0px rgba(119, 123, 146, 0.02);\r\n  border-radius: 10px;\r\n  -webkit-border-radius: 10px;\r\n  -moz-border-radius: 10px;\r\n  -ms-border-radius: 10px;\r\n  -o-border-radius: 10px; }\r\n  .widget__title {\r\n    margin-bottom: 20px; }\r\n  .widget__search .form-control {\r\n    padding: 0 15px 5px 0;\r\n    border: none;\r\n    font-size: 14px;\r\n    border-bottom: 1px solid #361d81;\r\n    background-color: transparent;\r\n    border-radius: 0;\r\n    -webkit-border-radius: 0;\r\n    -moz-border-radius: 0;\r\n    -ms-border-radius: 0;\r\n    -o-border-radius: 0;\r\n    color: #ffffff; }\r\n  .widget__search button {\r\n    margin-top: 40px;\r\n    padding: 10px 35px;\r\n    display: -webkit-flex;\r\n    display: -moz-box;\r\n    display: flex;\r\n    -webkit-flex-wrap: wrap;\r\n            flex-wrap: wrap;\r\n    -webkit-align-items: center;\r\n       -moz-box-align: center;\r\n            align-items: center;\r\n    -webkit-justify-content: center;\r\n       -moz-box-pack: center;\r\n            justify-content: center;\r\n    color: #ffffff;\r\n    text-transform: uppercase;\r\n    font-size: 16px;\r\n    background-image: -moz-linear-gradient(-30deg, #c165dd 0%, #5c27fe 100%);\r\n    background-image: -webkit-linear-gradient(-30deg, #c165dd 0%, #5c27fe 100%);\r\n    background-image: -ms-linear-gradient(-30deg, #c165dd 0%, #5c27fe 100%);\r\n    -webkit-box-shadow: 0px 3px 7px 0px rgba(0, 0, 0, 0.35);\r\n            box-shadow: 0px 3px 7px 0px rgba(0, 0, 0, 0.35);\r\n    border-radius: 999px;\r\n    -webkit-border-radius: 999px;\r\n    -moz-border-radius: 999px;\r\n    -ms-border-radius: 999px;\r\n    -o-border-radius: 999px; }\r\n    .widget__search button i {\r\n      margin-right: 8px; }\r\n  .widget .social-links li a {\r\n    color: #9794c2; }\r\n    .widget .social-links li a:hover {\r\n      background-image: -moz-linear-gradient(-30deg, #c165dd 0%, #5c27fe 100%);\r\n      background-image: -webkit-linear-gradient(-30deg, #c165dd 0%, #5c27fe 100%);\r\n      background-image: -ms-linear-gradient(-30deg, #c165dd 0%, #5c27fe 100%);\r\n      -webkit-box-shadow: 0px 3px 7px 0px rgba(0, 0, 0, 0.35);\r\n              box-shadow: 0px 3px 7px 0px rgba(0, 0, 0, 0.35);\r\n      border-color: #7235f7;\r\n      color: #ffffff; }\r\n\r\n.post-item__content {\r\n  margin-top: 25px; }\r\n.post-item__meta {\r\n  display: -webkit-flex;\r\n  display: -moz-box;\r\n  display: flex;\r\n  -webkit-flex-wrap: wrap;\r\n          flex-wrap: wrap;\r\n  margin: -3px -10px; }\r\n  .post-item__meta li {\r\n    margin: 3px 10px;\r\n    font-size: 14px; }\r\n    .post-item__meta li i {\r\n      font-size: 12px;\r\n      background: #4380e4;\r\n      background: -webkit-linear-gradient(0deg, #e2906e 0%, #e83a99 100%);\r\n      background: -webkit-gradient(linear, left bottom, left top, from(#e2906e), to(#e83a99));\r\n      background: -webkit-linear-gradient(bottom, #e2906e 0%, #e83a99 100%);\r\n      background: -moz-linear-gradient(bottom, #e2906e 0%, #e83a99 100%);\r\n      background: linear-gradient(0deg, #e2906e 0%, #e83a99 100%);\r\n      -webkit-background-clip: text;\r\n      -webkit-text-fill-color: transparent;\r\n      text-shadow: 0.624px 2.934px 2px rgba(232, 58, 153, 0.3); }\r\n    .post-item__meta li span {\r\n      color: #8984dc; }\r\n\r\n.small-post-slider .slick-arrow {\r\n  position: absolute;\r\n  top: -45px;\r\n  right: 0;\r\n  width: 20px;\r\n  height: 20px;\r\n  background-image: -moz-linear-gradient(-30deg, #c165dd 0%, #5c27fe 100%);\r\n  background-image: -webkit-linear-gradient(-30deg, #c165dd 0%, #5c27fe 100%);\r\n  background-image: -ms-linear-gradient(-30deg, #c165dd 0%, #5c27fe 100%);\r\n  -webkit-box-shadow: 0px 3px 7px 0px rgba(0, 0, 0, 0.35);\r\n          box-shadow: 0px 3px 7px 0px rgba(0, 0, 0, 0.35);\r\n  color: #ffffff;\r\n  border-radius: 50%;\r\n  -webkit-border-radius: 50%;\r\n  -moz-border-radius: 50%;\r\n  -ms-border-radius: 50%;\r\n  -o-border-radius: 50%;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  text-align: center;\r\n  line-height: 25px; }\r\n  .small-post-slider .slick-arrow.prev {\r\n    right: 30px; }\r\n\r\n.category-list li:first-child a {\r\n  padding-top: 0; }\r\n.category-list li:last-child a {\r\n  padding-bottom: 0;\r\n  border-bottom: none; }\r\n.category-list li a {\r\n  padding: 10px 0;\r\n  display: -webkit-flex;\r\n  display: -moz-box;\r\n  display: flex;\r\n  -webkit-flex-wrap: wrap;\r\n          flex-wrap: wrap;\r\n  -webkit-justify-content: space-between;\r\n     -moz-box-pack: justify;\r\n          justify-content: space-between;\r\n  border-bottom: 1px dashed #32148c; }\r\n.category-list li .value {\r\n  width: 50px;\r\n  text-align: right; }\r\n\r\n.tags-list a {\r\n  font-size: 14px;\r\n  color: #c1bdf4;\r\n  padding: 12px 30px;\r\n  border: 1px solid #4c3789;\r\n  border-radius: 999px;\r\n  -webkit-border-radius: 999px;\r\n  -moz-border-radius: 999px;\r\n  -ms-border-radius: 999px;\r\n  -o-border-radius: 999px;\r\n  margin: 6px 3px; }\r\n  .tags-list a:hover {\r\n    background-image: -moz-linear-gradient(-30deg, #c165dd 0%, #5c27fe 100%);\r\n    background-image: -webkit-linear-gradient(-30deg, #c165dd 0%, #5c27fe 100%);\r\n    background-image: -ms-linear-gradient(-30deg, #c165dd 0%, #5c27fe 100%);\r\n    -webkit-box-shadow: 0px 3px 7px 0px rgba(0, 0, 0, 0.35);\r\n            box-shadow: 0px 3px 7px 0px rgba(0, 0, 0, 0.35);\r\n    color: #ffffff; }\r\n\r\n/* sidebar css end */\r\n/* footer section css start */\r\n.footer-section {\r\n  position: relative;\r\n  padding-top: 250px; }\r\n  @media (max-width: 991px) {\r\n    .footer-section {\r\n      background-size: contain;\r\n      background-repeat: no-repeat;\r\n      background-position-y: top;\r\n      padding-top: 150px; } }\r\n\r\n.bg-shape--top {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  text-align: center;\r\n  margin-top: -3px; }\r\n\r\n.subscribe-area {\r\n  padding: 50px 50px;\r\n  background-color: rgba(255, 255, 255, 0.2);\r\n  -webkit-box-shadow: 0px 5px 8px 0px rgba(26, 15, 63, 0.08);\r\n          box-shadow: 0px 5px 8px 0px rgba(26, 15, 63, 0.08);\r\n  border-radius: 20px;\r\n  -webkit-border-radius: 20px;\r\n  -moz-border-radius: 20px;\r\n  -ms-border-radius: 20px;\r\n  -o-border-radius: 20px;\r\n  display: -webkit-flex;\r\n  display: -moz-box;\r\n  display: flex;\r\n  -webkit-flex-wrap: wrap;\r\n          flex-wrap: wrap;\r\n  -webkit-justify-content: flex-end;\r\n     -moz-box-pack: end;\r\n          justify-content: flex-end;\r\n  position: relative; }\r\n  @media (max-width: 991px) {\r\n    .subscribe-area {\r\n      background-color: rgba(255, 255, 255, 0.5);\r\n      padding: 30px; } }\r\n  .subscribe-area .obj {\r\n    position: absolute;\r\n    top: -90px;\r\n    left: 0;\r\n    -webkit-animation: customBounce 3s linear infinite;\r\n            animation: customBounce 3s linear infinite; }\r\n    @media (max-width: 1199px) {\r\n      .subscribe-area .obj {\r\n        top: -30px; } }\r\n    @media (max-width: 991px) {\r\n      .subscribe-area .obj {\r\n        display: none; } }\r\n    @media (max-width: 1199px) {\r\n      .subscribe-area .obj img {\r\n        width: 80%; } }\r\n  .subscribe-area .subscribe-content {\r\n    width: 50%; }\r\n    @media (max-width: 991px) {\r\n      .subscribe-area .subscribe-content {\r\n        width: 100%; } }\r\n    .subscribe-area .subscribe-content .title {\r\n      font-size: 36px;\r\n      color: #1d2e82; \r\n    }\r\n      @media (max-width: 767px) {\r\n        .subscribe-area .subscribe-content .title {\r\n          font-size: 32px; } }\r\n      @media (max-width: 575px) {\r\n        .subscribe-area .subscribe-content .title {\r\n          font-size: 24px; } }\r\n    .subscribe-area .subscribe-content p {\r\n      color: #151f7a; \r\n    }\r\n  .subscribe-area .subscribe-form {\r\n    display: -webkit-flex;\r\n    display: -moz-box;\r\n    display: flex;\r\n    -webkit-flex-wrap: wrap;\r\n            flex-wrap: wrap;\r\n    margin-right: -45px;\r\n    margin-top: 30px; }\r\n    @media (max-width: 575px) {\r\n      .subscribe-area .subscribe-form {\r\n        margin-right: 0; } }\r\n    .subscribe-area .subscribe-form input {\r\n      border-radius: 999px;\r\n      -webkit-border-radius: 999px;\r\n      -moz-border-radius: 999px;\r\n      -ms-border-radius: 999px;\r\n      -o-border-radius: 999px;\r\n      width: -webkit-calc(100% - 160px);\r\n      width: -moz-calc(100% - 160px);\r\n      width: calc(100% - 160px);\r\n      min-height: 60px;\r\n      padding-left: 25px;\r\n      padding-right: 40px;\r\n      background-color: rgba(38, 13, 76, 0);\r\n      -webkit-box-shadow: inset 0 0 15px 7px #6b38f6;\r\n      box-shadow: inset 0 0 15px 7px #6b38f6;\r\n      border: none;\r\n      color: #363636; }\r\n      @media (max-width: 991px) {\r\n        .subscribe-area .subscribe-form input {\r\n          background-color: #f0d2ba; } }\r\n      @media (max-width: 575px) {\r\n        .subscribe-area .subscribe-form input {\r\n          width: 100%; } }\r\n    .subscribe-area .subscribe-form button {\r\n      background-image: -moz-linear-gradient(-45deg, #c165dd 0%, #5c27fe 100%);\r\n      background-image: -webkit-linear-gradient(-45deg, #c165dd 0%, #5c27fe 100%);\r\n      background-image: -ms-linear-gradient(-45deg, #c165dd 0%, #5c27fe 100%);\r\n      -webkit-box-shadow: 0px 17px 40px 0px rgba(0, 0, 0, 0.53);\r\n              box-shadow: 0px 17px 40px 0px rgba(0, 0, 0, 0.53);\r\n      color: #ffffff;\r\n      width: 160px;\r\n      border-radius: 999px;\r\n      -webkit-border-radius: 999px;\r\n      -moz-border-radius: 999px;\r\n      -ms-border-radius: 999px;\r\n      -o-border-radius: 999px;\r\n      margin-left: -45px; }\r\n      @media (max-width: 575px) {\r\n        .subscribe-area .subscribe-form button {\r\n          margin-left: 0;\r\n          min-height: 55px;\r\n          width: 100%;\r\n          margin-top: 15px; } }\r\n\r\n.footer-top {\r\n  padding-top: 300px;\r\n  padding-bottom: 110px; }\r\n  @media (max-width: 1199px) {\r\n    .footer-top {\r\n      padding-top: 180px; } }\r\n  @media (max-width: 991px) {\r\n    .footer-top {\r\n      padding-top: 80px;\r\n      padding-bottom: 60px; } }\r\n\r\n.footer-widget__title {\r\n  margin-bottom: 25px; }\r\n\r\n.short-links li + li {\r\n  margin-top: 15px; }\r\n.short-links li a {\r\n  font-size: 18px; }\r\n\r\n.footer-bottom {\r\n  padding-bottom: 30px; }\r\n\r\n.copy-right-text a {\r\n  color: #ec038b; }\r\n\r\n.social-links {\r\n  display: -webkit-flex;\r\n  display: -moz-box;\r\n  display: flex;\r\n  -webkit-flex-wrap: wrap;\r\n          flex-wrap: wrap;\r\n  margin: -3px -7px; }\r\n  .social-links li {\r\n    margin: 3px 7px; }\r\n    .social-links li a {\r\n      width: 44px;\r\n      height: 44px;\r\n      background-color: rgba(255, 255, 255, 0);\r\n      border: 1px solid rgba(117, 54, 246, 0.52);\r\n      text-align: center;\r\n      line-height: 46px;\r\n      border-radius: 50%;\r\n      -webkit-border-radius: 50%;\r\n      -moz-border-radius: 50%;\r\n      -ms-border-radius: 50%;\r\n      -o-border-radius: 50%; }\r\n      @media (max-width: 575px) {\r\n        .social-links li a {\r\n          width: 35px;\r\n          height: 35px;\r\n          line-height: 35px; } }\r\n      .social-links li a:hover {\r\n        background-image: -moz-linear-gradient(89deg, #5f16a9 0%, #cf15f8 100%);\r\n        background-image: -webkit-linear-gradient(89deg, #5f16a9 0%, #cf15f8 100%);\r\n        background-image: -ms-linear-gradient(89deg, #5f16a9 0%, #cf15f8 100%);\r\n        -webkit-box-shadow: 0px 4px 9px 0px rgba(103, 22, 175, 0.71);\r\n                box-shadow: 0px 4px 9px 0px rgba(103, 22, 175, 0.71);\r\n        color: #ffffff;\r\n        border-color: #7216b6; }\r\n\r\n/* footer section css end */\r\n\r\n/*# sourceMappingURL=main.css.map */\r\n\r\n ", "",{"version":3,"sources":["webpack://pages/styles.css"],"names":[],"mappings":"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","sourcesContent":["@charset \"UTF-8\";\r\nuser-area {\r\n\tpadding-top: 0px !important;\r\n\tpadding-bottom: 0px !important;\r\n\tmargin-top: 0px !important;\r\n\tmargin-bottom: 0px !important;\r\n\t\r\n }\r\n .slideFix {\r\n  display: none;\r\n }\r\n\r\n\r\n@media only screen and (max-width: 380px) {\r\nbody{\r\n    -moz-transform: scale(0.8, 0.8); /* Moz-browsers */\r\n    zoom: 0.8; /* Other non-webkit browsers */\r\n    zoom: 80%; /* Webkit browsers code */\r\n}\r\n}\r\n\r\n/************************ CSS table of content ************************\r\n *\r\n * 1)  reset css\r\n * 2)  global css\r\n * 3)  header \r\n * 4)  hero\r\n * 5)  inner-hero-section\r\n * 6)  about section\r\n * 7)  next-draw-section \r\n * 8)  how to play section\r\n * 9)  contest section\r\n * 10) contest slider section\r\n * 11) contest feature section\r\n * 12) winner section\r\n * 13) winner details section\r\n * 14) latest winner section\r\n * 15) overview section\r\n * 16) features section\r\n * 17) team section\r\n * 18) testimonial section\r\n * 19) support section\r\n * 20) counter section\r\n * 21) contest-details-section\r\n * 22) lottery-details\r\n * 23) cart section\r\n * 24) checkout section\r\n * 25) affiliate single section\r\n * 26) how it work section\r\n * 27) affiliate partner section\r\n * 28) top affiliate section\r\n * 29) video section\r\n * 30) buy ticket section\r\n * 31) client section\r\n * 32) faq section\r\n * 33) blog section\r\n * 34) blog single section\r\n * 35) contact section\r\n * 36) login\r\n * 37) user section\r\n * 38) error-section\r\n * 39) sidebar\r\n * 40) footer section\r\n *\r\n **************************************************************** */\r\n/* reset css start */\r\n/* @import url(\"https://fonts.googleapis.com/css2?family=Josefin+Sans:wght@400;600;700&display=swap\"); */\r\n@import url(\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;600;700&display=swap\");\r\nhtml {\r\n  scroll-behavior: smooth; }\r\n\r\n  /* hide scrollbar ian Chrome */\r\nbody::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n\r\n  /* hide scrollbar ian IE, Firefox */\r\nbody{\r\n  -ms-overflow-style: none;  /* IE and Edge */\r\n    scrollbar-width: none;  /* Firefox */\r\n}\r\n\r\nbody {\r\n  /* font-family: \"Josefin Sans\", sans-serif; */\r\n  /* overflow: hidden; */\r\n  font-family: \"Roboto\", sans-serif;\r\n  font-size: 15px;\r\n  padding: 0;\r\n  margin: 0;\r\n  font-weight: 300;\r\n  position: relative;\r\n  background-color: #000033;\r\n  overflow-x: hidden; }\r\n\r\nimg {\r\n  max-width: 100%;\r\n  height: auto; }\r\n\r\nul, ol {\r\n  padding: 0;\r\n  margin: 0;\r\n  list-style: none; }\r\n\r\nbutton {\r\n  cursor: pointer; }\r\n\r\n*:focus {\r\n  outline: none; }\r\n\r\nbutton {\r\n  border: none; }\r\n\r\nbutton:focus {\r\n  outline: none; }\r\n\r\nspan {\r\n  display: inline-block; }\r\n\r\na:hover {\r\n  color: #ff0000; }\r\n\r\n/* reset css end */\r\n/* global css strat */\r\n.mb-30 {\r\n  margin-bottom: 30px; }\r\n\r\n.mt-30 {\r\n  margin-top: 30px; }\r\n\r\n.mt-40 {\r\n  margin-top: 40px; }\r\n\r\n.mt-50 {\r\n  margin-top: 50px; }\r\n\r\n.mt-80 {\r\n  margin-top: 80px; }\r\n\r\n.mb-40 {\r\n  margin-bottom: 40px; }\r\n\r\n.mb-50 {\r\n  margin-bottom: 50px; }\r\n\r\n.mb-none-30 {\r\n  margin-bottom: -30px !important; }\r\n\r\n.mb-none-40 {\r\n  margin-bottom: -40px !important; }\r\n\r\n.mb-none-50 {\r\n  margin-bottom: -50px !important; }\r\n\r\n.pt-90 {\r\n  padding-top: 90px; }\r\n\r\n.pb-90 {\r\n  padding-bottom: 90px; }\r\n\r\n.pt-120 {\r\n  padding-top: 120px; }\r\n  @media (max-width: 991px) {\r\n    .pt-120 {\r\n      padding-top: 90px; } }\r\n  @media (max-width: 575px) {\r\n    .pt-120 {\r\n      padding-top: 80px; } }\r\n\r\n.pb-120 {\r\n  padding-bottom: 120px; }\r\n  @media (max-width: 991px) {\r\n    .pb-120 {\r\n      padding-bottom: 90px; } }\r\n  @media (max-width: 575px) {\r\n    .pb-120 {\r\n      padding-bottom: 80px; } }\r\n\r\n.pt-150 {\r\n  padding-top: 150px; }\r\n  @media (max-width: 991px) {\r\n    .pt-150 {\r\n      padding-top: 90px; } }\r\n  @media (max-width: 575px) {\r\n    .pt-150 {\r\n      padding-top: 80px; } }\r\n\r\n.pb-150 {\r\n  padding-bottom: 150px; }\r\n  @media (max-width: 991px) {\r\n    .pb-150 {\r\n      padding-bottom: 90px; } }\r\n  @media (max-width: 575px) {\r\n    .pb-150 {\r\n      padding-bottom: 80px; } }\r\n\r\n.mt-100 {\r\n  margin-top: 100px; }\r\n\r\n.bg_img {\r\n  background-size: cover;\r\n  background-position: center; }\r\n\r\n.bg--one {\r\n  background-color: #0f0232 !important; }\r\n\r\n.bg--two {\r\n  background-color: #02014a !important; }\r\n\r\n.nice-select {\r\n  width: 100%;\r\n  min-height: 50px;\r\n  line-height: 50px;\r\n  border-radius: 3px;\r\n  -webkit-border-radius: 3px;\r\n  -moz-border-radius: 3px;\r\n  -ms-border-radius: 3px;\r\n  -o-border-radius: 3px; }\r\n  .nice-select .list {\r\n    width: 100%;\r\n    box-shadow: 0 2px 15px 0 rgba(0, 0, 0, 0.15); }\r\n\r\n.position-relative {\r\n  z-index: 1; }\r\n\r\n.bg-el {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: -1;\r\n  width: 100%; }\r\n  .bg-el img {\r\n    width: 100%;\r\n    object-fit: cover;\r\n    -o-object-fit: cover;\r\n    object-position: center;\r\n    -o-object-position: center; }\r\n\r\n.section-bg {\r\n  background-color: #0f0232; }\r\n\r\n.section-bg-two {\r\n  background-color: #02014a; }\r\n\r\n.section-header {\r\n  margin-bottom: 70px;\r\n  margin-top: -8px; }\r\n  @media (max-width: 991px) {\r\n    .section-header {\r\n      margin-bottom: 50px; } }\r\n  .section-header p {\r\n    margin-top: 10px;\r\n    font-size: 18px;\r\n    color: #f1f3ff; }\r\n  .section-header.has--bg {\r\n    position: relative;\r\n    z-index: 1; }\r\n    .section-header.has--bg .header-image {\r\n      position: absolute;\r\n      top: 0;\r\n      left: 0;\r\n      width: 100%;\r\n      height: 65px;\r\n      text-align: center;\r\n      z-index: -1;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center; }\r\n      .section-header.has--bg .header-image.style--two {\r\n        left: -50px;\r\n        text-align: left; }\r\n  .section-header.style--two {\r\n    margin-bottom: 30px; }\r\n\r\n.section-sub-title {\r\n  font-size: 24px;\r\n  font-family: \"Josefin Sans\", sans-serif;\r\n  color: #ec038b;\r\n  font-weight: 600;\r\n  margin-bottom: 10px; }\r\n  @media (max-width: 767px) {\r\n    .section-sub-title {\r\n      font-size: 20px; } }\r\n\r\n.section-title {\r\n  font-size: 60px;\r\n  text-transform: capitalize; }\r\n  @media (max-width: 1199px) {\r\n    .section-title {\r\n      font-size: 56px; } }\r\n  @media (max-width: 991px) {\r\n    .section-title {\r\n      font-size: 48px; } }\r\n  @media (max-width: 767px) {\r\n    .section-title {\r\n      font-size: 36px; } }\r\n  @media (max-width: 575px) {\r\n    .section-title {\r\n      font-size: 32px; } }\r\n  .section-title.style--two {\r\n    text-transform: unset; }\r\n\r\n.border-radius-100 {\r\n  border-radius: 50% !important;\r\n  -webkit-border-radius: 50% !important;\r\n  -moz-border-radius: 50% !important;\r\n  -ms-border-radius: 50% !important;\r\n  -o-border-radius: 50% !important; }\r\n\r\n.hover--effect-1 {\r\n  -webkit-transition: all 0.3s;\r\n  -o-transition: all 0.3s;\r\n  transition: all 0.3s; }\r\n  .hover--effect-1:hover {\r\n    -webkit-transform: translateY(-5px) scale(1.05);\r\n    -ms-transform: translateY(-5px) scale(1.05);\r\n    transform: translateY(-5px) scale(1.05); }\r\n\r\n.bold-bottom--border {\r\n  border-bottom: 20px solid #342171; }\r\n\r\n.video-button {\r\n  width: 105px;\r\n  height: 105px;\r\n  color: #ffffff;\r\n  border-radius: 50%;\r\n  -webkit-border-radius: 50%;\r\n  -moz-border-radius: 50%;\r\n  -ms-border-radius: 50%;\r\n  -o-border-radius: 50%;\r\n  display: inline-block;\r\n  background-color: #000033;\r\n  text-align: center;\r\n  line-height: 125px;\r\n  animation: pulse 2000ms linear infinite;\r\n  -webkit-animation: pulse 2000ms linear infinite;\r\n  -moz-animation: pulse 2000ms linear infinite; }\r\n  .video-button::before, .video-button::after {\r\n    position: absolute;\r\n    content: \"\";\r\n    width: 100%;\r\n    height: 100%;\r\n    left: 0;\r\n    top: 0;\r\n    border-radius: 74px;\r\n    background-color: #000033;\r\n    opacity: 0.15;\r\n    z-index: -10; }\r\n  .video-button::before {\r\n    z-index: -10;\r\n    animation: inner-ripple 2000ms linear infinite;\r\n    -webkit-animation: inner-ripple 2000ms linear infinite;\r\n    -moz-animation: inner-ripple 2000ms linear infinite; }\r\n  .video-button::after {\r\n    z-index: -10;\r\n    animation: outer-ripple 2000ms linear infinite;\r\n    -webkit-animation: outer-ripple 2000ms linear infinite;\r\n    -moz-animation: outer-ripple 2000ms linear infinite; }\r\n  .video-button i {\r\n    margin-left: 10px;\r\n    font-size: 36px; }\r\n\r\n@-webkit-keyframes outer-ripple {\r\n  0% {\r\n    -webkit-transform: scale(1);\r\n    -ms-transform: scale(1);\r\n    transform: scale(1);\r\n    opacity: 0.5; }\r\n  80% {\r\n    -webkit-transform: scale(1.5);\r\n    -ms-transform: scale(1.5);\r\n    transform: scale(1.5);\r\n    opacity: 0; }\r\n  100% {\r\n    -webkit-transform: scale(2.5);\r\n    -ms-transform: scale(2.5);\r\n    transform: scale(2.5);\r\n    opacity: 0; } }\r\n@-moz-keyframes outer-ripple {\r\n  0% {\r\n    -webkit-transform: scale(1);\r\n    -ms-transform: scale(1);\r\n    transform: scale(1);\r\n    opacity: 0.5; }\r\n  80% {\r\n    -webkit-transform: scale(1.5);\r\n    -ms-transform: scale(1.5);\r\n    transform: scale(1.5);\r\n    opacity: 0; }\r\n  100% {\r\n    -webkit-transform: scale(2.5);\r\n    -ms-transform: scale(2.5);\r\n    transform: scale(2.5);\r\n    opacity: 0; } }\r\n@-ms-keyframes outer-ripple {\r\n  0% {\r\n    -webkit-transform: scale(1);\r\n    -ms-transform: scale(1);\r\n    transform: scale(1);\r\n    opacity: 0.5; }\r\n  80% {\r\n    -webkit-transform: scale(1.5);\r\n    -ms-transform: scale(1.5);\r\n    transform: scale(1.5);\r\n    opacity: 0; }\r\n  100% {\r\n    -webkit-transform: scale(2.5);\r\n    -ms-transform: scale(2.5);\r\n    transform: scale(2.5);\r\n    opacity: 0; } }\r\n@keyframes outer-ripple {\r\n  0% {\r\n    -webkit-transform: scale(1);\r\n    -ms-transform: scale(1);\r\n    transform: scale(1);\r\n    opacity: 0.5; }\r\n  80% {\r\n    -webkit-transform: scale(1.5);\r\n    -ms-transform: scale(1.5);\r\n    transform: scale(1.5);\r\n    opacity: 0; }\r\n  100% {\r\n    -webkit-transform: scale(2.5);\r\n    -ms-transform: scale(2.5);\r\n    transform: scale(2.5);\r\n    opacity: 0; } }\r\n@-webkit-keyframes inner-ripple {\r\n  0% {\r\n    -webkit-transform: scale(1);\r\n    -ms-transform: scale(1);\r\n    transform: scale(1);\r\n    opacity: 0.5; }\r\n  30% {\r\n    -webkit-transform: scale(1);\r\n    -ms-transform: scale(1);\r\n    transform: scale(1);\r\n    opacity: 0.5; }\r\n  100% {\r\n    -webkit-transform: scale(1.5);\r\n    -ms-transform: scale(1.5);\r\n    transform: scale(1.5);\r\n    opacity: 0; } }\r\n@-moz-keyframes inner-ripple {\r\n  0% {\r\n    -webkit-transform: scale(1);\r\n    -ms-transform: scale(1);\r\n    transform: scale(1);\r\n    opacity: 0.5; }\r\n  30% {\r\n    -webkit-transform: scale(1);\r\n    -ms-transform: scale(1);\r\n    transform: scale(1);\r\n    opacity: 0.5; }\r\n  100% {\r\n    -webkit-transform: scale(1.5);\r\n    -ms-transform: scale(1.5);\r\n    transform: scale(1.5);\r\n    opacity: 0; } }\r\n@-ms-keyframes inner-ripple {\r\n  0% {\r\n    -webkit-transform: scale(1);\r\n    -ms-transform: scale(1);\r\n    transform: scale(1);\r\n    opacity: 0.5; }\r\n  30% {\r\n    -webkit-transform: scale(1);\r\n    -ms-transform: scale(1);\r\n    transform: scale(1);\r\n    opacity: 0.5; }\r\n  100% {\r\n    -webkit-transform: scale(1.5);\r\n    -ms-transform: scale(1.5);\r\n    transform: scale(1.5);\r\n    opacity: 0; } }\r\n@keyframes inner-ripple {\r\n  0% {\r\n    -webkit-transform: scale(1);\r\n    -ms-transform: scale(1);\r\n    transform: scale(1);\r\n    opacity: 0.5; }\r\n  30% {\r\n    -webkit-transform: scale(1);\r\n    -ms-transform: scale(1);\r\n    transform: scale(1);\r\n    opacity: 0.5; }\r\n  100% {\r\n    -webkit-transform: scale(1.5);\r\n    -ms-transform: scale(1.5);\r\n    transform: scale(1.5);\r\n    opacity: 0; } }\r\n.cmn-list {\r\n  margin-top: 20px; }\r\n  .cmn-list li + li {\r\n    margin-top: 15px; }\r\n  .cmn-list li {\r\n    position: relative;\r\n    padding-left: 40px; }\r\n    .cmn-list li::before {\r\n      position: absolute;\r\n      content: \"\";\r\n      top: 5px;\r\n      left: 0;\r\n      width: 20px;\r\n      height: 10px;\r\n      border-left: 1px solid #000033;\r\n      border-bottom: 1px solid #000033;\r\n      -webkit-transform: rotate(-45deg);\r\n      -ms-transform: rotate(-45deg);\r\n      transform: rotate(-45deg); }\r\n\r\n.cmn-list-2 {\r\n  margin-top: 20px; }\r\n  .cmn-list-2 li + li {\r\n    margin-top: 10px; }\r\n  .cmn-list-2 li {\r\n    position: relative;\r\n    padding-left: 45px; }\r\n    .cmn-list-2 li:nth-last-of-type(3n+3)::before {\r\n      border-color: #a22546; }\r\n    .cmn-list-2 li:nth-last-of-type(3n+2)::before {\r\n      border-color: #f7a139; }\r\n    .cmn-list-2 li:nth-last-of-type(3n+1)::before {\r\n      border-color: #3097d1; }\r\n    .cmn-list-2 li::before {\r\n      position: absolute;\r\n      content: \"\";\r\n      top: 5px;\r\n      left: 0;\r\n      width: 20px;\r\n      height: 10px;\r\n      border-left: 1px solid red;\r\n      border-bottom: 1px solid red;\r\n      -webkit-transform: rotate(-45deg);\r\n      -ms-transform: rotate(-45deg);\r\n      transform: rotate(-45deg); }\r\n\r\n.number-list--style {\r\n  list-style-type: decimal;\r\n  padding-left: 15px; }\r\n  .number-list--style li span {\r\n    font-weight: 500;\r\n    color: #000033; }\r\n\r\n.pagination .page-item.active .page-link {\r\n  background-image: -moz-linear-gradient(-30deg, #c165dd 0%, #5c27fe 100%);\r\n  background-image: -webkit-linear-gradient(-30deg, #c165dd 0%, #5c27fe 100%);\r\n  background-image: -ms-linear-gradient(-30deg, #c165dd 0%, #5c27fe 100%);\r\n  box-shadow: 0px 3px 7px 0px rgba(0, 0, 0, 0.35);\r\n  color: #ffffff; }\r\n.pagination .page-item.disabled .page-link {\r\n  color: #8079db; }\r\n.pagination .page-item .page-link {\r\n  width: 42px;\r\n  height: 42px;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n  justify-content: center;\r\n  border: none;\r\n  background-image: none;\r\n  background-color: transparent;\r\n  box-shadow: none;\r\n  color: #7f96dd;\r\n  border-radius: 50%;\r\n  -webkit-border-radius: 50%;\r\n  -moz-border-radius: 50%;\r\n  -ms-border-radius: 50%;\r\n  -o-border-radius: 50%; }\r\n  .pagination .page-item .page-link.prev, .pagination .page-item .page-link.next {\r\n    width: auto;\r\n    height: auto;\r\n    background-image: none;\r\n    background-color: transparent;\r\n    box-shadow: none; }\r\n  .pagination .page-item .page-link.next {\r\n    color: #ffffff; }\r\n\r\n.cmn-accordion .card + .card {\r\n  margin-top: 20px; }\r\n.cmn-accordion .card {\r\n  border: none;\r\n  background-color: #311a83;\r\n  padding-left: 30px;\r\n  padding-right: 30px;\r\n  border-radius: 10px !important;\r\n  -webkit-border-radius: 10px !important;\r\n  -moz-border-radius: 10px !important;\r\n  -ms-border-radius: 10px !important;\r\n  -o-border-radius: 10px !important; }\r\n  @media (max-width: 575px) {\r\n    .cmn-accordion .card {\r\n      padding-left: 15px;\r\n      padding-right: 15px; } }\r\n.cmn-accordion .card-header {\r\n  background-color: #311a83;\r\n  padding: 0;\r\n  margin-bottom: 0 !important;\r\n  border: none; }\r\n  .cmn-accordion .card-header .btn-link {\r\n    padding: 25px 0;\r\n    display: block;\r\n    width: 100%;\r\n    justify-content: space-between;\r\n    cursor: pointer;\r\n    position: relative;\r\n    text-align: left;\r\n    padding-right: 25px;\r\n    font-size: 20px;\r\n    color: #ffffff; }\r\n    @media (max-width: 767px) {\r\n      .cmn-accordion .card-header .btn-link {\r\n        font-size: 18px; } }\r\n    @media (max-width: 575px) {\r\n      .cmn-accordion .card-header .btn-link {\r\n        font-size: 16px; } }\r\n    .cmn-accordion .card-header .btn-link.collapsed::after {\r\n      content: \"\"; }\r\n    .cmn-accordion .card-header .btn-link::after {\r\n      position: absolute;\r\n      content: \"\";\r\n      right: 0;\r\n      top: 25px;\r\n      font-family: \"Line Awesome Free\";\r\n      font-weight: 900;\r\n      width: 40px;\r\n      height: 40px;\r\n      background-image: -moz-linear-gradient(90deg, #3da9f5 0%, #683df5 100%);\r\n      background-image: -webkit-linear-gradient(90deg, #3da9f5 0%, #683df5 100%);\r\n      background-image: -ms-linear-gradient(90deg, #3da9f5 0%, #683df5 100%);\r\n      color: #ffffff;\r\n      font-size: 24px;\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n      -webkit-transition: all 0.3s;\r\n      -o-transition: all 0.3s;\r\n      transition: all 0.3s;\r\n      border-radius: 50%;\r\n      -webkit-border-radius: 50%;\r\n      -moz-border-radius: 50%;\r\n      -ms-border-radius: 50%;\r\n      -o-border-radius: 50%; }\r\n      @media (max-width: 575px) {\r\n        .cmn-accordion .card-header .btn-link::after {\r\n          width: 25px;\r\n          height: 25px;\r\n          font-size: 16px; } }\r\n    .cmn-accordion .card-header .btn-link:focus, .cmn-accordion .card-header .btn-link:hover {\r\n      outline: none;\r\n      text-decoration: none;\r\n      box-shadow: none; }\r\n.cmn-accordion .card-body {\r\n  padding: 30px 0;\r\n  border-top: 1px solid #4129a2; }\r\n  @media (max-width: 575px) {\r\n    .cmn-accordion .card-body p {\r\n      font-size: 16px; } }\r\n\r\n.cmn-tabs {\r\n  border: none; }\r\n  .cmn-tabs li a {\r\n    padding: 14px 35px;\r\n    font-size: 18px;\r\n    font-weight: 600;\r\n    color: #ffffff;\r\n    border-radius: 999px !important;\r\n    -webkit-border-radius: 999px !important;\r\n    -moz-border-radius: 999px !important;\r\n    -ms-border-radius: 999px !important;\r\n    -o-border-radius: 999px !important;\r\n    background-image: -moz-linear-gradient(45deg, #d73df5 0%, #8f3df5 100%);\r\n    background-image: -webkit-linear-gradient(45deg, #d73df5 0%, #8f3df5 100%);\r\n    background-image: -ms-linear-gradient(45deg, #d73df5 0%, #8f3df5 100%);\r\n    box-shadow: -1.113px 7.922px 16px 0px rgba(143, 61, 245, 0.63);\r\n    border: none !important;\r\n    text-transform: capitalize; }\r\n    @media (max-width: 575px) {\r\n      .cmn-tabs li a {\r\n        padding: 12px 25px;\r\n        font-size: 16px; } }\r\n    .cmn-tabs li a.active {\r\n      background-image: -moz-linear-gradient(86deg, #ec038b 0%, #fb6468 44%, #fbb936 100%);\r\n      background-image: -webkit-linear-gradient(86deg, #ec038b 0%, #fb6468 44%, #fbb936 100%);\r\n      background-image: -ms-linear-gradient(86deg, #ec038b 0%, #fb6468 44%, #fbb936 100%);\r\n      box-shadow: 0px 17px 40px 0px rgba(124, 78, 25, 0.35);\r\n      color: #ffffff !important; }\r\n\r\nblockquote p {\r\n  font-weight: 700;\r\n  font-size: 24px;\r\n  color: #ffffff; }\r\n\r\n.page-breadcrumb {\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -ms-flex-wrap: wrap;\r\n  flex-wrap: wrap;\r\n  margin-top: 15px; }\r\n  .page-breadcrumb li {\r\n    color: #ffffff;\r\n    text-transform: capitalize; }\r\n    .page-breadcrumb li::after {\r\n      content: \"-\";\r\n      color: #ffffff;\r\n      margin: 0 5px; }\r\n    .page-breadcrumb li:first-child::before {\r\n      content: \"\";\r\n      font-family: \"Flaticon\";\r\n      color: #ef428c;\r\n      margin-right: 6px; }\r\n    .page-breadcrumb li:last-child::after {\r\n      display: none; }\r\n    .page-breadcrumb li a {\r\n      color: #ffffff;\r\n      text-transform: capitalize; }\r\n\r\n@-webkit-keyframes customBounce {\r\n  0% {\r\n    -webkit-transform: translateY(0);\r\n    -ms-transform: translateY(0);\r\n    transform: translateY(0); }\r\n  25% {\r\n    -webkit-transform: translateY(-10px);\r\n    -ms-transform: translateY(-10px);\r\n    transform: translateY(-10px); }\r\n  50% {\r\n    -webkit-transform: translateY(-20px);\r\n    -ms-transform: translateY(-20px);\r\n    transform: translateY(-20px); }\r\n  75% {\r\n    -webkit-transform: translateY(-10px);\r\n    -ms-transform: translateY(-10px);\r\n    transform: translateY(-10px); }\r\n  100% {\r\n    -webkit-transform: translateY(0);\r\n    -ms-transform: translateY(0);\r\n    transform: translateY(0); } }\r\n@-moz-keyframes customBounce {\r\n  0% {\r\n    -webkit-transform: translateY(0);\r\n    -ms-transform: translateY(0);\r\n    transform: translateY(0); }\r\n  25% {\r\n    -webkit-transform: translateY(-10px);\r\n    -ms-transform: translateY(-10px);\r\n    transform: translateY(-10px); }\r\n  50% {\r\n    -webkit-transform: translateY(-20px);\r\n    -ms-transform: translateY(-20px);\r\n    transform: translateY(-20px); }\r\n  75% {\r\n    -webkit-transform: translateY(-10px);\r\n    -ms-transform: translateY(-10px);\r\n    transform: translateY(-10px); }\r\n  100% {\r\n    -webkit-transform: translateY(0);\r\n    -ms-transform: translateY(0);\r\n    transform: translateY(0); } }\r\n@-ms-keyframes customBounce {\r\n  0% {\r\n    -webkit-transform: translateY(0);\r\n    -ms-transform: translateY(0);\r\n    transform: translateY(0); }\r\n  25% {\r\n    -webkit-transform: translateY(-10px);\r\n    -ms-transform: translateY(-10px);\r\n    transform: translateY(-10px); }\r\n  50% {\r\n    -webkit-transform: translateY(-20px);\r\n    -ms-transform: translateY(-20px);\r\n    transform: translateY(-20px); }\r\n  75% {\r\n    -webkit-transform: translateY(-10px);\r\n    -ms-transform: translateY(-10px);\r\n    transform: translateY(-10px); }\r\n  100% {\r\n    -webkit-transform: translateY(0);\r\n    -ms-transform: translateY(0);\r\n    transform: translateY(0); } }\r\n@keyframes customBounce {\r\n  0% {\r\n    -webkit-transform: translateY(0);\r\n    -ms-transform: translateY(0);\r\n    transform: translateY(0); }\r\n  25% {\r\n    -webkit-transform: translateY(-10px);\r\n    -ms-transform: translateY(-10px);\r\n    transform: translateY(-10px); }\r\n  50% {\r\n    -webkit-transform: translateY(-20px);\r\n    -ms-transform: translateY(-20px);\r\n    transform: translateY(-20px); }\r\n  75% {\r\n    -webkit-transform: translateY(-10px);\r\n    -ms-transform: translateY(-10px);\r\n    transform: translateY(-10px); }\r\n  100% {\r\n    -webkit-transform: translateY(0);\r\n    -ms-transform: translateY(0);\r\n    transform: translateY(0); } }\r\n.scroll-to-top {\r\n  height: 60px;\r\n  width: 60px;\r\n  position: fixed;\r\n  bottom: 5%;\r\n  right: 5%;\r\n  display: none;\r\n  z-index: 99999;\r\n  cursor: pointer;\r\n  text-align: center;\r\n  border-radius: 50%;\r\n  background-image: -moz-linear-gradient(89deg, #5f16a9 0%, #cf15f8 100%);\r\n  background-image: -webkit-linear-gradient(89deg, #5f16a9 0%, #cf15f8 100%);\r\n  background-image: -ms-linear-gradient(89deg, #5f16a9 0%, #cf15f8 100%);\r\n  line-height: 77px;\r\n  box-shadow: 0 5px 15px 0 rgba(0, 0, 0, 0.25); }\r\n  .scroll-to-top .scroll-icon {\r\n    font-size: 36px;\r\n    color: #ffffff;\r\n    display: inline-block; }\r\n\r\n.preloader {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-image: -moz-linear-gradient(89deg, #5f16a9 0%, #cf15f8 100%);\r\n  background-image: -webkit-linear-gradient(89deg, #5f16a9 0%, #cf15f8 100%);\r\n  background-image: -ms-linear-gradient(89deg, #5f16a9 0%, #cf15f8 100%);\r\n  z-index: 999;\r\n  overflow: hidden; }\r\n  .preloader .spinner {\r\n    /* margin: 100px auto; */\r\n    margin: 300px auto;\r\n    width: 40px;\r\n    height: 40px;\r\n    position: relative;\r\n    text-align: center;\r\n    -webkit-animation: sk-rotate 2s infinite linear;\r\n    animation: sk-rotate 2s infinite linear; }\r\n  .preloader .dot1, .preloader .dot2 {\r\n    width: 60%;\r\n    height: 60%;\r\n    display: inline-block;\r\n    position: absolute;\r\n    top: 0;\r\n    background-color: #ffffff;\r\n    border-radius: 100%;\r\n    -webkit-animation: sk-bounce 2s infinite ease-in-out;\r\n    animation: sk-bounce 2s infinite ease-in-out; }\r\n  .preloader .dot2 {\r\n    top: auto;\r\n    bottom: 0;\r\n    -webkit-animation-delay: -1s;\r\n    animation-delay: -1s; }\r\n\r\n@-webkit-keyframes sk-rotate {\r\n  100% {\r\n    -webkit-transform: rotate(360deg);\r\n    -ms-transform: rotate(360deg);\r\n    transform: rotate(360deg); } }\r\n@-moz-keyframes sk-rotate {\r\n  100% {\r\n    -webkit-transform: rotate(360deg);\r\n    -ms-transform: rotate(360deg);\r\n    transform: rotate(360deg); } }\r\n@-ms-keyframes sk-rotate {\r\n  100% {\r\n    -webkit-transform: rotate(360deg);\r\n    -ms-transform: rotate(360deg);\r\n    transform: rotate(360deg); } }\r\n@keyframes sk-rotate {\r\n  100% {\r\n    -webkit-transform: rotate(360deg);\r\n    -ms-transform: rotate(360deg);\r\n    transform: rotate(360deg); } }\r\n@-webkit-keyframes sk-bounce {\r\n  0%, 100% {\r\n    transform: scale(0);\r\n    -webkit-transform: scale(0); }\r\n  50% {\r\n    transform: scale(1);\r\n    -webkit-transform: scale(1); } }\r\n@-moz-keyframes sk-bounce {\r\n  0%, 100% {\r\n    transform: scale(0);\r\n    -webkit-transform: scale(0); }\r\n  50% {\r\n    transform: scale(1);\r\n    -webkit-transform: scale(1); } }\r\n@-ms-keyframes sk-bounce {\r\n  0%, 100% {\r\n    transform: scale(0);\r\n    -webkit-transform: scale(0); }\r\n  50% {\r\n    transform: scale(1);\r\n    -webkit-transform: scale(1); } }\r\n@keyframes sk-bounce {\r\n  0%, 100% {\r\n    transform: scale(0);\r\n    -webkit-transform: scale(0); }\r\n  50% {\r\n    transform: scale(1);\r\n    -webkit-transform: scale(1); } }\r\n/* global css end */\r\nh1 {\r\n  font-size: 62px; }\r\n\r\nh2 {\r\n  font-size: 40px; }\r\n  @media (max-width: 991px) {\r\n    h2 {\r\n      font-size: 36px; } }\r\n  @media (max-width: 575px) {\r\n    h2 {\r\n      font-size: 28px; } }\r\n\r\nh3 {\r\n  font-size: 24px; }\r\n  @media (max-width: 767px) {\r\n    h3 {\r\n      font-size: 22px; } }\r\n\r\nh4 {\r\n  font-size: 22px; }\r\n  @media (max-width: 767px) {\r\n    h4 {\r\n      font-size: 20px; } }\r\n\r\nh5 {\r\n  font-size: 20px; }\r\n  @media (max-width: 767px) {\r\n    h5 {\r\n      font-size: 18px; } }\r\n\r\nh6 {\r\n  font-size: 18px; }\r\n\r\nh1, h2, h3, h4, h5, h6 {\r\n  font-family: \"Josefin Sans\", sans-serif;\r\n  color: #ffffff;\r\n  font-weight: 600;\r\n  margin: 0;\r\n  line-height: 1.3; }\r\n\r\nh1 > a, h2 > a, h3 > a, h4 > a, h5 > a, h6 > a {\r\n  font-family: \"Josefin Sans\", sans-serif;\r\n  color: #ffffff;\r\n  font-weight: 600;\r\n  -webkit-transition: all 0.3s;\r\n  -o-transition: all 0.3s;\r\n  transition: all 0.3s;\r\n  line-height: 1.3; }\r\n\r\np, li, span {\r\n  font-size: 16px;\r\n  color: #c4cbf9;\r\n  line-height: 1.5;\r\n  margin: 0; }\r\n\r\np {\r\n  font-size: 18px; }\r\n\r\na {\r\n  text-decoration: none;\r\n  display: inline-block;\r\n  font-family: \"Josefin Sans\", sans-serif;\r\n  color: #ffffff; }\r\n\r\na:hover {\r\n  text-decoration: none; }\r\n\r\n/* button css start */\r\n.cmn-btn {\r\n  padding: 12px 30px;\r\n  min-width: 230px;\r\n  text-align: center;\r\n  font-size: 22px;\r\n  font-weight: 600;\r\n  text-transform: uppercase;\r\n  border-radius: 999px;\r\n  -webkit-border-radius: 999px;\r\n  -moz-border-radius: 999px;\r\n  -ms-border-radius: 999px;\r\n  -o-border-radius: 999px;\r\n  background-image: -moz-linear-gradient(0deg, #e2906e 0%, #e83a99 100%);\r\n  background-image: -webkit-linear-gradient(0deg, #e2906e 0%, #e83a99 100%);\r\n  background-image: -ms-linear-gradient(0deg, #e2906e 0%, #e83a99 100%);\r\n  box-shadow: 2.419px 9.703px 12.48px 0.52px rgba(232, 58, 153, 0.5);\r\n  -webkit-transition: all 0.3s;\r\n  -o-transition: all 0.3s;\r\n  transition: all 0.3s;\r\n  color: #ffffff; }\r\n  .cmn-btn:hover {\r\n    color: #ffffff;\r\n    background-size: 120%;\r\n    -webkit-transform: translateY(-3px);\r\n    -ms-transform: translateY(-3px);\r\n    transform: translateY(-3px); }\r\n  @media (max-width: 1199px) {\r\n    .cmn-btn {\r\n      font-size: 18px;\r\n      min-width: 200px; } }\r\n  @media (max-width: 991px) {\r\n    .cmn-btn {\r\n      font-size: 16px; } }\r\n  @media (max-width: 767px) {\r\n    .cmn-btn {\r\n      font-size: 14px; } }\r\n  .cmn-btn.style--two {\r\n    background-image: -moz-linear-gradient(-45deg, #c165dd 0%, #5c27fe 100%);\r\n    background-image: -webkit-linear-gradient(-45deg, #c165dd 0%, #5c27fe 100%);\r\n    background-image: -ms-linear-gradient(-45deg, #c165dd 0%, #5c27fe 100%);\r\n    box-shadow: 0px 17px 40px 0px rgba(0, 0, 0, 0.53);\r\n    font-size: 22px; }\r\n    @media (max-width: 1199px) {\r\n      .cmn-btn.style--two {\r\n        font-size: 18px; } }\r\n    @media (max-width: 991px) {\r\n      .cmn-btn.style--two {\r\n        font-size: 16px; } }\r\n    @media (max-width: 767px) {\r\n      .cmn-btn.style--two {\r\n        font-size: 14px; } }\r\n  .cmn-btn.btn--sm {\r\n    padding: 10px 22px;\r\n    font-size: 14px; }\r\n  .cmn-btn.btn--lg {\r\n    padding: 12px 45px; }\r\n\r\n.btn-grp {\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -ms-flex-wrap: wrap;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n  margin-left: -10px;\r\n  margin-right: -10px; }\r\n  .btn-grp *[class*=\"btn\"] {\r\n    margin: 5px 10px;\r\n    align-items: center; }\r\n    .btn-grp *[class*=\"btn\"].d-flex {\r\n      padding: 8px 35px; }\r\n\r\n*[class*=\"btn\"] .btn-sm {\r\n  padding: 6px 20px; }\r\n\r\n.submit-btn {\r\n  padding: 16px 50px;\r\n  background-color: #220a81;\r\n  box-shadow: 0px 4px 30px 15px rgba(0, 162, 255, 0.49), inset 0px 0px 12px 6px #30a8db;\r\n  position: relative;\r\n  z-index: 9;\r\n  text-transform: uppercase;\r\n  color: #ffffff;\r\n  border-radius: 999px;\r\n  -webkit-border-radius: 999px;\r\n  -moz-border-radius: 999px;\r\n  -ms-border-radius: 999px;\r\n  -o-border-radius: 999px; }\r\n  @media (max-width: 575px) {\r\n    .submit-btn {\r\n      font-size: 16px; } }\r\n\r\n/* button css end */\r\n/* form css start */\r\n.form-control {\r\n  color: #ffffff;\r\n  min-height: 50px;\r\n  border-radius: 3px;\r\n  -webkit-border-radius: 3px;\r\n  -moz-border-radius: 3px;\r\n  -ms-border-radius: 3px;\r\n  -o-border-radius: 3px; }\r\n  .form-control.style--two {\r\n    padding: 15px 30px;\r\n    box-shadow: inset 0px 0px 5px 2px #30a8db;\r\n    border: 1px solid rgba(29, 46, 129, 0.3);\r\n    background-color: rgba(38, 13, 76, 0);\r\n    border-radius: 999px;\r\n    -webkit-border-radius: 999px;\r\n    -moz-border-radius: 999px;\r\n    -ms-border-radius: 999px;\r\n    -o-border-radius: 999px;\r\n    color: #ffffff; }\r\n    .form-control.style--two:focus, .form-control.style--two:active {\r\n      box-shadow: inset 0px 0px 10px 2px #30a8db;\r\n      border-color: #30a8db !important; }\r\n  .form-control:focus {\r\n    background-color: transparent;\r\n    box-shadow: none;\r\n    border-color: #c0464d; }\r\n\r\nselect {\r\n  padding: 10px 20px;\r\n  width: 100%;\r\n  border: 1px solid rgba(255, 255, 255, 0.1);\r\n  cursor: pointer;\r\n  color: #c4cbf9;\r\n  background-color: transparent;\r\n  height: 50px;\r\n  border-radius: 4px;\r\n  -webkit-border-radius: 4px;\r\n  -moz-border-radius: 4px;\r\n  -ms-border-radius: 4px;\r\n  -o-border-radius: 4px; }\r\n  select option {\r\n    background-color: #02014a; }\r\n\r\ntextarea {\r\n  min-height: 120px !important;\r\n  resize: none;\r\n  width: 100%; }\r\n\r\nlabel {\r\n  color: #ffffff;\r\n  margin-bottom: 13px; }\r\n\r\ninput, textarea {\r\n  color: #ffffff; }\r\n  input::-webkit-input-placeholder, textarea::-webkit-input-placeholder {\r\n    color: #6180c0 !important; }\r\n  input::-moz-placeholder, textarea::-moz-placeholder {\r\n    color: #6180c0 !important; }\r\n  input:-ms-input-placeholder, textarea:-ms-input-placeholder {\r\n    color: #6180c0 !important; }\r\n  input:-moz-placeholder, textarea:-moz-placeholder {\r\n    color: #6180c0 !important; }\r\n  input:focus, input:active, textarea:focus, textarea:active {\r\n    border-color: #c0464d !important; }\r\n\r\ntextarea {\r\n  border-radius: 20px !important;\r\n  -webkit-border-radius: 20px !important;\r\n  -moz-border-radius: 20px !important;\r\n  -ms-border-radius: 20px !important;\r\n  -o-border-radius: 20px !important; }\r\n\r\ninput:focus,\r\ntextarea:focus,\r\n.nice-select.open {\r\n  border-color: #000033; }\r\n\r\n/* form css end */\r\n/* keyframes css start */\r\n@-webkit-keyframes rifaRounded {\r\n  0% {\r\n    -webkit-transform: translate(-50%, -50%) rotate(0deg);\r\n    -ms-transform: translate(-50%, -50%) rotate(0deg);\r\n    transform: translate(-50%, -50%) rotate(0deg); }\r\n  100% {\r\n    -webkit-transform: translate(-50%, -50%) rotate(360deg);\r\n    -ms-transform: translate(-50%, -50%) rotate(360deg);\r\n    transform: translate(-50%, -50%) rotate(360deg); } }\r\n@-moz-keyframes rifaRounded {\r\n  0% {\r\n    -webkit-transform: translate(-50%, -50%) rotate(0deg);\r\n    -ms-transform: translate(-50%, -50%) rotate(0deg);\r\n    transform: translate(-50%, -50%) rotate(0deg); }\r\n  100% {\r\n    -webkit-transform: translate(-50%, -50%) rotate(360deg);\r\n    -ms-transform: translate(-50%, -50%) rotate(360deg);\r\n    transform: translate(-50%, -50%) rotate(360deg); } }\r\n@-ms-keyframes rifaRounded {\r\n  0% {\r\n    -webkit-transform: translate(-50%, -50%) rotate(0deg);\r\n    -ms-transform: translate(-50%, -50%) rotate(0deg);\r\n    transform: translate(-50%, -50%) rotate(0deg); }\r\n  100% {\r\n    -webkit-transform: translate(-50%, -50%) rotate(360deg);\r\n    -ms-transform: translate(-50%, -50%) rotate(360deg);\r\n    transform: translate(-50%, -50%) rotate(360deg); } }\r\n@keyframes rifaRounded {\r\n  0% {\r\n    -webkit-transform: translate(-50%, -50%) rotate(0deg);\r\n    -ms-transform: translate(-50%, -50%) rotate(0deg);\r\n    transform: translate(-50%, -50%) rotate(0deg); }\r\n  100% {\r\n    -webkit-transform: translate(-50%, -50%) rotate(360deg);\r\n    -ms-transform: translate(-50%, -50%) rotate(360deg);\r\n    transform: translate(-50%, -50%) rotate(360deg); } }\r\n@-webkit-keyframes rifaPulse {\r\n  0% {\r\n    -webkit-transform: translate(-50%, -50%) scale(1);\r\n    -ms-transform: translate(-50%, -50%) scale(1);\r\n    transform: translate(-50%, -50%) scale(1); }\r\n  25% {\r\n    -webkit-transform: translate(-50%, -50%) scale(1.05);\r\n    -ms-transform: translate(-50%, -50%) scale(1.05);\r\n    transform: translate(-50%, -50%) scale(1.05); }\r\n  50% {\r\n    -webkit-transform: translate(-50%, -50%) scale(1.1);\r\n    -ms-transform: translate(-50%, -50%) scale(1.1);\r\n    transform: translate(-50%, -50%) scale(1.1); }\r\n  75% {\r\n    -webkit-transform: translate(-50%, -50%) scale(1.05);\r\n    -ms-transform: translate(-50%, -50%) scale(1.05);\r\n    transform: translate(-50%, -50%) scale(1.05); }\r\n  100% {\r\n    -webkit-transform: translate(-50%, -50%) scale(1);\r\n    -ms-transform: translate(-50%, -50%) scale(1);\r\n    transform: translate(-50%, -50%) scale(1); } }\r\n@-moz-keyframes rifaPulse {\r\n  0% {\r\n    -webkit-transform: translate(-50%, -50%) scale(1);\r\n    -ms-transform: translate(-50%, -50%) scale(1);\r\n    transform: translate(-50%, -50%) scale(1); }\r\n  25% {\r\n    -webkit-transform: translate(-50%, -50%) scale(1.05);\r\n    -ms-transform: translate(-50%, -50%) scale(1.05);\r\n    transform: translate(-50%, -50%) scale(1.05); }\r\n  50% {\r\n    -webkit-transform: translate(-50%, -50%) scale(1.1);\r\n    -ms-transform: translate(-50%, -50%) scale(1.1);\r\n    transform: translate(-50%, -50%) scale(1.1); }\r\n  75% {\r\n    -webkit-transform: translate(-50%, -50%) scale(1.05);\r\n    -ms-transform: translate(-50%, -50%) scale(1.05);\r\n    transform: translate(-50%, -50%) scale(1.05); }\r\n  100% {\r\n    -webkit-transform: translate(-50%, -50%) scale(1);\r\n    -ms-transform: translate(-50%, -50%) scale(1);\r\n    transform: translate(-50%, -50%) scale(1); } }\r\n@-ms-keyframes rifaPulse {\r\n  0% {\r\n    -webkit-transform: translate(-50%, -50%) scale(1);\r\n    -ms-transform: translate(-50%, -50%) scale(1);\r\n    transform: translate(-50%, -50%) scale(1); }\r\n  25% {\r\n    -webkit-transform: translate(-50%, -50%) scale(1.05);\r\n    -ms-transform: translate(-50%, -50%) scale(1.05);\r\n    transform: translate(-50%, -50%) scale(1.05); }\r\n  50% {\r\n    -webkit-transform: translate(-50%, -50%) scale(1.1);\r\n    -ms-transform: translate(-50%, -50%) scale(1.1);\r\n    transform: translate(-50%, -50%) scale(1.1); }\r\n  75% {\r\n    -webkit-transform: translate(-50%, -50%) scale(1.05);\r\n    -ms-transform: translate(-50%, -50%) scale(1.05);\r\n    transform: translate(-50%, -50%) scale(1.05); }\r\n  100% {\r\n    -webkit-transform: translate(-50%, -50%) scale(1);\r\n    -ms-transform: translate(-50%, -50%) scale(1);\r\n    transform: translate(-50%, -50%) scale(1); } }\r\n@keyframes rifaPulse {\r\n  0% {\r\n    -webkit-transform: translate(-50%, -50%) scale(1);\r\n    -ms-transform: translate(-50%, -50%) scale(1);\r\n    transform: translate(-50%, -50%) scale(1); }\r\n  25% {\r\n    -webkit-transform: translate(-50%, -50%) scale(1.05);\r\n    -ms-transform: translate(-50%, -50%) scale(1.05);\r\n    transform: translate(-50%, -50%) scale(1.05); }\r\n  50% {\r\n    -webkit-transform: translate(-50%, -50%) scale(1.1);\r\n    -ms-transform: translate(-50%, -50%) scale(1.1);\r\n    transform: translate(-50%, -50%) scale(1.1); }\r\n  75% {\r\n    -webkit-transform: translate(-50%, -50%) scale(1.05);\r\n    -ms-transform: translate(-50%, -50%) scale(1.05);\r\n    transform: translate(-50%, -50%) scale(1.05); }\r\n  100% {\r\n    -webkit-transform: translate(-50%, -50%) scale(1);\r\n    -ms-transform: translate(-50%, -50%) scale(1);\r\n    transform: translate(-50%, -50%) scale(1); } }\r\n@-webkit-keyframes rifaLight {\r\n  0% {\r\n    opacity: 1; }\r\n  25% {\r\n    opacity: 0.6; }\r\n  50% {\r\n    opacity: 1; }\r\n  75% {\r\n    opacity: 0.6; }\r\n  100% {\r\n    opacity: 1; } }\r\n@-moz-keyframes rifaLight {\r\n  0% {\r\n    opacity: 1; }\r\n  25% {\r\n    opacity: 0.6; }\r\n  50% {\r\n    opacity: 1; }\r\n  75% {\r\n    opacity: 0.6; }\r\n  100% {\r\n    opacity: 1; } }\r\n@-ms-keyframes rifaLight {\r\n  0% {\r\n    opacity: 1; }\r\n  25% {\r\n    opacity: 0.6; }\r\n  50% {\r\n    opacity: 1; }\r\n  75% {\r\n    opacity: 0.6; }\r\n  100% {\r\n    opacity: 1; } }\r\n@keyframes rifaLight {\r\n  0% {\r\n    opacity: 1; }\r\n  25% {\r\n    opacity: 0.6; }\r\n  50% {\r\n    opacity: 1; }\r\n  75% {\r\n    opacity: 0.6; }\r\n  100% {\r\n    opacity: 1; } }\r\n@-webkit-keyframes colorFlow {\r\n  0% {\r\n    background-size: 100%;\r\n    opacity: 1; }\r\n  25% {\r\n    background-size: 150%;\r\n    opacity: 0.5; }\r\n  50% {\r\n    background-size: 300%;\r\n    opacity: 0.9; }\r\n  75% {\r\n    background-size: 150%;\r\n    opacity: 0.5; }\r\n  100% {\r\n    background-size: 100%;\r\n    opacity: 1; } }\r\n@-moz-keyframes colorFlow {\r\n  0% {\r\n    background-size: 100%;\r\n    opacity: 1; }\r\n  25% {\r\n    background-size: 150%;\r\n    opacity: 0.5; }\r\n  50% {\r\n    background-size: 300%;\r\n    opacity: 0.9; }\r\n  75% {\r\n    background-size: 150%;\r\n    opacity: 0.5; }\r\n  100% {\r\n    background-size: 100%;\r\n    opacity: 1; } }\r\n@-ms-keyframes colorFlow {\r\n  0% {\r\n    background-size: 100%;\r\n    opacity: 1; }\r\n  25% {\r\n    background-size: 150%;\r\n    opacity: 0.5; }\r\n  50% {\r\n    background-size: 300%;\r\n    opacity: 0.9; }\r\n  75% {\r\n    background-size: 150%;\r\n    opacity: 0.5; }\r\n  100% {\r\n    background-size: 100%;\r\n    opacity: 1; } }\r\n@keyframes colorFlow {\r\n  0% {\r\n    background-size: 100%;\r\n    opacity: 1; }\r\n  25% {\r\n    background-size: 150%;\r\n    opacity: 0.5; }\r\n  50% {\r\n    background-size: 300%;\r\n    opacity: 0.9; }\r\n  75% {\r\n    background-size: 150%;\r\n    opacity: 0.5; }\r\n  100% {\r\n    background-size: 100%;\r\n    opacity: 1; } }\r\n/* keyframes css end */\r\n/* header start */\r\n.header {\r\n  position: fixed;\r\n  width: 100%;\r\n  left: 0;\r\n  top: 0;\r\n  z-index: 9; }\r\n  .header.menu-fixed {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    z-index: 9; }\r\n    .header.menu-fixed .navbar::before {\r\n      clip-path: polygon(0% 0, 100% 0%, 100% 100%, 0% 100%); }\r\n    .header.menu-fixed .header__top {\r\n      display: none; }\r\n    .header.menu-fixed .header__bottom {\r\n      margin-top: 0;\r\n      box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.1);\r\n      background-color: transparent; }\r\n      .header.menu-fixed .header__bottom .main-menu li a {\r\n        padding: 30px 15px 30px 0; }\r\n        @media (max-width: 1199px) {\r\n          .header.menu-fixed .header__bottom .main-menu li a {\r\n            padding: 10px 0; } }\r\n      .header.menu-fixed .header__bottom .main-menu li .sub-menu li a {\r\n        padding: 8px 20px; }\r\n  .header__bottom {\r\n    margin-top: 20px;\r\n    -webkit-transition: all 0.3s;\r\n    -o-transition: all 0.3s;\r\n    transition: all 0.3s; }\r\n    @media (max-width: 1199px) {\r\n      .header__bottom {\r\n        margin-top: 0; } }\r\n  @media (max-width: 1199px) {\r\n    .header .site-logo img {\r\n      max-width: 150px; } }\r\n  @media (max-width: 1199px) {\r\n    .header .main-menu {\r\n      padding: 15px 0; } }\r\n  .header .main-menu li {\r\n    position: relative; }\r\n    .header .main-menu li.menu_has_children {\r\n      position: relative; }\r\n      .header .main-menu li.menu_has_children.open .sub-menu {\r\n        display: block; }\r\n      @media (max-width: 1199px) {\r\n        .header .main-menu li.menu_has_children > a {\r\n          display: block; } }\r\n      .header .main-menu li.menu_has_children > a::before {\r\n        position: absolute;\r\n        content: \"\";\r\n        font-family: \"Line Awesome Free\";\r\n        font-size: 16px;\r\n        font-weight: 900;\r\n        top: 0;\r\n        right: 0;\r\n        color: #ffffff;\r\n        -webkit-transition: all 0.3s;\r\n        -o-transition: all 0.3s;\r\n        transition: all 0.3s;\r\n        display: none; }\r\n        @media (max-width: 1199px) {\r\n          .header .main-menu li.menu_has_children > a::before {\r\n            display: block;\r\n            top: 9px; } }\r\n      .header .main-menu li.menu_has_children:hover > a::before {\r\n        -webkit-transform: rotate(180deg);\r\n        -ms-transform: rotate(180deg);\r\n        transform: rotate(180deg);\r\n        color: #ffffff; }\r\n    .header .main-menu li a {\r\n      padding: 37px 15px 37px 0;\r\n      text-transform: uppercase;\r\n      font-size: 16px;\r\n      color: #e7e7f4;\r\n      position: relative; }\r\n      @media (max-width: 1199px) {\r\n        .header .main-menu li a {\r\n          padding: 8px 0;\r\n          display: block;\r\n          border-bottom: 1px solid rgba(255, 255, 255, 0.1); } }\r\n      .header .main-menu li a:hover, .header .main-menu li a:focus {\r\n        color: #ff0000; }\r\n    .header .main-menu li .sub-menu {\r\n      position: absolute;\r\n      width: 220px;\r\n      top: 105%;\r\n      left: -20px;\r\n      z-index: 999;\r\n      background-image: -moz-linear-gradient(89deg, #5f16a9 0%, #cf15f8 100%);\r\n      background-image: -webkit-linear-gradient(89deg, #5f16a9 0%, #cf15f8 100%);\r\n      background-image: -ms-linear-gradient(89deg, #5f16a9 0%, #cf15f8 100%);\r\n      padding: 10px 0;\r\n      -webkit-box-shadow: 0px 18px 54px -8px rgba(0, 0, 0, 0.15);\r\n      box-shadow: 0px 18px 54px -8px rgba(0, 0, 0, 0.15);\r\n      border-radius: 5px;\r\n      -webkit-border-radius: 5px;\r\n      -moz-border-radius: 5px;\r\n      -ms-border-radius: 5px;\r\n      -o-border-radius: 5px;\r\n      -webkit-transition: all 0.3s;\r\n      -o-transition: all 0.3s;\r\n      transition: all 0.3s;\r\n      opacity: 0;\r\n      visibility: hidden; }\r\n      @media (max-width: 1199px) {\r\n        .header .main-menu li .sub-menu {\r\n          opacity: 1;\r\n          visibility: visible;\r\n          display: none;\r\n          position: static;\r\n          -webkit-transition: none;\r\n          -o-transition: none;\r\n          transition: none;\r\n          width: 100%;\r\n          padding: 0; } }\r\n      .header .main-menu li .sub-menu li a {\r\n        padding: 8px 20px;\r\n        display: block;\r\n        color: #ffffff;\r\n        font-size: 14px; }\r\n        @media (max-width: 1199px) {\r\n          .header .main-menu li .sub-menu li a {\r\n            font-size: 16px; } }\r\n        .header .main-menu li .sub-menu li a:hover {\r\n          background-color: rgba(38, 174, 97, 0.05);\r\n          color: #ffffff;\r\n          text-decoration: underline; }\r\n      .header .main-menu li .sub-menu li + li {\r\n        margin-left: 0; }\r\n    .header .main-menu li:hover .sub-menu {\r\n      top: 100%;\r\n      opacity: 1;\r\n      visibility: visible; }\r\n  .header .main-menu li + li {\r\n    margin-left: 20px; }\r\n    @media (max-width: 1199px) {\r\n      .header .main-menu li + li {\r\n        margin-left: 0; } }\r\n  .header .nav-right {\r\n    margin-left: 30px; }\r\n    @media (max-width: 1199px) {\r\n      .header .nav-right {\r\n        margin-left: 0; } }\r\n    .header .nav-right a {\r\n      background-color: #ffffff;\r\n      border-radius: 999px;\r\n      -webkit-border-radius: 999px;\r\n      -moz-border-radius: 999px;\r\n      -ms-border-radius: 999px;\r\n      -o-border-radius: 999px;\r\n      color: #544590;\r\n      text-transform: uppercase;\r\n      font-size: 18px;\r\n      box-shadow: 0px 10px 9px 0px rgba(26, 15, 63, 0.26);\r\n      padding: 11px 27px; }\r\n\r\n.navbar {\r\n  position: relative;\r\n  z-index: 1;\r\n  padding: 0 70px;\r\n  filter: drop-shadow(5px 10px 10px rgba(26, 15, 63, 0.71)); }\r\n  @media (max-width: 1199px) {\r\n    .navbar {\r\n      padding: 0 30px; } }\r\n  .navbar::before {\r\n    position: absolute;\r\n    content: \"\";\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    background-image: -moz-linear-gradient(89deg, #5f16a9 0%, #cf15f8 100%);\r\n    background-image: -webkit-linear-gradient(89deg, #5f16a9 0%, #cf15f8 100%);\r\n    background-image: -ms-linear-gradient(89deg, #5f16a9 0%, #cf15f8 100%);\r\n    box-shadow: 0px 12px 29px 0px rgba(26, 15, 63, 0.71);\r\n    z-index: -1;\r\n    clip-path: polygon(6% 0, 100% 0%, 94% 100%, 0% 100%); }\r\n    @media (max-width: 1199px) {\r\n      .navbar::before {\r\n        clip-path: polygon(0% 0, 100% 0%, 100% 100%, 0% 100%); } }\r\n\r\n@media (max-width: 1199px) {\r\n  .navbar-collapse {\r\n    padding: 0 20px 20px;\r\n    /* background-color: #070B28;  */\r\n  } }\r\n@media (max-width: 1199px) {\r\n  .navbar-collapse {\r\n    max-height: 550px;\r\n    overflow: auto; } }\r\n@media (max-width: 767px) {\r\n  .navbar-collapse {\r\n    max-height: 320px;\r\n    overflow: auto; } }\r\n\r\n.navbar-toggler {\r\n  padding: 0;\r\n  border: none; }\r\n  .navbar-toggler:focus {\r\n    outline: none; }\r\n\r\n.menu-toggle {\r\n  margin: 10px 0;\r\n  position: relative;\r\n  display: block;\r\n  width: 35px;\r\n  height: 20px;\r\n  cursor: pointer;\r\n  background: transparent;\r\n  border-top: 2px solid;\r\n  border-bottom: 2px solid;\r\n  color: #000000;\r\n  font-size: 0;\r\n  -webkit-transition: all 0.25s ease-in-out;\r\n  -o-transition: all 0.25s ease-in-out;\r\n  transition: all 0.25s ease-in-out;\r\n  cursor: pointer; }\r\n  @media (max-width: 1199px) {\r\n    .menu-toggle {\r\n      color: #ffffff; } }\r\n\r\n.menu-toggle:before, .menu-toggle:after {\r\n  content: \"\";\r\n  display: block;\r\n  width: 100%;\r\n  height: 2px;\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  background: currentColor;\r\n  -webkit-transform: translate(-50%, -50%);\r\n  -ms-transform: translate(-50%, -50%);\r\n  transform: translate(-50%, -50%);\r\n  transition: -webkit-transform 0.25s ease-in-out;\r\n  -webkit-transition: -webkit-transform 0.25s ease-in-out;\r\n  -o-transition: -webkit-transform 0.25s ease-in-out;\r\n  transition: transform 0.25s ease-in-out;\r\n  -moz-transition: -webkit-transform 0.25s ease-in-out;\r\n  -ms-transition: -webkit-transform 0.25s ease-in-out; }\r\n  @media (max-width: 1199px) {\r\n    .menu-toggle:before, .menu-toggle:after {\r\n      background-color: #ffffff; } }\r\n\r\nspan.is-active {\r\n  border-color: transparent; }\r\n\r\nspan.is-active:before {\r\n  -webkit-transform: translate(-50%, -50%) rotate(45deg);\r\n  -ms-transform: translate(-50%, -50%) rotate(45deg);\r\n  transform: translate(-50%, -50%) rotate(45deg); }\r\n\r\nspan.is-active:after {\r\n  -webkit-transform: translate(-50%, -50%) rotate(-45deg);\r\n  -ms-transform: translate(-50%, -50%) rotate(-45deg);\r\n  transform: translate(-50%, -50%) rotate(-45deg); }\r\n\r\nspan.menu-toggle:hover {\r\n  color: #000000; }\r\n  @media (max-width: 1199px) {\r\n    span.menu-toggle:hover {\r\n      color: #ffffff; } }\r\n\r\nspan.is-active {\r\n  border-color: transparent; }\r\n\r\nspan.is-active:before {\r\n  -webkit-transform: translate(-50%, -50%) rotate(45deg);\r\n  -ms-transform: translate(-50%, -50%) rotate(45deg);\r\n  transform: translate(-50%, -50%) rotate(45deg); }\r\n\r\nspan.is-active:after {\r\n  -webkit-transform: translate(-50%, -50%) rotate(-45deg);\r\n  -ms-transform: translate(-50%, -50%) rotate(-45deg);\r\n  transform: translate(-50%, -50%) rotate(-45deg); }\r\n\r\n/* header end */\r\n/* hero section css start */\r\n.hero {\r\n  padding-top: 245px;\r\n  padding-bottom: 300px;\r\n  position: relative; }\r\n  @media (max-width: 1199px) {\r\n    .hero {\r\n      padding-top: 200px;\r\n      padding-bottom: 190px; } }\r\n  .hero__shape {\r\n    position: absolute;\r\n    bottom: -2px;\r\n    left: 0; }\r\n    .hero__shape img {\r\n      width: 100%; }\r\n  .hero__content p {\r\n    font-size: 24px;\r\n    color: #ffffff; }\r\n    @media (max-width: 1199px) {\r\n      .hero__content p {\r\n        font-size: 18px; } }\r\n    @media (max-width: 767px) {\r\n      .hero__content p {\r\n        font-size: 16px; } }\r\n  .hero__content .cmn-btn {\r\n    margin-top: 40px; }\r\n  .hero__sub-title {\r\n    font-size: 28px;\r\n    color: #f91e68;\r\n    text-transform: uppercase;\r\n    margin-bottom: 10px;\r\n    font-weight: 700; }\r\n    @media (max-width: 1199px) {\r\n      .hero__sub-title {\r\n        font-size: 20px; } }\r\n    @media (max-width: 767px) {\r\n      .hero__sub-title {\r\n        font-size: 18px; } }\r\n    @media (max-width: 480px) {\r\n      .hero__sub-title {\r\n        font-size: 16px; } }\r\n  .hero__title {\r\n    font-size: 80px;\r\n    color: #ffffff;\r\n    text-transform: uppercase;\r\n    font-weight: 700;\r\n    line-height: 1.1; }\r\n    @media (max-width: 1199px) {\r\n      .hero__title {\r\n        font-size: 62px; } }\r\n    @media (max-width: 767px) {\r\n      .hero__title {\r\n        font-size: 48px; } }\r\n    @media (max-width: 480px) {\r\n      .hero__title {\r\n        font-size: 32px; } }\r\n  .hero [class*=\"el-\"] {\r\n    position: absolute; }\r\n    @media (max-width: 1450px) {\r\n      .hero [class*=\"el-\"] img {\r\n        width: 80%; } }\r\n    @media (max-width: 991px) {\r\n      .hero [class*=\"el-\"] img {\r\n        width: 50%; } }\r\n  .hero .el-1 {\r\n    top: 17%;\r\n    left: 42%; }\r\n  .hero .el-2 {\r\n    left: 5%;\r\n    bottom: 33%; }\r\n  .hero .el-3 {\r\n    right: 5%;\r\n    bottom: 14%; }\r\n  .hero .el-4 {\r\n    right: 19%;\r\n    bottom: 12%; }\r\n    @media (max-width: 1199px) {\r\n      .hero .el-4 img {\r\n        width: 50%; } }\r\n    @media (max-width: 991px) {\r\n      .hero .el-4 img {\r\n        width: 40%; } }\r\n  .hero .el-5 {\r\n    top: 26%;\r\n    left: 53%; }\r\n  .hero .el-6 {\r\n    top: 13%;\r\n    left: 6%; }\r\n  .hero .el-7 {\r\n    top: 3%;\r\n    right: 8%; }\r\n  .hero .el-8 {\r\n    top: 26%;\r\n    right: 16%; }\r\n  .hero .el-9 {\r\n    right: 44%;\r\n    bottom: 42%; }\r\n  .hero .el-10 {\r\n    top: 44%;\r\n    right: 35%; }\r\n  .hero .el-11 {\r\n    top: 44%;\r\n    right: 11%; }\r\n\r\n/* hero section css end */\r\n/* inner-hero css start */\r\n.inner-hero {\r\n  padding-top: 225px;\r\n  padding-bottom: 145px;\r\n  position: relative; }\r\n  @media (max-width: 1199px) {\r\n    .inner-hero {\r\n      padding-top: 150px; } }\r\n  .inner-hero .page-title {\r\n    font-size: 80px;\r\n    font-weight: 700; }\r\n    @media (max-width: 1199px) {\r\n      .inner-hero .page-title {\r\n        font-size: 56px; } }\r\n    @media (max-width: 767px) {\r\n      .inner-hero .page-title {\r\n        font-size: 48px; } }\r\n    @media (max-width: 575px) {\r\n      .inner-hero .page-title {\r\n        font-size: 36px; } }\r\n  .inner-hero .shape {\r\n    bottom: -3px;\r\n    left: 0; }\r\n  @media (max-width: 1199px) {\r\n    .inner-hero [class*=\"el\"] img {\r\n      width: 80%; } }\r\n  @media (max-width: 991px) {\r\n    .inner-hero [class*=\"el\"] img {\r\n      width: 50%; } }\r\n  .inner-hero .el-1 {\r\n    left: 13%;\r\n    bottom: 15%; }\r\n  .inner-hero .el-2 {\r\n    left: 31%;\r\n    bottom: 7%; }\r\n  .inner-hero .el-3 {\r\n    left: 47%;\r\n    bottom: 28%; }\r\n  .inner-hero .el-4 {\r\n    right: 21%;\r\n    bottom: 4%; }\r\n  .inner-hero .el-5 {\r\n    right: 12%;\r\n    bottom: 6%; }\r\n  .inner-hero .el-6 {\r\n    top: 6%;\r\n    right: 4%; }\r\n  .inner-hero.style--two {\r\n    padding-top: 300px;\r\n    padding-bottom: 300px; }\r\n    @media (max-width: 1199px) {\r\n      .inner-hero.style--two {\r\n        padding-top: 200px;\r\n        padding-bottom: 200px; } }\r\n  .inner-hero.style--three {\r\n    padding-top: 200px;\r\n    padding-bottom: 80px;\r\n    position: relative; }\r\n    @media (max-width: 1199px) {\r\n      .inner-hero.style--three {\r\n        padding-top: 130px; } }\r\n    .inner-hero.style--three .clip-path-img {\r\n      position: absolute;\r\n      top: 0;\r\n      left: 0;\r\n      width: 100%;\r\n      height: 100%;\r\n      -webkit-clip-path: ellipse(90% 75% at 50% 75%);\r\n      clip-path: ellipse(53% 75% at 50% 75%);\r\n      -webkit-transform: rotate(180deg);\r\n      -ms-transform: rotate(180deg);\r\n      transform: rotate(180deg); }\r\n      @media (max-width: 575px) {\r\n        .inner-hero.style--three .clip-path-img {\r\n          -webkit-clip-path: ellipse(100% 75% at 50% 75%);\r\n          clip-path: ellipse(100% 75% at 50% 75%); } }\r\n      .inner-hero.style--three .clip-path-img::before {\r\n        position: absolute;\r\n        content: \"\";\r\n        top: 0;\r\n        left: 0;\r\n        width: 100%;\r\n        height: 100%;\r\n        opacity: 0.65;\r\n        z-index: 1;\r\n        background: #bdc3c7;\r\n        background: -webkit-linear-gradient(to top, #000033, rgba(0, 0, 0, 0.05));\r\n        background: linear-gradient(to top, #000033, rgba(0, 0, 0, 0.05)); }\r\n      .inner-hero.style--three .clip-path-img img {\r\n        width: 100%;\r\n        height: 100%;\r\n        object-fit: cover;\r\n        -o-object-fit: cover;\r\n        object-position: center;\r\n        -o-object-position: center;\r\n        -webkit-transform: rotate(-180deg);\r\n        -ms-transform: rotate(-180deg);\r\n        transform: rotate(-180deg); }\r\n\r\n.single-game-hero .game-name {\r\n  font-size: 80px;\r\n  text-transform: uppercase;\r\n  text-shadow: 0px 16px 9px rgba(29, 28, 33, 0.34);\r\n  margin-bottom: 15px; }\r\n  @media (max-width: 1199px) {\r\n    .single-game-hero .game-name {\r\n      font-size: 56px; } }\r\n  @media (max-width: 767px) {\r\n    .single-game-hero .game-name {\r\n      font-size: 42px; } }\r\n  @media (max-width: 575px) {\r\n    .single-game-hero .game-name {\r\n      font-size: 36px; } }\r\n@media (max-width: 1199px) {\r\n  .single-game-hero .game-img {\r\n    width: 35%; } }\r\n@media (max-width: 575px) {\r\n  .single-game-hero .game-img {\r\n    width: 50%; } }\r\n\r\n.page-list {\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -ms-flex-wrap: wrap;\r\n  flex-wrap: wrap;\r\n  padding: -3px -8px; }\r\n  .page-list li {\r\n    padding: 3px 8px;\r\n    text-transform: uppercase;\r\n    color: #ffffff; }\r\n    .page-list li:last-child::after {\r\n      display: none; }\r\n    .page-list li::after {\r\n      content: \"\";\r\n      font-family: \"Line Awesome Free\";\r\n      font-weight: 900;\r\n      margin-left: 15px; }\r\n    .page-list li a {\r\n      color: #ffffff; }\r\n\r\n/* inner-hero css end */\r\n/* about us section css start */\r\n.video-btn {\r\n  width: 37px;\r\n  height: 37px;\r\n  color: #ffffff;\r\n  text-align: center;\r\n  line-height: 40px;\r\n  background-image: -moz-linear-gradient(0deg, #e2906e 0%, #e83a99 100%);\r\n  background-image: -webkit-linear-gradient(0deg, #e2906e 0%, #e83a99 100%);\r\n  background-image: -ms-linear-gradient(0deg, #e2906e 0%, #e83a99 100%);\r\n  border-radius: 50%;\r\n  -webkit-border-radius: 50%;\r\n  -moz-border-radius: 50%;\r\n  -ms-border-radius: 50%;\r\n  -o-border-radius: 50%;\r\n  position: relative;\r\n  z-index: 1; }\r\n  .video-btn::before {\r\n    position: absolute;\r\n    content: \"\";\r\n    top: 50%;\r\n    left: 50%;\r\n    width: 57px;\r\n    height: 54px;\r\n    background-image: -moz-linear-gradient(0deg, #e2906e 0%, #e83a99 100%);\r\n    background-image: -webkit-linear-gradient(0deg, #e2906e 0%, #e83a99 100%);\r\n    background-image: -ms-linear-gradient(0deg, #e2906e 0%, #e83a99 100%);\r\n    opacity: 0.6;\r\n    -webkit-transform: translate(-50%, -50%);\r\n    -ms-transform: translate(-50%, -50%);\r\n    transform: translate(-50%, -50%);\r\n    z-index: -1;\r\n    border-radius: 27% 33% 15% 48%/21% 47% 35% 51%;\r\n    -webkit-border-radius: 27% 33% 15% 48%/21% 47% 35% 51%;\r\n    -moz-border-radius: 27% 33% 15% 48%/21% 47% 35% 51%;\r\n    -ms-border-radius: 27% 33% 15% 48%/21% 47% 35% 51%;\r\n    -o-border-radius: 27% 33% 15% 48%/21% 47% 35% 51%;\r\n    animation: flowRubber 5s infinite linear;\r\n    animation-delay: 0.5s; }\r\n  .video-btn::after {\r\n    position: absolute;\r\n    content: \"\";\r\n    top: 50%;\r\n    left: 50%;\r\n    width: 73px;\r\n    height: 74px;\r\n    background-image: -moz-linear-gradient(0deg, #e2906e 0%, #e83a99 100%);\r\n    background-image: -webkit-linear-gradient(0deg, #e2906e 0%, #e83a99 100%);\r\n    background-image: -ms-linear-gradient(0deg, #e2906e 0%, #e83a99 100%);\r\n    opacity: 0.4;\r\n    -webkit-transform: translate(-50%, -50%);\r\n    -ms-transform: translate(-50%, -50%);\r\n    transform: translate(-50%, -50%);\r\n    z-index: -1;\r\n    border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -webkit-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -moz-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -ms-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -o-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    animation: flowRubber 5s infinite linear; }\r\n\r\n@-webkit-keyframes flowRubber {\r\n  0% {\r\n    border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -webkit-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -moz-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -ms-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -o-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%; }\r\n  25% {\r\n    border-radius: 84% 43% 59% 45%/62% 38% 67% 49%;\r\n    -webkit-border-radius: 84% 43% 59% 45%/62% 38% 67% 49%;\r\n    -moz-border-radius: 84% 43% 59% 45%/62% 38% 67% 49%;\r\n    -ms-border-radius: 84% 43% 59% 45%/62% 38% 67% 49%;\r\n    -o-border-radius: 84% 43% 59% 45%/62% 38% 67% 49%; }\r\n  50% {\r\n    border-radius: 69% 70% 59% 86%/80% 77% 67% 49%;\r\n    -webkit-border-radius: 69% 70% 59% 86%/80% 77% 67% 49%;\r\n    -moz-border-radius: 69% 70% 59% 86%/80% 77% 67% 49%;\r\n    -ms-border-radius: 69% 70% 59% 86%/80% 77% 67% 49%;\r\n    -o-border-radius: 69% 70% 59% 86%/80% 77% 67% 49%; }\r\n  75% {\r\n    border-radius: 35% 70% 24% 94%/64% 61% 67% 49%;\r\n    -webkit-border-radius: 35% 70% 24% 94%/64% 61% 67% 49%;\r\n    -moz-border-radius: 35% 70% 24% 94%/64% 61% 67% 49%;\r\n    -ms-border-radius: 35% 70% 24% 94%/64% 61% 67% 49%;\r\n    -o-border-radius: 35% 70% 24% 94%/64% 61% 67% 49%; }\r\n  100% {\r\n    border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -webkit-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -moz-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -ms-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -o-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%; } }\r\n@-moz-keyframes flowRubber {\r\n  0% {\r\n    border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -webkit-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -moz-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -ms-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -o-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%; }\r\n  25% {\r\n    border-radius: 84% 43% 59% 45%/62% 38% 67% 49%;\r\n    -webkit-border-radius: 84% 43% 59% 45%/62% 38% 67% 49%;\r\n    -moz-border-radius: 84% 43% 59% 45%/62% 38% 67% 49%;\r\n    -ms-border-radius: 84% 43% 59% 45%/62% 38% 67% 49%;\r\n    -o-border-radius: 84% 43% 59% 45%/62% 38% 67% 49%; }\r\n  50% {\r\n    border-radius: 69% 70% 59% 86%/80% 77% 67% 49%;\r\n    -webkit-border-radius: 69% 70% 59% 86%/80% 77% 67% 49%;\r\n    -moz-border-radius: 69% 70% 59% 86%/80% 77% 67% 49%;\r\n    -ms-border-radius: 69% 70% 59% 86%/80% 77% 67% 49%;\r\n    -o-border-radius: 69% 70% 59% 86%/80% 77% 67% 49%; }\r\n  75% {\r\n    border-radius: 35% 70% 24% 94%/64% 61% 67% 49%;\r\n    -webkit-border-radius: 35% 70% 24% 94%/64% 61% 67% 49%;\r\n    -moz-border-radius: 35% 70% 24% 94%/64% 61% 67% 49%;\r\n    -ms-border-radius: 35% 70% 24% 94%/64% 61% 67% 49%;\r\n    -o-border-radius: 35% 70% 24% 94%/64% 61% 67% 49%; }\r\n  100% {\r\n    border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -webkit-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -moz-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -ms-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -o-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%; } }\r\n@-ms-keyframes flowRubber {\r\n  0% {\r\n    border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -webkit-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -moz-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -ms-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -o-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%; }\r\n  25% {\r\n    border-radius: 84% 43% 59% 45%/62% 38% 67% 49%;\r\n    -webkit-border-radius: 84% 43% 59% 45%/62% 38% 67% 49%;\r\n    -moz-border-radius: 84% 43% 59% 45%/62% 38% 67% 49%;\r\n    -ms-border-radius: 84% 43% 59% 45%/62% 38% 67% 49%;\r\n    -o-border-radius: 84% 43% 59% 45%/62% 38% 67% 49%; }\r\n  50% {\r\n    border-radius: 69% 70% 59% 86%/80% 77% 67% 49%;\r\n    -webkit-border-radius: 69% 70% 59% 86%/80% 77% 67% 49%;\r\n    -moz-border-radius: 69% 70% 59% 86%/80% 77% 67% 49%;\r\n    -ms-border-radius: 69% 70% 59% 86%/80% 77% 67% 49%;\r\n    -o-border-radius: 69% 70% 59% 86%/80% 77% 67% 49%; }\r\n  75% {\r\n    border-radius: 35% 70% 24% 94%/64% 61% 67% 49%;\r\n    -webkit-border-radius: 35% 70% 24% 94%/64% 61% 67% 49%;\r\n    -moz-border-radius: 35% 70% 24% 94%/64% 61% 67% 49%;\r\n    -ms-border-radius: 35% 70% 24% 94%/64% 61% 67% 49%;\r\n    -o-border-radius: 35% 70% 24% 94%/64% 61% 67% 49%; }\r\n  100% {\r\n    border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -webkit-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -moz-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -ms-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -o-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%; } }\r\n@keyframes flowRubber {\r\n  0% {\r\n    border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -webkit-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -moz-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -ms-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -o-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%; }\r\n  25% {\r\n    border-radius: 84% 43% 59% 45%/62% 38% 67% 49%;\r\n    -webkit-border-radius: 84% 43% 59% 45%/62% 38% 67% 49%;\r\n    -moz-border-radius: 84% 43% 59% 45%/62% 38% 67% 49%;\r\n    -ms-border-radius: 84% 43% 59% 45%/62% 38% 67% 49%;\r\n    -o-border-radius: 84% 43% 59% 45%/62% 38% 67% 49%; }\r\n  50% {\r\n    border-radius: 69% 70% 59% 86%/80% 77% 67% 49%;\r\n    -webkit-border-radius: 69% 70% 59% 86%/80% 77% 67% 49%;\r\n    -moz-border-radius: 69% 70% 59% 86%/80% 77% 67% 49%;\r\n    -ms-border-radius: 69% 70% 59% 86%/80% 77% 67% 49%;\r\n    -o-border-radius: 69% 70% 59% 86%/80% 77% 67% 49%; }\r\n  75% {\r\n    border-radius: 35% 70% 24% 94%/64% 61% 67% 49%;\r\n    -webkit-border-radius: 35% 70% 24% 94%/64% 61% 67% 49%;\r\n    -moz-border-radius: 35% 70% 24% 94%/64% 61% 67% 49%;\r\n    -ms-border-radius: 35% 70% 24% 94%/64% 61% 67% 49%;\r\n    -o-border-radius: 35% 70% 24% 94%/64% 61% 67% 49%; }\r\n  100% {\r\n    border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -webkit-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -moz-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -ms-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%;\r\n    -o-border-radius: 20% 38% 25% 53%/12% 47% 35% 51%; } }\r\n/* about us section css end */\r\n/* game section css start */\r\n[class*=\"game-el\"] {\r\n  position: absolute; }\r\n\r\n.game-el-1 {\r\n  top: 12%;\r\n  left: 0; }\r\n\r\n.game-el-2 {\r\n  left: -40px;\r\n  bottom: 15%; }\r\n\r\n.game-el-3 {\r\n  top: 0;\r\n  right: 0; }\r\n\r\n.game-el-4 {\r\n  bottom: 0;\r\n  right: 0; }\r\n\r\n.game-card__thumb {\r\n  border: 5px solid #620edf;\r\n  box-shadow: 0px 10px 199px 0px rgba(26, 15, 63, 0.5);\r\n  border-radius: 10px;\r\n  -webkit-border-radius: 10px;\r\n  -moz-border-radius: 10px;\r\n  -ms-border-radius: 10px;\r\n  -o-border-radius: 10px;\r\n  overflow: hidden; }\r\n  .game-card__thumb img {\r\n    width: 100%; }\r\n.game-card__content {\r\n  padding: 20px;\r\n  background-color: #5e72eb;\r\n  border-radius: 10px;\r\n  -webkit-border-radius: 10px;\r\n  -moz-border-radius: 10px;\r\n  -ms-border-radius: 10px;\r\n  -o-border-radius: 10px;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -ms-flex-wrap: wrap;\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  margin: -50px 15px 0 15px;\r\n  position: relative; }\r\n  @media (max-width: 575px) {\r\n    .game-card__content {\r\n      justify-content: center; } }\r\n  .game-card__content p, .game-card__content span {\r\n    color: #dee5fc; }\r\n.game-card__details {\r\n  width: 65%; }\r\n  @media (max-width: 575px) {\r\n    .game-card__details {\r\n      width: 100%; } }\r\n.game-card__info {\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -ms-flex-wrap: wrap;\r\n  flex-wrap: wrap; }\r\n  .game-card__info .thumb {\r\n    width: 80px;\r\n    height: 80px;\r\n    box-shadow: 0px 12px 13px 0px rgba(26, 15, 63, 0.46);\r\n    border-radius: 15px;\r\n    -webkit-border-radius: 15px;\r\n    -moz-border-radius: 15px;\r\n    -ms-border-radius: 15px;\r\n    -o-border-radius: 15px;\r\n    overflow: hidden; }\r\n    .game-card__info .thumb img {\r\n      height: 80px;\r\n      object-fit: cover;\r\n      -o-object-fit: cover;\r\n      object-position: center;\r\n      -o-object-position: center; }\r\n  .game-card__info .content {\r\n    width: calc(100% - 80px);\r\n    padding-left: 30px; }\r\n    @media (max-width: 380px) {\r\n      .game-card__info .content {\r\n        width: 100%;\r\n        padding-left: 0;\r\n        margin-top: 20px; } }\r\n    .game-card__info .content p a {\r\n      color: #ffa200; }\r\n.game-card__title {\r\n  text-transform: uppercase;\r\n  margin-bottom: 8px; }\r\n  @media (max-width: 1199px) {\r\n    .game-card__title {\r\n      font-size: 20px; } }\r\n.game-card__ratings {\r\n  margin-top: 8px; }\r\n  @media (max-width: 575px) {\r\n    .game-card__ratings {\r\n      margin-left: 110px; } }\r\n  @media (max-width: 575px) {\r\n    .game-card__ratings {\r\n      margin-left: 0; } }\r\n  .game-card__ratings i {\r\n    font-size: 12px;\r\n    color: #ffa200; }\r\n  .game-card__ratings span {\r\n    color: #ffffff; }\r\n.game-card__action {\r\n  width: 30%; }\r\n  @media (max-width: 575px) {\r\n    .game-card__action {\r\n      width: 100%;\r\n      text-align: center;\r\n      margin-top: 20px; } }\r\n  @media (max-width: 575px) {\r\n    .game-card__action {\r\n      text-align: left; } }\r\n  @media (max-width: 1199px) {\r\n    .game-card__action > p {\r\n      font-size: 14px; } }\r\n.game-card.style--two .game-card__content {\r\n  padding: 40px 30px;\r\n  margin: 0;\r\n  width: 50%;\r\n  margin-left: auto;\r\n  margin-bottom: -120px; }\r\n  @media (max-width: 991px) {\r\n    .game-card.style--two .game-card__content {\r\n      width: 100%;\r\n      margin-bottom: 0; } }\r\n.game-card.style--two .game-card__thumb {\r\n  width: 58%;\r\n  margin-left: 90px; }\r\n  @media (max-width: 767px) {\r\n    .game-card.style--two .game-card__thumb {\r\n      margin: 0 auto;\r\n      width: 75%; } }\r\n  @media (max-width: 440px) {\r\n    .game-card.style--two .game-card__thumb {\r\n      width: 100%; } }\r\n.game-card.style--two .game-card__details {\r\n  width: 100%; }\r\n  .game-card.style--two .game-card__details .content a {\r\n    color: #ffa200; }\r\n  .game-card.style--two .game-card__details .content .game-card__title a {\r\n    color: #ffffff; }\r\n    .game-card.style--two .game-card__details .content .game-card__title a:hover {\r\n      color: #ff0000; }\r\n.game-card.style--two .game-card__ratings {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-top: 18px; }\r\n  .game-card.style--two .game-card__ratings i {\r\n    font-size: 10px; }\r\n  .game-card.style--two .game-card__ratings span {\r\n    font-size: 12px; }\r\n.game-card.style--two .game-card__footer {\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -ms-flex-wrap: wrap;\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  align-items: flex-end;\r\n  margin-top: -65px; }\r\n  @media (max-width: 767px) {\r\n    .game-card.style--two .game-card__footer {\r\n      justify-content: center;\r\n      margin-top: -30px; } }\r\n  .game-card.style--two .game-card__footer .left {\r\n    display: -ms-flexbox;\r\n    display: flex;\r\n    -ms-flex-wrap: wrap;\r\n    flex-wrap: wrap;\r\n    justify-content: space-between;\r\n    width: 40%; }\r\n    @media (max-width: 767px) {\r\n      .game-card.style--two .game-card__footer .left {\r\n        width: 50%; } }\r\n    @media (max-width: 575px) {\r\n      .game-card.style--two .game-card__footer .left {\r\n        width: 75%; } }\r\n    .game-card.style--two .game-card__footer .left .thumb {\r\n      width: calc(100% / 2 - 15px);\r\n      border-radius: 10px;\r\n      -webkit-border-radius: 10px;\r\n      -moz-border-radius: 10px;\r\n      -ms-border-radius: 10px;\r\n      -o-border-radius: 10px;\r\n      overflow: hidden; }\r\n  .game-card.style--two .game-card__footer .right {\r\n    width: 40%;\r\n    display: -ms-flexbox;\r\n    display: flex;\r\n    -ms-flex-wrap: wrap;\r\n    flex-wrap: wrap;\r\n    align-items: center; }\r\n    @media (max-width: 767px) {\r\n      .game-card.style--two .game-card__footer .right {\r\n        width: 100%;\r\n        margin-top: 30px; } }\r\n    .game-card.style--two .game-card__footer .right .caption {\r\n      font-size: 14px;\r\n      color: #ffffff;\r\n      width: 25%;\r\n      border-right: 1px solid #353589; }\r\n      @media (max-width: 440px) {\r\n        .game-card.style--two .game-card__footer .right .caption {\r\n          width: 100%;\r\n          border: none;\r\n          text-align: center; } }\r\n    .game-card.style--two .game-card__footer .right .apps-btn {\r\n      width: 75%;\r\n      text-align: right; }\r\n      @media (max-width: 440px) {\r\n        .game-card.style--two .game-card__footer .right .apps-btn {\r\n          width: 100%;\r\n          text-align: center;\r\n          margin-top: 15px; } }\r\n      .game-card.style--two .game-card__footer .right .apps-btn a + a {\r\n        margin-left: 20px; }\r\n\r\n.single-game + .single-game {\r\n  margin-top: 50px; }\r\n\r\n.single-game:nth-child(even) .game-card.style--two .game-card__content {\r\n  margin-right: auto;\r\n  margin-left: 0; }\r\n.single-game:nth-child(even) .game-card.style--two .game-card__thumb {\r\n  margin-left: auto;\r\n  margin-right: 90px; }\r\n  @media (max-width: 767px) {\r\n    .single-game:nth-child(even) .game-card.style--two .game-card__thumb {\r\n      margin: 0 auto; } }\r\n.single-game:nth-child(even) .game-card.style--two .game-card__footer .left {\r\n  order: 2; }\r\n  @media (max-width: 767px) {\r\n    .single-game:nth-child(even) .game-card.style--two .game-card__footer .left {\r\n      order: -1; } }\r\n.single-game:nth-child(even) .game-card.style--two .game-card__footer .right {\r\n  order: 1; }\r\n\r\n.games-search-wrapper {\r\n  padding: 30px;\r\n  background-color: #311a83;\r\n  border-radius: 30px;\r\n  -webkit-border-radius: 30px;\r\n  -moz-border-radius: 30px;\r\n  -ms-border-radius: 30px;\r\n  -o-border-radius: 30px;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -ms-flex-wrap: wrap;\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  align-items: center; }\r\n  @media (max-width: 991px) {\r\n    .games-search-wrapper {\r\n      align-items: flex-end; } }\r\n  .games-search-wrapper .left {\r\n    width: 60%; }\r\n    @media (max-width: 1199px) {\r\n      .games-search-wrapper .left {\r\n        width: 70%; } }\r\n    @media (max-width: 767px) {\r\n      .games-search-wrapper .left {\r\n        width: 100%; } }\r\n  .games-search-wrapper .right {\r\n    width: 28%; }\r\n    @media (max-width: 767px) {\r\n      .games-search-wrapper .right {\r\n        width: 100%;\r\n        margin-top: 20px; } }\r\n\r\n.games-filter-from .nice-select {\r\n  padding: 0px 30px;\r\n  box-shadow: inset 0px 0px 8px 4px #30a8db;\r\n  border: 1px solid rgba(29, 46, 129, 0.3);\r\n  background-color: rgba(38, 13, 76, 0);\r\n  border-radius: 999px;\r\n  -webkit-border-radius: 999px;\r\n  -moz-border-radius: 999px;\r\n  -ms-border-radius: 999px;\r\n  -o-border-radius: 999px; }\r\n  .games-filter-from .nice-select::after {\r\n    width: 10px;\r\n    height: 10px;\r\n    margin-top: -7px;\r\n    right: 30px; }\r\n  .games-filter-from .nice-select .list {\r\n    background-color: #311a83; }\r\n    .games-filter-from .nice-select .list li.selected, .games-filter-from .nice-select .list li:hover {\r\n      background-color: #211258; }\r\n\r\n.games-search-from {\r\n  position: relative; }\r\n  .games-search-from button {\r\n    position: absolute;\r\n    top: 5px;\r\n    right: 10px;\r\n    background-color: transparent;\r\n    color: #ffffff;\r\n    font-size: 30px;\r\n    -webkit-transform: rotateY(180deg);\r\n    -ms-transform: rotateY(180deg);\r\n    transform: rotateY(180deg); }\r\n\r\n/* game section css end */\r\n/* game features section css start */\r\n.feature-card {\r\n  padding: 30px 30px 60px 30px;\r\n  text-align: center;\r\n  background-size: contain;\r\n  background-repeat: no-repeat; }\r\n  .feature-card:hover .feature-card__icon {\r\n    animation: zoomIn 0.5s linear; }\r\n  .feature-card__icon {\r\n    margin-bottom: 10px; }\r\n\r\n/* game features section css end */\r\n/* single game css start */\r\n.single-game-slider .slick-list {\r\n  margin: -15px; }\r\n.single-game-slider .single-slide {\r\n  border-radius: 20px;\r\n  -webkit-border-radius: 20px;\r\n  -moz-border-radius: 20px;\r\n  -ms-border-radius: 20px;\r\n  -o-border-radius: 20px;\r\n  overflow: hidden;\r\n  margin: 15px;\r\n  box-shadow: 0px 16px 158px 0px rgba(29, 28, 33, 0.004); }\r\n  .single-game-slider .single-slide img {\r\n    width: 100%; }\r\n.single-game-slider .slick-arrow {\r\n  width: 40px;\r\n  height: 40px;\r\n  background-color: #7a5deb;\r\n  box-shadow: 0px 5px 20px 0px rgba(180, 164, 245, 0.5);\r\n  color: #ffffff;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n  align-items: center;\r\n  border-radius: 5px;\r\n  -webkit-border-radius: 5px;\r\n  -moz-border-radius: 5px;\r\n  -ms-border-radius: 5px;\r\n  -o-border-radius: 5px;\r\n  position: absolute;\r\n  top: 50%;\r\n  z-index: 1;\r\n  margin-top: -20px;\r\n  cursor: pointer; }\r\n  .single-game-slider .slick-arrow.prev {\r\n    left: -15px; }\r\n  .single-game-slider .slick-arrow.next {\r\n    right: -15px; }\r\n\r\n/* single game css end */\r\n/* game info css start */\r\n.game-compatible {\r\n  padding: 15px 30px;\r\n  background-color: rgba(5, 5, 67, 0);\r\n  border: 1px solid rgba(98, 14, 223, 0.2);\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -ms-flex-wrap: wrap;\r\n  flex-wrap: wrap;\r\n  border-radius: 5px;\r\n  -webkit-border-radius: 5px;\r\n  -moz-border-radius: 5px;\r\n  -ms-border-radius: 5px;\r\n  -o-border-radius: 5px;\r\n  justify-content: space-between; }\r\n  .game-compatible .single {\r\n    display: -ms-flexbox;\r\n    display: flex;\r\n    -ms-flex-wrap: wrap;\r\n    flex-wrap: wrap;\r\n    align-items: center; }\r\n    .game-compatible .single i {\r\n      color: #4f4f98;\r\n      font-size: 24px;\r\n      line-height: 1; }\r\n    .game-compatible .single .caption {\r\n      color: #ffffff;\r\n      font-size: 18px;\r\n      padding-left: 10px;\r\n      line-height: 1; }\r\n\r\n.game-language {\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -ms-flex-wrap: wrap;\r\n  flex-wrap: wrap;\r\n  margin: -5px -20px; }\r\n  .game-language .single {\r\n    display: -ms-flexbox;\r\n    display: flex;\r\n    -ms-flex-wrap: wrap;\r\n    flex-wrap: wrap;\r\n    align-items: center;\r\n    margin: 5px 20px; }\r\n    .game-language .single span {\r\n      padding-left: 10px; }\r\n\r\n/* game info css end */\r\n/* trailer section css start */\r\n.trailer_bg {\r\n  width: 100%;\r\n  height: 390px;\r\n  /* background-image: url('./assets/images/el-1.png'); */\r\n  background-repeat: no-repeat;\r\n  background-size: cover;\r\n  background-position: center center;\r\n  padding-top: 40px; }\r\n  .trailer_bg .trailer_head {\r\n    max-width: 445px;\r\n    height: 173px;\r\n    margin: auto;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    /* background-image: url('./assets/images/el-1.png'); */\r\n    background-repeat: no-repeat;\r\n    background-size: contain;\r\n    background-position: center; }\r\n    .trailer_bg .trailer_head h1 {\r\n      font-family: \"Josefin Sans\", sans-serif;\r\n      font-size: 60px;\r\n      font-weight: 600;\r\n      line-height: 1.3;\r\n      color: #ffffff;\r\n      margin: 0px; }\r\n\r\n.trailer_container {\r\n  position: relative;\r\n  top: -100px;\r\n  left: 0px;\r\n  right: 0px;\r\n  margin-bottom: 90px; }\r\n  .trailer_container .trailer_items {\r\n    display: none; }\r\n    .trailer_container .trailer_items .trailer_thumbnail {\r\n      max-width: 1110px;\r\n      height: 498px;\r\n      position: relative; }\r\n      .trailer_container .trailer_items .trailer_thumbnail img {\r\n        width: 100%;\r\n        height: 498px;\r\n        border-radius: 30px;\r\n        border: none; }\r\n      .trailer_container .trailer_items .trailer_thumbnail .play_button {\r\n        text-decoration: none;\r\n        display: inline-block;\r\n        width: 155px;\r\n        height: 155px;\r\n        position: absolute;\r\n        top: 50%;\r\n        left: 50%;\r\n        transform: translate(-50%, -50%);\r\n        border: 4px solid #ffffff;\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        border-radius: 50%; }\r\n        .trailer_container .trailer_items .trailer_thumbnail .play_button i {\r\n          font-size: 42px;\r\n          color: #ffffff; }\r\n        .trailer_container .trailer_items .trailer_thumbnail .play_button:hover {\r\n          text-decoration: none;\r\n          color: #ffffff; }\r\n    .trailer_container .trailer_items .trailer_video {\r\n      max-width: 1110px;\r\n      height: 498px;\r\n      display: none; }\r\n      .trailer_container .trailer_items .trailer_video iframe {\r\n        width: 100%;\r\n        height: 100%;\r\n        border-radius: 30px;\r\n        border: none;\r\n        outline: none; }\r\n  .trailer_container .trailer_details {\r\n    padding: 30px;\r\n    background-image: -moz-linear-gradient(89deg, #5f16a9 0%, #cf15f8 100%);\r\n    background-image: -webkit-linear-gradient(89deg, #5f16a9 0%, #cf15f8 100%);\r\n    background-image: -ms-linear-gradient(89deg, #5f16a9 0%, #cf15f8 100%);\r\n    background-image: linear-gradient(89deg, #5f16a9 0%, #cf15f8 100%);\r\n    box-shadow: 0px 12px 43px 0px #301d75;\r\n    border-radius: 20px;\r\n    text-align: center;\r\n    max-width: 300px;\r\n    position: absolute;\r\n    bottom: -130px;\r\n    right: 130px; }\r\n    .trailer_container .trailer_details .game_content {\r\n      display: none; }\r\n    .trailer_container .trailer_details .active {\r\n      display: block; }\r\n    .trailer_container .trailer_details h4 {\r\n      font-family: \"Josefin Sans\", sans-serif;\r\n      font-size: 36px;\r\n      font-weight: 700;\r\n      text-transform: capitalaize;\r\n      color: #ffffff;\r\n      text-align: center; }\r\n    .trailer_container .trailer_details a {\r\n      text-decoration: underline;\r\n      display: inline-block;\r\n      font-family: \"Josefin Sans\", sans-serif;\r\n      font-size: 18px;\r\n      font-weight: 400;\r\n      line-height: 1.5;\r\n      color: #ffffff;\r\n      margin-top: 16px; }\r\n    .trailer_container .trailer_details .prev {\r\n      position: absolute;\r\n      bottom: 30px;\r\n      left: 28px;\r\n      text-decoration: none;\r\n      display: inline-block;\r\n      font-family: \"Josefin Sans\", sans-serif;\r\n      font-size: 18px;\r\n      font-weight: 400;\r\n      line-height: 1.5;\r\n      color: #f91e68;\r\n      cursor: pointer; }\r\n      .trailer_container .trailer_details .prev:hover {\r\n        text-decoration: none;\r\n        color: #f91e68; }\r\n    .trailer_container .trailer_details .next {\r\n      position: absolute;\r\n      bottom: 30px;\r\n      right: 28px;\r\n      text-decoration: none;\r\n      display: inline-block;\r\n      font-family: \"Josefin Sans\", sans-serif;\r\n      font-size: 18px;\r\n      font-weight: 400;\r\n      line-height: 1.5;\r\n      color: #f91e68;\r\n      cursor: pointer; }\r\n      .trailer_container .trailer_details .next:hover {\r\n        text-decoration: none;\r\n        color: #f91e68; }\r\n\r\n@media (max-width: 992px) {\r\n  .trailer_container {\r\n    position: relative;\r\n    left: 0px;\r\n    right: 0px; }\r\n    .trailer_container .trailer_items .trailer_thumbnail {\r\n      width: 100%;\r\n      height: 400px; }\r\n      .trailer_container .trailer_items .trailer_thumbnail .play_button {\r\n        width: 100px;\r\n        height: 100px; }\r\n        .trailer_container .trailer_items .trailer_thumbnail .play_button i {\r\n          font-size: 30px; }\r\n      .trailer_container .trailer_items .trailer_thumbnail img {\r\n        width: 100%;\r\n        height: 400px; }\r\n    .trailer_container .trailer_items .trailer_video {\r\n      width: 100%;\r\n      height: 400px; }\r\n      .trailer_container .trailer_items .trailer_video iframe {\r\n        width: 100%;\r\n        height: 400px; } }\r\n@media (max-width: 768px) {\r\n  .trailer_bg {\r\n    width: 100%;\r\n    height: 300px; }\r\n    .trailer_bg .trailer_head h1 {\r\n      font-size: 48px; }\r\n\r\n  .trailer_container {\r\n    position: relative;\r\n    top: -80px;\r\n    left: 0px;\r\n    right: 0px; }\r\n    .trailer_container .trailer_items .trailer_thumbnail {\r\n      width: 100%;\r\n      height: 300px; }\r\n      .trailer_container .trailer_items .trailer_thumbnail .play_button {\r\n        width: 70px;\r\n        height: 70px; }\r\n        .trailer_container .trailer_items .trailer_thumbnail .play_button i {\r\n          font-size: 18px; }\r\n      .trailer_container .trailer_items .trailer_thumbnail img {\r\n        width: 100%;\r\n        height: 300px;\r\n        border-radius: 8px; }\r\n    .trailer_container .trailer_items .trailer_video {\r\n      width: 100%;\r\n      height: 300px; }\r\n      .trailer_container .trailer_items .trailer_video iframe {\r\n        width: 100%;\r\n        height: 300px;\r\n        border-radius: 8px; }\r\n    .trailer_container .trailer_details {\r\n      position: absolute;\r\n      right: 50px; }\r\n      .trailer_container .trailer_details h4 {\r\n        font-size: 30px; } }\r\n@media (max-width: 425px) {\r\n  .trailer_bg .trailer_head h1 {\r\n    font-size: 36px; }\r\n\r\n  .trailer_container .trailer_items .trailer_thumbnail {\r\n    width: 100%;\r\n    height: 230px; }\r\n    .trailer_container .trailer_items .trailer_thumbnail .play_button {\r\n      width: 50px;\r\n      height: 50px; }\r\n      .trailer_container .trailer_items .trailer_thumbnail .play_button i {\r\n        font-size: 16px; }\r\n    .trailer_container .trailer_items .trailer_thumbnail img {\r\n      width: 100%;\r\n      height: 230px; }\r\n  .trailer_container .trailer_items .trailer_video {\r\n    width: 100%;\r\n    height: 230px; }\r\n    .trailer_container .trailer_items .trailer_video iframe {\r\n      width: 100%;\r\n      height: 230px; }\r\n  .trailer_container .trailer_details {\r\n    max-width: 260px;\r\n    position: absolute;\r\n    right: 20px;\r\n    padding: 30px 15px; }\r\n    .trailer_container .trailer_details h4 {\r\n      font-size: 24px; } }\r\n/*==================Game Trailer Style End=================== */\r\n/* trailer section css end */\r\n/* others games section css start */\r\n.view-all-header {\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -ms-flex-wrap: wrap;\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding-bottom: 10px;\r\n  border-bottom: 1px solid #3e3e96; }\r\n  .view-all-header .title {\r\n    width: calc(100% - 100px); }\r\n  .view-all-header .link {\r\n    width: 100px; }\r\n\r\n.game-small-card {\r\n  text-align: center; }\r\n  .game-small-card__thumb {\r\n    overflow: hidden;\r\n    box-shadow: 0px 12px 13px 0px rgba(26, 15, 63, 0.46);\r\n    border-radius: 15px;\r\n    -webkit-border-radius: 15px;\r\n    -moz-border-radius: 15px;\r\n    -ms-border-radius: 15px;\r\n    -o-border-radius: 15px; }\r\n    .game-small-card__thumb img {\r\n      width: 100%; }\r\n  .game-small-card__content {\r\n    margin-top: 20px; }\r\n\r\n/* others games section css end */\r\n/* about section css start */\r\n.about-obj-1 {\r\n  position: absolute;\r\n  right: 0;\r\n  top: 0; }\r\n\r\n.about-obj-2 {\r\n  position: absolute;\r\n  bottom: 120px;\r\n  left: 0; }\r\n\r\n.about-content .section-header {\r\n  margin-bottom: 15px; }\r\n\r\n.about-thumb {\r\n  position: relative; }\r\n  .about-thumb .image-1 {\r\n    position: relative;\r\n    z-index: 1;\r\n    margin-bottom: 25px;\r\n    animation: customBounce 3s linear infinite; }\r\n  .about-thumb .image-2 {\r\n    position: absolute;\r\n    bottom: 0;\r\n    left: 0; }\r\n\r\n/* about section css end */\r\n/* team section css start */\r\n.team-card {\r\n  text-align: center; }\r\n  .team-card:hover .team-card__thumb .obj {\r\n    width: 100px;\r\n    height: 91px;\r\n    top: 50%;\r\n    left: 50%;\r\n    -webkit-transform: translate(-50%, -50%);\r\n    -ms-transform: translate(-50%, -50%);\r\n    transform: translate(-50%, -50%); }\r\n  .team-card__thumb {\r\n    width: 167px;\r\n    height: 167px;\r\n    border-radius: 100%;\r\n    -webkit-border-radius: 100%;\r\n    -moz-border-radius: 100%;\r\n    -ms-border-radius: 100%;\r\n    -o-border-radius: 100%;\r\n    display: inline-block;\r\n    position: relative; }\r\n    .team-card__thumb .obj {\r\n      position: absolute;\r\n      top: 0;\r\n      left: -23px;\r\n      width: 200px;\r\n      height: 182px;\r\n      z-index: -1;\r\n      -webkit-transition: all 0.5s;\r\n      -o-transition: all 0.5s;\r\n      transition: all 0.5s; }\r\n  .team-card__content {\r\n    margin-top: 50px; }\r\n    .team-card__content .name {\r\n      text-transform: capitalize; }\r\n    .team-card__content .designation {\r\n      color: #22b868; }\r\n\r\n/* team section css end */\r\n/* overview section css start */\r\n.overview-card {\r\n  padding: 30px;\r\n  background-color: rgba(255, 255, 255, 0.102);\r\n  box-shadow: 1.045px 9.945px 35px 0px rgba(20, 25, 96, 0.79);\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -ms-flex-wrap: wrap;\r\n  flex-wrap: wrap;\r\n  align-items: center;\r\n  border-radius: 20px;\r\n  -webkit-border-radius: 20px;\r\n  -moz-border-radius: 20px;\r\n  -ms-border-radius: 20px;\r\n  -o-border-radius: 20px; }\r\n  .overview-card__icon {\r\n    width: 100px;\r\n    height: 100px; }\r\n  .overview-card__content {\r\n    width: calc(100% - 125px);\r\n    padding-left: 20px; }\r\n    .overview-card__content p {\r\n      text-transform: uppercase;\r\n      color: #00ffff;\r\n      margin-top: 6px; }\r\n      @media (max-width: 1199px) {\r\n        .overview-card__content p {\r\n          font-size: 16px; } }\r\n  .overview-card__number {\r\n    font-size: 36px; }\r\n    @media (max-width: 1199px) {\r\n      .overview-card__number {\r\n        font-size: 32px; } }\r\n  .overview-card.style--two {\r\n    background-color: rgba(62, 60, 184, 0.702);\r\n    box-shadow: 1.045px 9.945px 35px 0px rgba(20, 25, 96, 0.79); }\r\n\r\n.testimonial-slider {\r\n  margin-top: 200px; }\r\n  .testimonial-slider .slick-list {\r\n    margin: -75px; }\r\n  .testimonial-slider .slick-arrow {\r\n    width: 40px;\r\n    height: 40px;\r\n    background-color: #7a5deb;\r\n    box-shadow: 0px 5px 20px 0px rgba(180, 164, 245, 0.5);\r\n    color: #ffffff;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n    align-items: center;\r\n    border-radius: 5px;\r\n    -webkit-border-radius: 5px;\r\n    -moz-border-radius: 5px;\r\n    -ms-border-radius: 5px;\r\n    -o-border-radius: 5px;\r\n    position: absolute;\r\n    top: 50%;\r\n    z-index: 1;\r\n    margin-top: -20px;\r\n    cursor: pointer; }\r\n    @media (max-width: 575px) {\r\n      .testimonial-slider .slick-arrow {\r\n        display: none; } }\r\n    .testimonial-slider .slick-arrow.prev {\r\n      left: -20px; }\r\n    .testimonial-slider .slick-arrow.next {\r\n      right: -20px; }\r\n\r\n.testimonial-single {\r\n  text-align: center;\r\n  padding: 40px 110px;\r\n  background-image: -moz-linear-gradient(89deg, #5f16a9 0%, #cf15f8 100%);\r\n  background-image: -webkit-linear-gradient(89deg, #5f16a9 0%, #cf15f8 100%);\r\n  background-image: -ms-linear-gradient(89deg, #5f16a9 0%, #cf15f8 100%);\r\n  box-shadow: 0px 12px 43px 0px rgba(48, 29, 117, 0.96);\r\n  border-radius: 20px;\r\n  -webkit-border-radius: 20px;\r\n  -moz-border-radius: 20px;\r\n  -ms-border-radius: 20px;\r\n  -o-border-radius: 20px;\r\n  position: relative;\r\n  margin: 75px; }\r\n  @media (max-width: 767px) {\r\n    .testimonial-single {\r\n      padding: 40px; } }\r\n  .testimonial-single::before {\r\n    position: absolute;\r\n    content: \"\";\r\n    top: -75px;\r\n    left: 30px;\r\n    color: #ffffff;\r\n    font-size: 110px;\r\n    font-family: \"Line Awesome Free\";\r\n    font-weight: 900; }\r\n    @media (max-width: 575px) {\r\n      .testimonial-single::before {\r\n        font-size: 72px;\r\n        top: -25px; } }\r\n    @media (max-width: 380px) {\r\n      .testimonial-single::before {\r\n        top: -35px;\r\n        left: 15px;\r\n        font-size: 56px; } }\r\n  .testimonial-single::after {\r\n    position: absolute;\r\n    content: \"\";\r\n    bottom: -75px;\r\n    right: 30px;\r\n    color: #ffffff;\r\n    font-size: 110px;\r\n    font-family: \"Line Awesome Free\";\r\n    font-weight: 900; }\r\n    @media (max-width: 575px) {\r\n      .testimonial-single::after {\r\n        font-size: 72px;\r\n        bottom: -25px; } }\r\n    @media (max-width: 380px) {\r\n      .testimonial-single::after {\r\n        bottom: -35px;\r\n        right: 15px;\r\n        font-size: 56px; } }\r\n  .testimonial-single__thumb {\r\n    width: 150px;\r\n    height: 150px;\r\n    background: #800080;\r\n    background: -webkit-linear-gradient(to bottom, #c065dd, #5d28fe);\r\n    background: linear-gradient(to bottom, #c065dd, #5d28fe);\r\n    box-shadow: 0px 13px 4px 0px rgba(36, 25, 76, 0.01);\r\n    border-radius: 50%;\r\n    -webkit-border-radius: 50%;\r\n    -moz-border-radius: 50%;\r\n    -ms-border-radius: 50%;\r\n    -o-border-radius: 50%;\r\n    overflow: hidden;\r\n    display: inline-block;\r\n    position: relative;\r\n    padding: 4px;\r\n    margin-top: -115px; }\r\n    @media (max-width: 380px) {\r\n      .testimonial-single__thumb {\r\n        width: 110px;\r\n        height: 110px; } }\r\n  .testimonial-single__content {\r\n    margin-top: 30px; }\r\n    .testimonial-single__content p {\r\n      font-size: 28px;\r\n      color: #eae5fe; }\r\n      @media (max-width: 991px) {\r\n        .testimonial-single__content p {\r\n          font-size: 20px; } }\r\n  .testimonial-single .designation {\r\n    font-size: 24px;\r\n    font-weight: 600;\r\n    margin-top: 30px; }\r\n  .testimonial-single .ratings {\r\n    margin-top: 10px; }\r\n    .testimonial-single .ratings i {\r\n      color: #ffa200;\r\n      font-size: 14px; }\r\n\r\n/* overview section css end */\r\n/* blog section css start */\r\n.post-card {\r\n  padding: 10px;\r\n  background-color: #785ce7;\r\n  border-radius: 10px;\r\n  -webkit-border-radius: 10px;\r\n  -moz-border-radius: 10px;\r\n  -ms-border-radius: 10px;\r\n  -o-border-radius: 10px; }\r\n  .post-card__thumb {\r\n    max-height: 185px;\r\n    overflow: hidden;\r\n    border-radius: 10px;\r\n    -webkit-border-radius: 10px;\r\n    -moz-border-radius: 10px;\r\n    -ms-border-radius: 10px;\r\n    -o-border-radius: 10px; }\r\n    .post-card__thumb img {\r\n      width: 100%; }\r\n  .post-card__content {\r\n    padding: 20px;\r\n    position: relative; }\r\n    .post-card__content .date {\r\n      font-size: 16px;\r\n      color: #2dc3c3;\r\n      margin-bottom: 5px; }\r\n    .post-card__content .post-type {\r\n      position: absolute;\r\n      top: -20px;\r\n      right: 30px;\r\n      width: 40px;\r\n      height: 40px;\r\n      text-align: center;\r\n      line-height: 44px;\r\n      font-size: 24px;\r\n      border-radius: 50%;\r\n      -webkit-border-radius: 50%;\r\n      -moz-border-radius: 50%;\r\n      -ms-border-radius: 50%;\r\n      -o-border-radius: 50%;\r\n      background-image: -moz-linear-gradient(-45deg, #c165dd 0%, #5c27fe 100%);\r\n      background-image: -webkit-linear-gradient(-45deg, #c165dd 0%, #5c27fe 100%);\r\n      background-image: -ms-linear-gradient(-45deg, #c165dd 0%, #5c27fe 100%);\r\n      box-shadow: 0px 1px 6px 0px rgba(40, 7, 169, 0.38); }\r\n  .post-card.style--two {\r\n    background-color: transparent;\r\n    border-radius: 0;\r\n    -webkit-border-radius: 0;\r\n    -moz-border-radius: 0;\r\n    -ms-border-radius: 0;\r\n    -o-border-radius: 0;\r\n    padding: 0; }\r\n    .post-card.style--two .post-card__thumb {\r\n      border-radius: 0;\r\n      -webkit-border-radius: 0;\r\n      -moz-border-radius: 0;\r\n      -ms-border-radius: 0;\r\n      -o-border-radius: 0;\r\n      max-height: 445px; }\r\n    .post-card.style--two .post-card__content {\r\n      margin-left: 30px;\r\n      margin-right: 30px;\r\n      margin-top: -100px;\r\n      padding: 30px;\r\n      background-color: #160351; }\r\n      @media (max-width: 575px) {\r\n        .post-card.style--two .post-card__content {\r\n          margin-left: 15px;\r\n          margin-right: 15px;\r\n          margin-top: -50px; } }\r\n    .post-card.style--two .post-card__title {\r\n      font-size: 35px; }\r\n      @media (max-width: 767px) {\r\n        .post-card.style--two .post-card__title {\r\n          font-size: 28px; } }\r\n      @media (max-width: 575px) {\r\n        .post-card.style--two .post-card__title {\r\n          font-size: 24px; } }\r\n    .post-card.style--two .time {\r\n      color: #766ee6;\r\n      margin-top: 20px; }\r\n  .post-card.style--three {\r\n    background-color: transparent;\r\n    border-radius: 0;\r\n    -webkit-border-radius: 0;\r\n    -moz-border-radius: 0;\r\n    -ms-border-radius: 0;\r\n    -o-border-radius: 0;\r\n    padding: 0; }\r\n    .post-card.style--three .post-card__thumb {\r\n      border-radius: 0;\r\n      -webkit-border-radius: 0;\r\n      -moz-border-radius: 0;\r\n      -ms-border-radius: 0;\r\n      -o-border-radius: 0;\r\n      max-height: 620px; }\r\n    .post-card.style--three .post-card__content {\r\n      margin: -140px 135px 0;\r\n      padding: 30px;\r\n      background-color: #160351; }\r\n      @media (max-width: 991px) {\r\n        .post-card.style--three .post-card__content {\r\n          margin: -100px 50px 0; } }\r\n      @media (max-width: 991px) {\r\n        .post-card.style--three .post-card__content {\r\n          margin: -50px 15px 0; } }\r\n    .post-card.style--three .post-card__title {\r\n      font-size: 35px; }\r\n      @media (max-width: 767px) {\r\n        .post-card.style--three .post-card__title {\r\n          font-size: 28px; } }\r\n      @media (max-width: 575px) {\r\n        .post-card.style--three .post-card__title {\r\n          font-size: 24px; } }\r\n    .post-card.style--three .time {\r\n      color: #766ee6;\r\n      margin-top: 20px; }\r\n\r\n.post-author {\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -ms-flex-wrap: wrap;\r\n  flex-wrap: wrap;\r\n  align-items: center; }\r\n  .post-author__thumb {\r\n    width: 30px;\r\n    height: 30px;\r\n    border-radius: 50px;\r\n    -webkit-border-radius: 50px;\r\n    -moz-border-radius: 50px;\r\n    -ms-border-radius: 50px;\r\n    -o-border-radius: 50px;\r\n    overflow: hidden; }\r\n  .post-author__name {\r\n    color: #ffffff;\r\n    width: calc(100% - 30px);\r\n    padding-left: 15px; }\r\n\r\n.blog-slider .slick-arrow {\r\n  position: absolute;\r\n  top: 50%;\r\n  margin-top: -20px;\r\n  width: 40px;\r\n  height: 40px;\r\n  text-align: center;\r\n  line-height: 45px;\r\n  color: #ffffff;\r\n  font-size: 28px;\r\n  border-radius: 5px;\r\n  -webkit-border-radius: 5px;\r\n  -moz-border-radius: 5px;\r\n  -ms-border-radius: 5px;\r\n  -o-border-radius: 5px;\r\n  background-image: -moz-linear-gradient(0deg, #e2906e 0%, #e83a99 100%);\r\n  background-image: -webkit-linear-gradient(0deg, #e2906e 0%, #e83a99 100%);\r\n  background-image: -ms-linear-gradient(0deg, #e2906e 0%, #e83a99 100%);\r\n  cursor: pointer;\r\n  z-index: 1; }\r\n  .blog-slider .slick-arrow.prev {\r\n    left: -20px; }\r\n    @media (max-width: 575px) {\r\n      .blog-slider .slick-arrow.prev {\r\n        left: 0; } }\r\n  .blog-slider .slick-arrow.next {\r\n    right: -20px; }\r\n    @media (max-width: 575px) {\r\n      .blog-slider .slick-arrow.next {\r\n        right: 0; } }\r\n.blog-slider .slick-list {\r\n  margin: -15px; }\r\n.blog-slider .post-card {\r\n  margin: 15px; }\r\n\r\n/* blog section css end */\r\n/* blog details section css start */\r\n.blog-details {\r\n  margin-top: -165px; }\r\n  .blog-details__header {\r\n    padding: 80px 95px;\r\n    background-color: #160351;\r\n    border-radius: 20px;\r\n    -webkit-border-radius: 20px;\r\n    -moz-border-radius: 20px;\r\n    -ms-border-radius: 20px;\r\n    -o-border-radius: 20px; }\r\n    @media (max-width: 991px) {\r\n      .blog-details__header {\r\n        padding: 50px 30px; } }\r\n  .blog-details__title {\r\n    font-size: 60px;\r\n    text-align: center; }\r\n    @media (max-width: 1199px) {\r\n      .blog-details__title {\r\n        font-size: 48px; } }\r\n    @media (max-width: 991px) {\r\n      .blog-details__title {\r\n        font-size: 36px; } }\r\n    @media (max-width: 767px) {\r\n      .blog-details__title {\r\n        font-size: 28px; } }\r\n  .blog-details .meta-post {\r\n    display: -ms-flexbox;\r\n    display: flex;\r\n    -ms-flex-wrap: wrap;\r\n    flex-wrap: wrap;\r\n    align-items: center;\r\n    margin: -3px -12px; }\r\n    @media (max-width: 991px) {\r\n      .blog-details .meta-post {\r\n        justify-content: center; } }\r\n    .blog-details .meta-post li {\r\n      margin: 3px 12px; }\r\n    .blog-details .meta-post .post-author__thumb {\r\n      width: 40px;\r\n      height: 40px; }\r\n    .blog-details .meta-post .post-author__name {\r\n      width: calc(100% - 40px);\r\n      padding-left: 5px; }\r\n  .blog-details .social-links {\r\n    align-items: center;\r\n    justify-content: flex-end; }\r\n    @media (max-width: 991px) {\r\n      .blog-details .social-links {\r\n        justify-content: center;\r\n        margin-top: 15px; } }\r\n    .blog-details .social-links li span {\r\n      color: #ffffff; }\r\n    .blog-details .social-links li a {\r\n      width: 44px;\r\n      height: 44px;\r\n      line-height: 46px;\r\n      background-color: rgba(104, 61, 245, 0);\r\n      border: 1px solid rgba(255, 255, 255, 0.2); }\r\n      .blog-details .social-links li a:hover {\r\n        background-image: -moz-linear-gradient(86deg, #ec038b 0%, #fb6468 44%, #fbb936 100%);\r\n        background-image: -webkit-linear-gradient(86deg, #ec038b 0%, #fb6468 44%, #fbb936 100%);\r\n        background-image: -ms-linear-gradient(86deg, #ec038b 0%, #fb6468 44%, #fbb936 100%);\r\n        box-shadow: 0px 17px 40px 0px rgba(124, 78, 25, 0.35); }\r\n  .blog-details__content p {\r\n    margin-top: 20px; }\r\n    .blog-details__content p a {\r\n      color: #6157f9;\r\n      text-decoration: underline; }\r\n  .blog-details__content blockquote {\r\n    margin-top: 40px;\r\n    padding: 30px 45px;\r\n    background-color: #05023b;\r\n    border-radius: 20px;\r\n    -webkit-border-radius: 20px;\r\n    -moz-border-radius: 20px;\r\n    -ms-border-radius: 20px;\r\n    -o-border-radius: 20px; }\r\n    @media (max-width: 575px) {\r\n      .blog-details__content blockquote {\r\n        padding: 20px; } }\r\n    .blog-details__content blockquote p {\r\n      margin-top: 0;\r\n      font-size: 28px;\r\n      color: #d2ddfb;\r\n      font-weight: 400; }\r\n      @media (max-width: 991px) {\r\n        .blog-details__content blockquote p {\r\n          font-size: 20px; } }\r\n      @media (max-width: 575px) {\r\n        .blog-details__content blockquote p {\r\n          font-size: 16px; } }\r\n  .blog-details__content .img-holder img {\r\n    border-radius: 20px;\r\n    -webkit-border-radius: 20px;\r\n    -moz-border-radius: 20px;\r\n    -ms-border-radius: 20px;\r\n    -o-border-radius: 20px; }\r\n  .blog-details__content .video-thumb {\r\n    position: relative;\r\n    overflow: hidden;\r\n    border-radius: 10px;\r\n    -webkit-border-radius: 10px;\r\n    -moz-border-radius: 10px;\r\n    -ms-border-radius: 10px;\r\n    -o-border-radius: 10px; }\r\n    .blog-details__content .video-thumb__icon {\r\n      position: absolute;\r\n      top: 50%;\r\n      left: 50%;\r\n      width: 120px;\r\n      height: 120px;\r\n      margin-top: -60px;\r\n      margin-left: -60px;\r\n      background-color: rgba(114, 56, 196, 0.8);\r\n      color: #ffffff;\r\n      font-size: 52px;\r\n      display: flex;\r\n      justify-content: center;\r\n      align-items: center;\r\n      box-shadow: 0px 27px 103px 0px rgba(7, 11, 78, 0.67);\r\n      border-radius: 50%;\r\n      -webkit-border-radius: 50%;\r\n      -moz-border-radius: 50%;\r\n      -ms-border-radius: 50%;\r\n      -o-border-radius: 50%;\r\n      animation: pulse 1.5s infinite; }\r\n      @media (max-width: 480px) {\r\n        .blog-details__content .video-thumb__icon {\r\n          width: 100px;\r\n          height: 100px;\r\n          margin-top: -50px;\r\n          margin-left: -50px;\r\n          font-size: 36px; } }\r\n  .blog-details__sub-title {\r\n    font-size: 36px;\r\n    margin-bottom: 20px; }\r\n    @media (max-width: 991px) {\r\n      .blog-details__sub-title {\r\n        font-size: 28px; } }\r\n    @media (max-width: 767px) {\r\n      .blog-details__sub-title {\r\n        font-size: 24px; } }\r\n\r\n.border-bottom {\r\n  border-color: #223172 !important; }\r\n\r\n.author {\r\n  padding: 50px;\r\n  background-color: #160351;\r\n  border-radius: 20px;\r\n  -webkit-border-radius: 20px;\r\n  -moz-border-radius: 20px;\r\n  -ms-border-radius: 20px;\r\n  -o-border-radius: 20px;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -ms-flex-wrap: wrap;\r\n  flex-wrap: wrap; }\r\n  @media (max-width: 575px) {\r\n    .author {\r\n      padding: 30px; } }\r\n  .author__thumb {\r\n    width: 125px;\r\n    height: 125px;\r\n    overflow: hidden;\r\n    border-radius: 50%;\r\n    -webkit-border-radius: 50%;\r\n    -moz-border-radius: 50%;\r\n    -ms-border-radius: 50%;\r\n    -o-border-radius: 50%; }\r\n    .author__thumb img {\r\n      width: inherit;\r\n      height: inherit;\r\n      object-fit: cover;\r\n      -o-object-fit: cover;\r\n      object-position: center;\r\n      -o-object-position: center; }\r\n  .author__content {\r\n    width: calc(100% - 125px);\r\n    padding-left: 30px; }\r\n    @media (max-width: 767px) {\r\n      .author__content {\r\n        width: 100%;\r\n        padding-left: 0;\r\n        margin-top: 30px; } }\r\n    .author__content .top-title {\r\n      font-family: \"Josefin Sans\", sans-serif;\r\n      font-weight: 600;\r\n      color: #ec038b;\r\n      font-size: 24px;\r\n      margin-bottom: 15px; }\r\n    .author__content .name {\r\n      font-size: 36px; }\r\n\r\n/* blog details section css end */\r\n/* contact section start */\r\n.contact-left-el {\r\n  position: absolute;\r\n  bottom: 10%;\r\n  left: 0;\r\n  z-index: -1; }\r\n  @media (max-width: 991px) {\r\n    .contact-left-el {\r\n      bottom: 40%; } }\r\n  @media (max-width: 1450px) {\r\n    .contact-left-el img {\r\n      width: 80%; } }\r\n\r\n.contact-right-el {\r\n  position: absolute;\r\n  bottom: 5%;\r\n  right: 0;\r\n  z-index: -1;\r\n  text-align: right; }\r\n  @media (max-width: 991px) {\r\n    .contact-right-el {\r\n      bottom: 20%; } }\r\n  @media (max-width: 1450px) {\r\n    .contact-right-el img {\r\n      width: 80%; } }\r\n  @media (max-width: 1199px) {\r\n    .contact-right-el img {\r\n      width: 60%; } }\r\n\r\n.contact-form-wrapper {\r\n  padding: 30px;\r\n  background-color: #311a83;\r\n  border: 1px solid rgba(255, 255, 255, 0.1);\r\n  border-radius: 20px;\r\n  -webkit-border-radius: 20px;\r\n  -moz-border-radius: 20px;\r\n  -ms-border-radius: 20px;\r\n  -o-border-radius: 20px; }\r\n\r\n.contact-item {\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -ms-flex-wrap: wrap;\r\n  flex-wrap: wrap; }\r\n  .contact-item__icon {\r\n    width: 78px;\r\n    height: 78px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    background-color: rgba(70, 15, 122, 0.6);\r\n    box-shadow: 0px 4px 10px 8px rgba(0, 162, 255, 0.15), inset 0px 0px 12px 6px #a816e5;\r\n    border-radius: 50%;\r\n    -webkit-border-radius: 50%;\r\n    -moz-border-radius: 50%;\r\n    -ms-border-radius: 50%;\r\n    -o-border-radius: 50%; }\r\n    .contact-item__icon i {\r\n      color: #00a2ff;\r\n      font-size: 36px;\r\n      text-shadow: 0 0 30px rgba(0, 162, 255, 0.5); }\r\n  .contact-item__content {\r\n    width: calc(100% - 78px);\r\n    padding-left: 20px; }\r\n    .contact-item__content .title {\r\n      margin-bottom: 5px; }\r\n    .contact-item__content a {\r\n      color: #c4cbf9; }\r\n\r\n/* contact section end */\r\n/* faq section css start */\r\n.faq-wrapper {\r\n  padding: 120px 190px 0;\r\n  background-color: #000033;\r\n  box-shadow: 2.581px -36.91px 29px 0px rgba(0, 0, 51, 0.29);\r\n  border-radius: 10px;\r\n  -webkit-border-radius: 10px;\r\n  -moz-border-radius: 10px;\r\n  -ms-border-radius: 10px;\r\n  -o-border-radius: 10px; }\r\n  @media (max-width: 1199px) {\r\n    .faq-wrapper {\r\n      padding: 50px 90px 0; } }\r\n  @media (max-width: 991px) {\r\n    .faq-wrapper {\r\n      padding: 50px 0; } }\r\n\r\n/* faq section css end */\r\n/* account area css start */\r\n.account-area {\r\n  padding: 50px 30px;\r\n  background-color: #ffffff;\r\n  border-radius: 20px;\r\n  -webkit-border-radius: 20px;\r\n  -moz-border-radius: 20px;\r\n  -ms-border-radius: 20px;\r\n  -o-border-radius: 20px; }\r\n  .account-area .title {\r\n    text-align: center;\r\n    font-size: 28px;\r\n    color: #3b368c; }\r\n  .account-area p {\r\n    color: #54518d; }\r\n    .account-area p a {\r\n      color: #0403c4; }\r\n\r\n.account-form label {\r\n  color: #3b368c;\r\n  font-weight: 600;\r\n  font-size: 18px; }\r\n.account-form .form-control {\r\n  height: 60px;\r\n  padding: 10px 30px;\r\n  background-color: #f6f6fa; }\r\n.account-form .cmn-btn {\r\n  border-radius: 10px;\r\n  -webkit-border-radius: 10px;\r\n  -moz-border-radius: 10px;\r\n  -ms-border-radius: 10px;\r\n  -o-border-radius: 10px;\r\n  font-weight: 400;\r\n  text-transform: none;\r\n  font-size: 18px; }\r\n.account-form .form-group {\r\n  margin-bottom: 20px; }\r\n\r\n.or-devider {\r\n  position: relative;\r\n  text-align: center;\r\n  z-index: 1; }\r\n  .or-devider::before {\r\n    position: absolute;\r\n    content: \"\";\r\n    top: 12px;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 1px;\r\n    background-color: #dddce7;\r\n    z-index: -1; }\r\n  .or-devider span {\r\n    color: #3b368c;\r\n    font-weight: 700;\r\n    background-color: #ffffff;\r\n    padding: 2px 15px; }\r\n\r\n.google-btn {\r\n  padding: 10px 25px;\r\n  border: 1px solid #aa9dd0;\r\n  display: inline-flex;\r\n  align-items: center;\r\n  border-radius: 999px;\r\n  -webkit-border-radius: 999px;\r\n  -moz-border-radius: 999px;\r\n  -ms-border-radius: 999px;\r\n  -o-border-radius: 999px;\r\n  color: #54518d; }\r\n  .google-btn img {\r\n    margin-right: 10px; }\r\n\r\n/* account area css end */\r\n/* sidebar css start */\r\n.widget + .widget {\r\n  margin-top: 30px; }\r\n\r\n.widget {\r\n  padding: 30px;\r\n  background-color: #160351;\r\n  box-shadow: 0px 10px 5px 0px rgba(119, 123, 146, 0.02);\r\n  border-radius: 10px;\r\n  -webkit-border-radius: 10px;\r\n  -moz-border-radius: 10px;\r\n  -ms-border-radius: 10px;\r\n  -o-border-radius: 10px; }\r\n  .widget__title {\r\n    margin-bottom: 20px; }\r\n  .widget__search .form-control {\r\n    padding: 0 15px 5px 0;\r\n    border: none;\r\n    font-size: 14px;\r\n    border-bottom: 1px solid #361d81;\r\n    background-color: transparent;\r\n    border-radius: 0;\r\n    -webkit-border-radius: 0;\r\n    -moz-border-radius: 0;\r\n    -ms-border-radius: 0;\r\n    -o-border-radius: 0;\r\n    color: #ffffff; }\r\n  .widget__search button {\r\n    margin-top: 40px;\r\n    padding: 10px 35px;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    align-items: center;\r\n    justify-content: center;\r\n    color: #ffffff;\r\n    text-transform: uppercase;\r\n    font-size: 16px;\r\n    background-image: -moz-linear-gradient(-30deg, #c165dd 0%, #5c27fe 100%);\r\n    background-image: -webkit-linear-gradient(-30deg, #c165dd 0%, #5c27fe 100%);\r\n    background-image: -ms-linear-gradient(-30deg, #c165dd 0%, #5c27fe 100%);\r\n    box-shadow: 0px 3px 7px 0px rgba(0, 0, 0, 0.35);\r\n    border-radius: 999px;\r\n    -webkit-border-radius: 999px;\r\n    -moz-border-radius: 999px;\r\n    -ms-border-radius: 999px;\r\n    -o-border-radius: 999px; }\r\n    .widget__search button i {\r\n      margin-right: 8px; }\r\n  .widget .social-links li a {\r\n    color: #9794c2; }\r\n    .widget .social-links li a:hover {\r\n      background-image: -moz-linear-gradient(-30deg, #c165dd 0%, #5c27fe 100%);\r\n      background-image: -webkit-linear-gradient(-30deg, #c165dd 0%, #5c27fe 100%);\r\n      background-image: -ms-linear-gradient(-30deg, #c165dd 0%, #5c27fe 100%);\r\n      box-shadow: 0px 3px 7px 0px rgba(0, 0, 0, 0.35);\r\n      border-color: #7235f7;\r\n      color: #ffffff; }\r\n\r\n.post-item__content {\r\n  margin-top: 25px; }\r\n.post-item__meta {\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -ms-flex-wrap: wrap;\r\n  flex-wrap: wrap;\r\n  margin: -3px -10px; }\r\n  .post-item__meta li {\r\n    margin: 3px 10px;\r\n    font-size: 14px; }\r\n    .post-item__meta li i {\r\n      font-size: 12px;\r\n      background: #4380e4;\r\n      background: -webkit-linear-gradient(0deg, #e2906e 0%, #e83a99 100%);\r\n      background: linear-gradient(0deg, #e2906e 0%, #e83a99 100%);\r\n      -webkit-background-clip: text;\r\n      -webkit-text-fill-color: transparent;\r\n      text-shadow: 0.624px 2.934px 2px rgba(232, 58, 153, 0.3); }\r\n    .post-item__meta li span {\r\n      color: #8984dc; }\r\n\r\n.small-post-slider .slick-arrow {\r\n  position: absolute;\r\n  top: -45px;\r\n  right: 0;\r\n  width: 20px;\r\n  height: 20px;\r\n  background-image: -moz-linear-gradient(-30deg, #c165dd 0%, #5c27fe 100%);\r\n  background-image: -webkit-linear-gradient(-30deg, #c165dd 0%, #5c27fe 100%);\r\n  background-image: -ms-linear-gradient(-30deg, #c165dd 0%, #5c27fe 100%);\r\n  box-shadow: 0px 3px 7px 0px rgba(0, 0, 0, 0.35);\r\n  color: #ffffff;\r\n  border-radius: 50%;\r\n  -webkit-border-radius: 50%;\r\n  -moz-border-radius: 50%;\r\n  -ms-border-radius: 50%;\r\n  -o-border-radius: 50%;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  text-align: center;\r\n  line-height: 25px; }\r\n  .small-post-slider .slick-arrow.prev {\r\n    right: 30px; }\r\n\r\n.category-list li:first-child a {\r\n  padding-top: 0; }\r\n.category-list li:last-child a {\r\n  padding-bottom: 0;\r\n  border-bottom: none; }\r\n.category-list li a {\r\n  padding: 10px 0;\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -ms-flex-wrap: wrap;\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  border-bottom: 1px dashed #32148c; }\r\n.category-list li .value {\r\n  width: 50px;\r\n  text-align: right; }\r\n\r\n.tags-list a {\r\n  font-size: 14px;\r\n  color: #c1bdf4;\r\n  padding: 12px 30px;\r\n  border: 1px solid #4c3789;\r\n  border-radius: 999px;\r\n  -webkit-border-radius: 999px;\r\n  -moz-border-radius: 999px;\r\n  -ms-border-radius: 999px;\r\n  -o-border-radius: 999px;\r\n  margin: 6px 3px; }\r\n  .tags-list a:hover {\r\n    background-image: -moz-linear-gradient(-30deg, #c165dd 0%, #5c27fe 100%);\r\n    background-image: -webkit-linear-gradient(-30deg, #c165dd 0%, #5c27fe 100%);\r\n    background-image: -ms-linear-gradient(-30deg, #c165dd 0%, #5c27fe 100%);\r\n    box-shadow: 0px 3px 7px 0px rgba(0, 0, 0, 0.35);\r\n    color: #ffffff; }\r\n\r\n/* sidebar css end */\r\n/* footer section css start */\r\n.footer-section {\r\n  position: relative;\r\n  padding-top: 250px; }\r\n  @media (max-width: 991px) {\r\n    .footer-section {\r\n      background-size: contain;\r\n      background-repeat: no-repeat;\r\n      background-position-y: top;\r\n      padding-top: 150px; } }\r\n\r\n.bg-shape--top {\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  text-align: center;\r\n  margin-top: -3px; }\r\n\r\n.subscribe-area {\r\n  padding: 50px 50px;\r\n  background-color: rgba(255, 255, 255, 0.2);\r\n  box-shadow: 0px 5px 8px 0px rgba(26, 15, 63, 0.08);\r\n  border-radius: 20px;\r\n  -webkit-border-radius: 20px;\r\n  -moz-border-radius: 20px;\r\n  -ms-border-radius: 20px;\r\n  -o-border-radius: 20px;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: flex-end;\r\n  position: relative; }\r\n  @media (max-width: 991px) {\r\n    .subscribe-area {\r\n      background-color: rgba(255, 255, 255, 0.5);\r\n      padding: 30px; } }\r\n  .subscribe-area .obj {\r\n    position: absolute;\r\n    top: -90px;\r\n    left: 0;\r\n    animation: customBounce 3s linear infinite; }\r\n    @media (max-width: 1199px) {\r\n      .subscribe-area .obj {\r\n        top: -30px; } }\r\n    @media (max-width: 991px) {\r\n      .subscribe-area .obj {\r\n        display: none; } }\r\n    @media (max-width: 1199px) {\r\n      .subscribe-area .obj img {\r\n        width: 80%; } }\r\n  .subscribe-area .subscribe-content {\r\n    width: 50%; }\r\n    @media (max-width: 991px) {\r\n      .subscribe-area .subscribe-content {\r\n        width: 100%; } }\r\n    .subscribe-area .subscribe-content .title {\r\n      font-size: 36px;\r\n      color: #1d2e82; \r\n    }\r\n      @media (max-width: 767px) {\r\n        .subscribe-area .subscribe-content .title {\r\n          font-size: 32px; } }\r\n      @media (max-width: 575px) {\r\n        .subscribe-area .subscribe-content .title {\r\n          font-size: 24px; } }\r\n    .subscribe-area .subscribe-content p {\r\n      color: #151f7a; \r\n    }\r\n  .subscribe-area .subscribe-form {\r\n    display: -ms-flexbox;\r\n    display: flex;\r\n    -ms-flex-wrap: wrap;\r\n    flex-wrap: wrap;\r\n    margin-right: -45px;\r\n    margin-top: 30px; }\r\n    @media (max-width: 575px) {\r\n      .subscribe-area .subscribe-form {\r\n        margin-right: 0; } }\r\n    .subscribe-area .subscribe-form input {\r\n      border-radius: 999px;\r\n      -webkit-border-radius: 999px;\r\n      -moz-border-radius: 999px;\r\n      -ms-border-radius: 999px;\r\n      -o-border-radius: 999px;\r\n      width: calc(100% - 160px);\r\n      min-height: 60px;\r\n      padding-left: 25px;\r\n      padding-right: 40px;\r\n      background-color: rgba(38, 13, 76, 0);\r\n      -moz-box-shadow: inset 0 0 15px 7px #6b38f6;\r\n      -webkit-box-shadow: inset 0 0 15px 7px #6b38f6;\r\n      box-shadow: inset 0 0 15px 7px #6b38f6;\r\n      border: none;\r\n      color: #363636; }\r\n      @media (max-width: 991px) {\r\n        .subscribe-area .subscribe-form input {\r\n          background-color: #f0d2ba; } }\r\n      @media (max-width: 575px) {\r\n        .subscribe-area .subscribe-form input {\r\n          width: 100%; } }\r\n    .subscribe-area .subscribe-form button {\r\n      background-image: -moz-linear-gradient(-45deg, #c165dd 0%, #5c27fe 100%);\r\n      background-image: -webkit-linear-gradient(-45deg, #c165dd 0%, #5c27fe 100%);\r\n      background-image: -ms-linear-gradient(-45deg, #c165dd 0%, #5c27fe 100%);\r\n      box-shadow: 0px 17px 40px 0px rgba(0, 0, 0, 0.53);\r\n      color: #ffffff;\r\n      width: 160px;\r\n      border-radius: 999px;\r\n      -webkit-border-radius: 999px;\r\n      -moz-border-radius: 999px;\r\n      -ms-border-radius: 999px;\r\n      -o-border-radius: 999px;\r\n      margin-left: -45px; }\r\n      @media (max-width: 575px) {\r\n        .subscribe-area .subscribe-form button {\r\n          margin-left: 0;\r\n          min-height: 55px;\r\n          width: 100%;\r\n          margin-top: 15px; } }\r\n\r\n.footer-top {\r\n  padding-top: 300px;\r\n  padding-bottom: 110px; }\r\n  @media (max-width: 1199px) {\r\n    .footer-top {\r\n      padding-top: 180px; } }\r\n  @media (max-width: 991px) {\r\n    .footer-top {\r\n      padding-top: 80px;\r\n      padding-bottom: 60px; } }\r\n\r\n.footer-widget__title {\r\n  margin-bottom: 25px; }\r\n\r\n.short-links li + li {\r\n  margin-top: 15px; }\r\n.short-links li a {\r\n  font-size: 18px; }\r\n\r\n.footer-bottom {\r\n  padding-bottom: 30px; }\r\n\r\n.copy-right-text a {\r\n  color: #ec038b; }\r\n\r\n.social-links {\r\n  display: -ms-flexbox;\r\n  display: flex;\r\n  -ms-flex-wrap: wrap;\r\n  flex-wrap: wrap;\r\n  margin: -3px -7px; }\r\n  .social-links li {\r\n    margin: 3px 7px; }\r\n    .social-links li a {\r\n      width: 44px;\r\n      height: 44px;\r\n      background-color: rgba(255, 255, 255, 0);\r\n      border: 1px solid rgba(117, 54, 246, 0.52);\r\n      text-align: center;\r\n      line-height: 46px;\r\n      border-radius: 50%;\r\n      -webkit-border-radius: 50%;\r\n      -moz-border-radius: 50%;\r\n      -ms-border-radius: 50%;\r\n      -o-border-radius: 50%; }\r\n      @media (max-width: 575px) {\r\n        .social-links li a {\r\n          width: 35px;\r\n          height: 35px;\r\n          line-height: 35px; } }\r\n      .social-links li a:hover {\r\n        background-image: -moz-linear-gradient(89deg, #5f16a9 0%, #cf15f8 100%);\r\n        background-image: -webkit-linear-gradient(89deg, #5f16a9 0%, #cf15f8 100%);\r\n        background-image: -ms-linear-gradient(89deg, #5f16a9 0%, #cf15f8 100%);\r\n        box-shadow: 0px 4px 9px 0px rgba(103, 22, 175, 0.71);\r\n        color: #ffffff;\r\n        border-color: #7216b6; }\r\n\r\n/* footer section css end */\r\n\r\n/*# sourceMappingURL=main.css.map */\r\n\r\n "],"sourceRoot":""}]);
// Exports
/* harmony default export */ __webpack_exports__["default"] = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./node_modules/next/dist/compiled/webpack/harmony-module.js":
/*!*******************************************!*\
  !*** (webpack)/webpack/harmony-module.js ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* WEBPACK VAR INJECTION */(function(__dirname) {module.exports =
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 931:
/***/ (function(module) {

module.exports = function(originalModule) {
	if (!originalModule.webpackPolyfill) {
		var module = Object.create(originalModule);
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		Object.defineProperty(module, "exports", {
			enumerable: true
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __nccwpck_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		var threw = true;
/******/ 		try {
/******/ 			__webpack_modules__[moduleId](module, module.exports, __nccwpck_require__);
/******/ 			threw = false;
/******/ 		} finally {
/******/ 			if(threw) delete __webpack_module_cache__[moduleId];
/******/ 		}
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat */
/******/ 	
/******/ 	__nccwpck_require__.ab = __dirname + "/";/************************************************************************/
/******/ 	// module exports must be returned from runtime so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	return __nccwpck_require__(931);
/******/ })()
;
/* WEBPACK VAR INJECTION */}.call(this, "/"))

/***/ }),

/***/ "./node_modules/next/dist/compiled/webpack/module.js":
/*!***********************************!*\
  !*** (webpack)/webpack/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* WEBPACK VAR INJECTION */(function(__dirname) {module.exports =
/******/ (function() { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 880:
/***/ (function(module) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __nccwpck_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		if(__webpack_module_cache__[moduleId]) {
/******/ 			return __webpack_module_cache__[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		var threw = true;
/******/ 		try {
/******/ 			__webpack_modules__[moduleId](module, module.exports, __nccwpck_require__);
/******/ 			threw = false;
/******/ 		} finally {
/******/ 			if(threw) delete __webpack_module_cache__[moduleId];
/******/ 		}
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat */
/******/ 	
/******/ 	__nccwpck_require__.ab = __dirname + "/";/************************************************************************/
/******/ 	// module exports must be returned from runtime so entry inlining is disabled
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	return __nccwpck_require__(880);
/******/ })()
;
/* WEBPACK VAR INJECTION */}.call(this, "/"))

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/amp-context.js":
/*!***************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/amp-context.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {

exports.__esModule = true;
exports.AmpStateContext = void 0;

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "./node_modules/react/index.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var AmpStateContext = /*#__PURE__*/_react["default"].createContext({});

exports.AmpStateContext = AmpStateContext;

if (true) {
  AmpStateContext.displayName = 'AmpStateContext';
}

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../compiled/webpack/module.js */ "./node_modules/next/dist/compiled/webpack/module.js")(module)))

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/amp.js":
/*!*******************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/amp.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {

var _s = $RefreshSig$();

exports.__esModule = true;
exports.isInAmpMode = isInAmpMode;
exports.useAmp = useAmp;

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "./node_modules/react/index.js"));

var _ampContext = __webpack_require__(/*! ./amp-context */ "./node_modules/next/dist/next-server/lib/amp-context.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function isInAmpMode() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$ampFirst = _ref.ampFirst,
      ampFirst = _ref$ampFirst === void 0 ? false : _ref$ampFirst,
      _ref$hybrid = _ref.hybrid,
      hybrid = _ref$hybrid === void 0 ? false : _ref$hybrid,
      _ref$hasQuery = _ref.hasQuery,
      hasQuery = _ref$hasQuery === void 0 ? false : _ref$hasQuery;

  return ampFirst || hybrid && hasQuery;
}

function useAmp() {
  _s();

  // Don't assign the context value to a variable to save bytes
  return isInAmpMode(_react["default"].useContext(_ampContext.AmpStateContext));
}

_s(useAmp, "gDsCjeeItUuvgOWf1v4qoK9RF6k=");

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../compiled/webpack/module.js */ "./node_modules/next/dist/compiled/webpack/module.js")(module)))

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/head-manager-context.js":
/*!************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/head-manager-context.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {

exports.__esModule = true;
exports.HeadManagerContext = void 0;

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "./node_modules/react/index.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var HeadManagerContext = /*#__PURE__*/_react["default"].createContext({});

exports.HeadManagerContext = HeadManagerContext;

if (true) {
  HeadManagerContext.displayName = 'HeadManagerContext';
}

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../compiled/webpack/module.js */ "./node_modules/next/dist/compiled/webpack/module.js")(module)))

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/head.js":
/*!********************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/head.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {

var _defineProperty = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/defineProperty */ "./node_modules/next/node_modules/@babel/runtime/helpers/defineProperty.js");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

exports.__esModule = true;
exports.defaultHead = defaultHead;
exports["default"] = void 0;

var _react = _interopRequireWildcard(__webpack_require__(/*! react */ "./node_modules/react/index.js"));

var _sideEffect = _interopRequireDefault(__webpack_require__(/*! ./side-effect */ "./node_modules/next/dist/next-server/lib/side-effect.js"));

var _ampContext = __webpack_require__(/*! ./amp-context */ "./node_modules/next/dist/next-server/lib/amp-context.js");

var _headManagerContext = __webpack_require__(/*! ./head-manager-context */ "./node_modules/next/dist/next-server/lib/head-manager-context.js");

var _amp = __webpack_require__(/*! ./amp */ "./node_modules/next/dist/next-server/lib/amp.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

function defaultHead() {
  var inAmpMode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  var head = [/*#__PURE__*/_react["default"].createElement("meta", {
    charSet: "utf-8"
  })];

  if (!inAmpMode) {
    head.push( /*#__PURE__*/_react["default"].createElement("meta", {
      name: "viewport",
      content: "width=device-width"
    }));
  }

  return head;
}

function onlyReactElement(list, child) {
  // React children can be "string" or "number" in this case we ignore them for backwards compat
  if (typeof child === 'string' || typeof child === 'number') {
    return list;
  } // Adds support for React.Fragment


  if (child.type === _react["default"].Fragment) {
    return list.concat(_react["default"].Children.toArray(child.props.children).reduce(function (fragmentList, fragmentChild) {
      if (typeof fragmentChild === 'string' || typeof fragmentChild === 'number') {
        return fragmentList;
      }

      return fragmentList.concat(fragmentChild);
    }, []));
  }

  return list.concat(child);
}

var METATYPES = ['name', 'httpEquiv', 'charSet', 'itemProp'];
/*
returns a function for filtering head child elements
which shouldn't be duplicated, like <title/>
Also adds support for deduplicated `key` properties
*/

function unique() {
  var keys = new Set();
  var tags = new Set();
  var metaTypes = new Set();
  var metaCategories = {};
  return function (h) {
    var isUnique = true;
    var hasKey = false;

    if (h.key && typeof h.key !== 'number' && h.key.indexOf('$') > 0) {
      hasKey = true;
      var key = h.key.slice(h.key.indexOf('$') + 1);

      if (keys.has(key)) {
        isUnique = false;
      } else {
        keys.add(key);
      }
    } // eslint-disable-next-line default-case


    switch (h.type) {
      case 'title':
      case 'base':
        if (tags.has(h.type)) {
          isUnique = false;
        } else {
          tags.add(h.type);
        }

        break;

      case 'meta':
        for (var i = 0, len = METATYPES.length; i < len; i++) {
          var metatype = METATYPES[i];
          if (!h.props.hasOwnProperty(metatype)) continue;

          if (metatype === 'charSet') {
            if (metaTypes.has(metatype)) {
              isUnique = false;
            } else {
              metaTypes.add(metatype);
            }
          } else {
            var category = h.props[metatype];
            var categories = metaCategories[metatype] || new Set();

            if ((metatype !== 'name' || !hasKey) && categories.has(category)) {
              isUnique = false;
            } else {
              categories.add(category);
              metaCategories[metatype] = categories;
            }
          }
        }

        break;
    }

    return isUnique;
  };
}
/**
*
* @param headElements List of multiple <Head> instances
*/


function reduceComponents(headElements, props) {
  return headElements.reduce(function (list, headElement) {
    var headElementChildren = _react["default"].Children.toArray(headElement.props.children);

    return list.concat(headElementChildren);
  }, []).reduce(onlyReactElement, []).reverse().concat(defaultHead(props.inAmpMode)).filter(unique()).reverse().map(function (c, i) {
    var key = c.key || i;

    if (false) { var newProps; }

    return /*#__PURE__*/_react["default"].cloneElement(c, {
      key: key
    });
  });
}
/**
* This component injects elements to `<head>` of your page.
* To avoid duplicated `tags` in `<head>` you can use the `key` property, which will make sure every tag is only rendered once.
*/


function Head(_ref) {
  var children = _ref.children;
  var ampState = (0, _react.useContext)(_ampContext.AmpStateContext);
  var headManager = (0, _react.useContext)(_headManagerContext.HeadManagerContext);
  return /*#__PURE__*/_react["default"].createElement(_sideEffect["default"], {
    reduceComponentsToState: reduceComponents,
    headManager: headManager,
    inAmpMode: (0, _amp.isInAmpMode)(ampState)
  }, children);
} // TODO: Remove in the next major release


_c = Head;

Head.rewind = function () {};

var _default = Head;
exports["default"] = _default;

var _c;

$RefreshReg$(_c, "Head");

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../compiled/webpack/module.js */ "./node_modules/next/dist/compiled/webpack/module.js")(module)))

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/i18n/normalize-locale-path.js":
/*!******************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/i18n/normalize-locale-path.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {

exports.__esModule = true;
exports.normalizeLocalePath = normalizeLocalePath;

function normalizeLocalePath(pathname, locales) {
  var detectedLocale; // first item will be empty string from splitting at first char

  var pathnameParts = pathname.split('/');
  (locales || []).some(function (locale) {
    if (pathnameParts[1].toLowerCase() === locale.toLowerCase()) {
      detectedLocale = locale;
      pathnameParts.splice(1, 1);
      pathname = pathnameParts.join('/') || '/';
      return true;
    }

    return false;
  });
  return {
    pathname: pathname,
    detectedLocale: detectedLocale
  };
}

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../compiled/webpack/module.js */ "./node_modules/next/dist/compiled/webpack/module.js")(module)))

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/mitt.js":
/*!********************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/mitt.js ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {

exports.__esModule = true;
exports["default"] = mitt;
/*
MIT License
Copyright (c) Jason Miller (https://jasonformat.com/)
Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
// This file is based on https://github.com/developit/mitt/blob/v1.1.3/src/index.js
// It's been edited for the needs of this script
// See the LICENSE at the top of the file

function mitt() {
  var all = Object.create(null);
  return {
    on: function on(type, handler) {
      ;
      (all[type] || (all[type] = [])).push(handler);
    },
    off: function off(type, handler) {
      if (all[type]) {
        all[type].splice(all[type].indexOf(handler) >>> 0, 1);
      }
    },
    emit: function emit(type) {
      for (var _len = arguments.length, evts = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        evts[_key - 1] = arguments[_key];
      }

      // eslint-disable-next-line array-callback-return
      ;
      (all[type] || []).slice().map(function (handler) {
        handler.apply(void 0, evts);
      });
    }
  };
}

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../compiled/webpack/module.js */ "./node_modules/next/dist/compiled/webpack/module.js")(module)))

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router-context.js":
/*!******************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router-context.js ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {

exports.__esModule = true;
exports.RouterContext = void 0;

var _react = _interopRequireDefault(__webpack_require__(/*! react */ "./node_modules/react/index.js"));

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

var RouterContext = /*#__PURE__*/_react["default"].createContext(null);

exports.RouterContext = RouterContext;

if (true) {
  RouterContext.displayName = 'RouterContext';
}

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../compiled/webpack/module.js */ "./node_modules/next/dist/compiled/webpack/module.js")(module)))

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/router.js":
/*!*****************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/router.js ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {

var _regeneratorRuntime = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/regenerator */ "./node_modules/next/node_modules/@babel/runtime/regenerator/index.js");

var _asyncToGenerator = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/asyncToGenerator */ "./node_modules/next/node_modules/@babel/runtime/helpers/asyncToGenerator.js");

var _classCallCheck = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/classCallCheck */ "./node_modules/next/node_modules/@babel/runtime/helpers/classCallCheck.js");

var _createClass = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/createClass */ "./node_modules/next/node_modules/@babel/runtime/helpers/createClass.js");

var _slicedToArray = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/slicedToArray */ "./node_modules/next/node_modules/@babel/runtime/helpers/slicedToArray.js");

exports.__esModule = true;
exports.getDomainLocale = getDomainLocale;
exports.addLocale = addLocale;
exports.delLocale = delLocale;
exports.hasBasePath = hasBasePath;
exports.addBasePath = addBasePath;
exports.delBasePath = delBasePath;
exports.isLocalURL = isLocalURL;
exports.interpolateAs = interpolateAs;
exports.resolveHref = resolveHref;
exports["default"] = void 0;

var _normalizeTrailingSlash = __webpack_require__(/*! ../../../client/normalize-trailing-slash */ "./node_modules/next/dist/client/normalize-trailing-slash.js");

var _routeLoader = __webpack_require__(/*! ../../../client/route-loader */ "./node_modules/next/dist/client/route-loader.js");

var _denormalizePagePath = __webpack_require__(/*! ../../server/denormalize-page-path */ "./node_modules/next/dist/next-server/server/denormalize-page-path.js");

var _normalizeLocalePath = __webpack_require__(/*! ../i18n/normalize-locale-path */ "./node_modules/next/dist/next-server/lib/i18n/normalize-locale-path.js");

var _mitt = _interopRequireDefault(__webpack_require__(/*! ../mitt */ "./node_modules/next/dist/next-server/lib/mitt.js"));

var _utils = __webpack_require__(/*! ../utils */ "./node_modules/next/dist/next-server/lib/utils.js");

var _isDynamic = __webpack_require__(/*! ./utils/is-dynamic */ "./node_modules/next/dist/next-server/lib/router/utils/is-dynamic.js");

var _parseRelativeUrl = __webpack_require__(/*! ./utils/parse-relative-url */ "./node_modules/next/dist/next-server/lib/router/utils/parse-relative-url.js");

var _querystring = __webpack_require__(/*! ./utils/querystring */ "./node_modules/next/dist/next-server/lib/router/utils/querystring.js");

var _resolveRewrites = _interopRequireDefault(__webpack_require__(/*! ./utils/resolve-rewrites */ "./node_modules/next/dist/next-server/lib/router/utils/resolve-rewrites-noop.js"));

var _routeMatcher = __webpack_require__(/*! ./utils/route-matcher */ "./node_modules/next/dist/next-server/lib/router/utils/route-matcher.js");

var _routeRegex = __webpack_require__(/*! ./utils/route-regex */ "./node_modules/next/dist/next-server/lib/router/utils/route-regex.js");

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
} // tslint:disable:no-console


var detectDomainLocale;

if (false) {}

var basePath =  false || '';

function buildCancellationError() {
  return Object.assign(new Error('Route Cancelled'), {
    cancelled: true
  });
}

function addPathPrefix(path, prefix) {
  return prefix && path.startsWith('/') ? path === '/' ? (0, _normalizeTrailingSlash.normalizePathTrailingSlash)(prefix) : "".concat(prefix).concat(pathNoQueryHash(path) === '/' ? path.substring(1) : path) : path;
}

function getDomainLocale(path, locale, locales, domainLocales) {
  if (false) { var detectedDomain; }

  return false;
}

function addLocale(path, locale, defaultLocale) {
  if (false) { var localeLower, pathLower, pathname; }

  return path;
}

function delLocale(path, locale) {
  if (false) { var localeLower, pathLower, pathname; }

  return path;
}

function pathNoQueryHash(path) {
  var queryIndex = path.indexOf('?');
  var hashIndex = path.indexOf('#');

  if (queryIndex > -1 || hashIndex > -1) {
    path = path.substring(0, queryIndex > -1 ? queryIndex : hashIndex);
  }

  return path;
}

function hasBasePath(path) {
  path = pathNoQueryHash(path);
  return path === basePath || path.startsWith(basePath + '/');
}

function addBasePath(path) {
  // we only add the basepath on relative urls
  return addPathPrefix(path, basePath);
}

function delBasePath(path) {
  path = path.slice(basePath.length);
  if (!path.startsWith('/')) path = "/".concat(path);
  return path;
}
/**
* Detects whether a given url is routable by the Next.js router (browser only).
*/


function isLocalURL(url) {
  // prevent a hydration mismatch on href for url with anchor refs
  if (url.startsWith('/') || url.startsWith('#')) return true;

  try {
    // absolute urls can be local if they are on the same origin
    var locationOrigin = (0, _utils.getLocationOrigin)();
    var resolved = new URL(url, locationOrigin);
    return resolved.origin === locationOrigin && hasBasePath(resolved.pathname);
  } catch (_) {
    return false;
  }
}

function interpolateAs(route, asPathname, query) {
  var interpolatedRoute = '';
  var dynamicRegex = (0, _routeRegex.getRouteRegex)(route);
  var dynamicGroups = dynamicRegex.groups;
  var dynamicMatches = // Try to match the dynamic route against the asPath
  (asPathname !== route ? (0, _routeMatcher.getRouteMatcher)(dynamicRegex)(asPathname) : '') || // Fall back to reading the values from the href
  // TODO: should this take priority; also need to change in the router.
  query;
  interpolatedRoute = route;
  var params = Object.keys(dynamicGroups);

  if (!params.every(function (param) {
    var value = dynamicMatches[param] || '';
    var _dynamicGroups$param = dynamicGroups[param],
        repeat = _dynamicGroups$param.repeat,
        optional = _dynamicGroups$param.optional; // support single-level catch-all
    // TODO: more robust handling for user-error (passing `/`)

    var replaced = "[".concat(repeat ? '...' : '').concat(param, "]");

    if (optional) {
      replaced = "".concat(!value ? '/' : '', "[").concat(replaced, "]");
    }

    if (repeat && !Array.isArray(value)) value = [value];
    return (optional || param in dynamicMatches) && ( // Interpolate group into data URL if present
    interpolatedRoute = interpolatedRoute.replace(replaced, repeat ? value.map( // these values should be fully encoded instead of just
    // path delimiter escaped since they are being inserted
    // into the URL and we expect URL encoded segments
    // when parsing dynamic route params
    function (segment) {
      return encodeURIComponent(segment);
    }).join('/') : encodeURIComponent(value)) || '/');
  })) {
    interpolatedRoute = ''; // did not satisfy all requirements
    // n.b. We ignore this error because we handle warning for this case in
    // development in the `<Link>` component directly.
  }

  return {
    params: params,
    result: interpolatedRoute
  };
}

function omitParmsFromQuery(query, params) {
  var filteredQuery = {};
  Object.keys(query).forEach(function (key) {
    if (!params.includes(key)) {
      filteredQuery[key] = query[key];
    }
  });
  return filteredQuery;
}
/**
* Resolves a given hyperlink with a certain router state (basePath not included).
* Preserves absolute urls.
*/


function resolveHref(currentPath, href, resolveAs) {
  // we use a dummy base url for relative urls
  var base;

  try {
    base = new URL(currentPath, 'http://n');
  } catch (_) {
    // fallback to / for invalid asPath values e.g. //
    base = new URL('/', 'http://n');
  }

  var urlAsString = typeof href === 'string' ? href : (0, _utils.formatWithValidation)(href); // Return because it cannot be routed by the Next.js router

  if (!isLocalURL(urlAsString)) {
    return resolveAs ? [urlAsString] : urlAsString;
  }

  try {
    var finalUrl = new URL(urlAsString, base);
    finalUrl.pathname = (0, _normalizeTrailingSlash.normalizePathTrailingSlash)(finalUrl.pathname);
    var interpolatedAs = '';

    if ((0, _isDynamic.isDynamicRoute)(finalUrl.pathname) && finalUrl.searchParams && resolveAs) {
      var query = (0, _querystring.searchParamsToUrlQuery)(finalUrl.searchParams);

      var _interpolateAs = interpolateAs(finalUrl.pathname, finalUrl.pathname, query),
          result = _interpolateAs.result,
          params = _interpolateAs.params;

      if (result) {
        interpolatedAs = (0, _utils.formatWithValidation)({
          pathname: result,
          hash: finalUrl.hash,
          query: omitParmsFromQuery(query, params)
        });
      }
    } // if the origin didn't change, it means we received a relative href


    var resolvedHref = finalUrl.origin === base.origin ? finalUrl.href.slice(finalUrl.origin.length) : finalUrl.href;
    return resolveAs ? [resolvedHref, interpolatedAs || resolvedHref] : resolvedHref;
  } catch (_) {
    return resolveAs ? [urlAsString] : urlAsString;
  }
}

function stripOrigin(url) {
  var origin = (0, _utils.getLocationOrigin)();
  return url.startsWith(origin) ? url.substring(origin.length) : url;
}

function prepareUrlAs(router, url, as) {
  // If url and as provided as an object representation,
  // we'll format them into the string version here.
  var _resolveHref = resolveHref(router.asPath, url, true),
      _resolveHref2 = _slicedToArray(_resolveHref, 2),
      resolvedHref = _resolveHref2[0],
      resolvedAs = _resolveHref2[1];

  var origin = (0, _utils.getLocationOrigin)();
  var hrefHadOrigin = resolvedHref.startsWith(origin);
  var asHadOrigin = resolvedAs && resolvedAs.startsWith(origin);
  resolvedHref = stripOrigin(resolvedHref);
  resolvedAs = resolvedAs ? stripOrigin(resolvedAs) : resolvedAs;
  var preparedUrl = hrefHadOrigin ? resolvedHref : addBasePath(resolvedHref);
  var preparedAs = as ? stripOrigin(resolveHref(router.asPath, as)) : resolvedAs || resolvedHref;
  return {
    url: preparedUrl,
    as: asHadOrigin ? preparedAs : addBasePath(preparedAs)
  };
}

function resolveDynamicRoute(pathname, pages) {
  var cleanPathname = (0, _normalizeTrailingSlash.removePathTrailingSlash)((0, _denormalizePagePath.denormalizePagePath)(pathname));

  if (cleanPathname === '/404' || cleanPathname === '/_error') {
    return pathname;
  } // handle resolving href for dynamic routes


  if (!pages.includes(cleanPathname)) {
    // eslint-disable-next-line array-callback-return
    pages.some(function (page) {
      if ((0, _isDynamic.isDynamicRoute)(page) && (0, _routeRegex.getRouteRegex)(page).re.test(cleanPathname)) {
        pathname = page;
        return true;
      }
    });
  }

  return (0, _normalizeTrailingSlash.removePathTrailingSlash)(pathname);
}

var manualScrollRestoration =  false && false;
var SSG_DATA_NOT_FOUND = Symbol('SSG_DATA_NOT_FOUND');

function fetchRetry(url, attempts) {
  return fetch(url, {
    // Cookies are required to be present for Next.js' SSG "Preview Mode".
    // Cookies may also be required for `getServerSideProps`.
    //
    // > `fetch` won’t send cookies, unless you set the credentials init
    // > option.
    // https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch
    //
    // > For maximum browser compatibility when it comes to sending &
    // > receiving cookies, always supply the `credentials: 'same-origin'`
    // > option instead of relying on the default.
    // https://github.com/github/fetch#caveats
    credentials: 'same-origin'
  }).then(function (res) {
    if (!res.ok) {
      if (attempts > 1 && res.status >= 500) {
        return fetchRetry(url, attempts - 1);
      }

      if (res.status === 404) {
        return res.json().then(function (data) {
          if (data.notFound) {
            return {
              notFound: SSG_DATA_NOT_FOUND
            };
          }

          throw new Error("Failed to load static props");
        });
      }

      throw new Error("Failed to load static props");
    }

    return res.json();
  });
}

function fetchNextData(dataHref, isServerRender) {
  return fetchRetry(dataHref, isServerRender ? 3 : 1)["catch"](function (err) {
    // We should only trigger a server-side transition if this was caused
    // on a client-side transition. Otherwise, we'd get into an infinite
    // loop.
    if (!isServerRender) {
      (0, _routeLoader.markAssetError)(err);
    }

    throw err;
  });
}

var Router = /*#__PURE__*/function () {
  /**
  * Map of all components loaded in `Router`
  */
  // Static Data Cache
  // In-flight Server Data Requests, for deduping
  function Router(_pathname, _query, _as, _ref) {
    var _this = this;

    var initialProps = _ref.initialProps,
        pageLoader = _ref.pageLoader,
        App = _ref.App,
        wrapApp = _ref.wrapApp,
        Component = _ref.Component,
        err = _ref.err,
        subscription = _ref.subscription,
        isFallback = _ref.isFallback,
        locale = _ref.locale,
        locales = _ref.locales,
        defaultLocale = _ref.defaultLocale,
        domainLocales = _ref.domainLocales,
        isPreview = _ref.isPreview;

    _classCallCheck(this, Router);

    this.route = void 0;
    this.pathname = void 0;
    this.query = void 0;
    this.asPath = void 0;
    this.basePath = void 0;
    this.components = void 0;
    this.sdc = {};
    this.sdr = {};
    this.sub = void 0;
    this.clc = void 0;
    this.pageLoader = void 0;
    this._bps = void 0;
    this.events = void 0;
    this._wrapApp = void 0;
    this.isSsr = void 0;
    this.isFallback = void 0;
    this._inFlightRoute = void 0;
    this._shallow = void 0;
    this.locale = void 0;
    this.locales = void 0;
    this.defaultLocale = void 0;
    this.domainLocales = void 0;
    this.isReady = void 0;
    this.isPreview = void 0;
    this.isLocaleDomain = void 0;
    this._idx = 0;

    this.onPopState = function (e) {
      var state = e.state;

      if (!state) {
        // We get state as undefined for two reasons.
        //  1. With older safari (< 8) and older chrome (< 34)
        //  2. When the URL changed with #
        //
        // In the both cases, we don't need to proceed and change the route.
        // (as it's already changed)
        // But we can simply replace the state with the new changes.
        // Actually, for (1) we don't need to nothing. But it's hard to detect that event.
        // So, doing the following for (1) does no harm.
        var _pathname2 = _this.pathname,
            query = _this.query;

        _this.changeState('replaceState', (0, _utils.formatWithValidation)({
          pathname: addBasePath(_pathname2),
          query: query
        }), (0, _utils.getURL)());

        return;
      }

      if (!state.__N) {
        return;
      }

      var forcedScroll;
      var url = state.url,
          as = state.as,
          options = state.options,
          idx = state.idx;

      if (false) { var v; }

      _this._idx = idx;

      var _ref2 = (0, _parseRelativeUrl.parseRelativeUrl)(url),
          pathname = _ref2.pathname; // Make sure we don't re-render on initial load,
      // can be caused by navigating back from an external site


      if (_this.isSsr && as === _this.asPath && pathname === _this.pathname) {
        return;
      } // If the downstream application returns falsy, return.
      // They will then be responsible for handling the event.


      if (_this._bps && !_this._bps(state)) {
        return;
      }

      _this.change('replaceState', url, as, Object.assign({}, options, {
        shallow: options.shallow && _this._shallow,
        locale: options.locale || _this.defaultLocale
      }), forcedScroll);
    }; // represents the current component key


    this.route = (0, _normalizeTrailingSlash.removePathTrailingSlash)(_pathname); // set up the component cache (by route keys)

    this.components = {}; // We should not keep the cache, if there's an error
    // Otherwise, this cause issues when when going back and
    // come again to the errored page.

    if (_pathname !== '/_error') {
      this.components[this.route] = {
        Component: Component,
        initial: true,
        props: initialProps,
        err: err,
        __N_SSG: initialProps && initialProps.__N_SSG,
        __N_SSP: initialProps && initialProps.__N_SSP
      };
    }

    this.components['/_app'] = {
      Component: App,
      styleSheets: [
        /* /_app does not need its stylesheets managed */
      ]
    }; // Backwards compat for Router.router.events
    // TODO: Should be remove the following major version as it was never documented

    this.events = Router.events;
    this.pageLoader = pageLoader;
    this.pathname = _pathname;
    this.query = _query; // if auto prerendered and dynamic route wait to update asPath
    // until after mount to prevent hydration mismatch

    var autoExportDynamic = (0, _isDynamic.isDynamicRoute)(_pathname) && self.__NEXT_DATA__.autoExport;

    this.asPath = autoExportDynamic ? _pathname : _as;
    this.basePath = basePath;
    this.sub = subscription;
    this.clc = null;
    this._wrapApp = wrapApp; // make sure to ignore extra popState in safari on navigating
    // back from external site

    this.isSsr = true;
    this.isFallback = isFallback;
    this.isReady = !!(self.__NEXT_DATA__.gssp || self.__NEXT_DATA__.gip || !autoExportDynamic && !self.location.search && !false);
    this.isPreview = !!isPreview;
    this.isLocaleDomain = false;

    if (false) {}

    if (true) {
      // make sure "as" doesn't start with double slashes or else it can
      // throw an error as it's considered invalid
      if (_as.substr(0, 2) !== '//') {
        // in order for `e.state` to work on the `onpopstate` event
        // we have to register the initial route upon initialization
        this.changeState('replaceState', (0, _utils.formatWithValidation)({
          pathname: addBasePath(_pathname),
          query: _query
        }), (0, _utils.getURL)(), {
          locale: locale
        });
      }

      window.addEventListener('popstate', this.onPopState); // enable custom scroll restoration handling when available
      // otherwise fallback to browser's default handling

      if (false) {}
    }
  }

  _createClass(Router, [{
    key: "reload",
    value: function reload() {
      window.location.reload();
    }
    /**
    * Go back in history
    */

  }, {
    key: "back",
    value: function back() {
      window.history.back();
    }
    /**
    * Performs a `pushState` with arguments
    * @param url of the route
    * @param as masks `url` for the browser
    * @param options object you can define `shallow` and other options
    */

  }, {
    key: "push",
    value: function push(url, as) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      if (false) {}

      ;

      var _prepareUrlAs = prepareUrlAs(this, url, as);

      url = _prepareUrlAs.url;
      as = _prepareUrlAs.as;
      return this.change('pushState', url, as, options);
    }
    /**
    * Performs a `replaceState` with arguments
    * @param url of the route
    * @param as masks `url` for the browser
    * @param options object you can define `shallow` and other options
    */

  }, {
    key: "replace",
    value: function replace(url, as) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      ;

      var _prepareUrlAs2 = prepareUrlAs(this, url, as);

      url = _prepareUrlAs2.url;
      as = _prepareUrlAs2.as;
      return this.change('replaceState', url, as, options);
    }
  }, {
    key: "change",
    value: function () {
      var _change = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(method, url, as, options, forcedScroll) {
        var _options$scroll, shouldResolveHref, localeChange, parsedAs, localePathResult, didNavigate, _this$locales, detectedDomain, asNoBasePath, _options$shallow, shallow, routeProps, cleanedAs, parsed, pathname, query, pages, rewrites, _yield, resolvedAs, rewritesResult, route, _parsedAs, asPathname, routeRegex, routeMatch, shouldInterpolate, interpolatedAs, missingParams, _self$__NEXT_DATA__$p, _self$__NEXT_DATA__$p2, routeInfo, _routeInfo, error, props, __N_SSG, __N_SSP, destination, parsedHref, _prepareUrlAs3, newUrl, newAs, notFoundRoute, appComp, isValidShallowRoute;

        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (isLocalURL(url)) {
                  _context.next = 3;
                  break;
                }

                window.location.href = url;
                return _context.abrupt("return", false);

              case 3:
                shouldResolveHref = url === as || options._h; // for static pages with query params in the URL we delay
                // marking the router ready until after the query is updated

                if (options._h) {
                  this.isReady = true;
                } // Default to scroll reset behavior unless explicitly specified to be
                // `false`! This makes the behavior between using `Router#push` and a
                // `<Link />` consistent.


                options.scroll = !!((_options$scroll = options.scroll) != null ? _options$scroll : true);
                localeChange = options.locale !== this.locale;

                if (true) {
                  _context.next = 19;
                  break;
                }

                this.locale = options.locale === false ? this.defaultLocale : options.locale || this.locale;

                if (typeof options.locale === 'undefined') {
                  options.locale = this.locale;
                }

                parsedAs = (0, _parseRelativeUrl.parseRelativeUrl)(hasBasePath(as) ? delBasePath(as) : as);
                localePathResult = (0, _normalizeLocalePath.normalizeLocalePath)(parsedAs.pathname, this.locales);

                if (localePathResult.detectedLocale) {
                  this.locale = localePathResult.detectedLocale;
                  parsedAs.pathname = addBasePath(parsedAs.pathname);
                  as = (0, _utils.formatWithValidation)(parsedAs);
                  url = addBasePath((0, _normalizeLocalePath.normalizeLocalePath)(hasBasePath(url) ? delBasePath(url) : url, this.locales).pathname);
                }

                didNavigate = false; // we need to wrap this in the env check again since regenerator runtime
                // moves this on its own due to the return

                if (false) {}

                detectedDomain = detectDomainLocale(this.domainLocales, undefined, this.locale); // we need to wrap this in the env check again since regenerator runtime
                // moves this on its own due to the return

                if (false) {}

                if (!didNavigate) {
                  _context.next = 19;
                  break;
                }

                return _context.abrupt("return", new Promise(function () {}));

              case 19:
                if (!options._h) {
                  this.isSsr = false;
                } // marking route changes as a navigation start entry


                if (_utils.ST) {
                  performance.mark('routeChange');
                }

                _options$shallow = options.shallow, shallow = _options$shallow === void 0 ? false : _options$shallow;
                routeProps = {
                  shallow: shallow
                };

                if (this._inFlightRoute) {
                  this.abortComponentLoad(this._inFlightRoute, routeProps);
                }

                as = addBasePath(addLocale(hasBasePath(as) ? delBasePath(as) : as, options.locale, this.defaultLocale));
                cleanedAs = delLocale(hasBasePath(as) ? delBasePath(as) : as, this.locale);
                this._inFlightRoute = as; // If the url change is only related to a hash change
                // We should not proceed. We should only change the state.
                // WARNING: `_h` is an internal option for handing Next.js client-side
                // hydration. Your app should _never_ use this property. It may change at
                // any time without notice.

                if (!(!options._h && this.onlyAHashChange(cleanedAs))) {
                  _context.next = 35;
                  break;
                }

                this.asPath = cleanedAs;
                Router.events.emit('hashChangeStart', as, routeProps); // TODO: do we need the resolved href when only a hash change?

                this.changeState(method, url, as, options);
                this.scrollToHash(cleanedAs);
                this.notify(this.components[this.route], null);
                Router.events.emit('hashChangeComplete', as, routeProps);
                return _context.abrupt("return", true);

              case 35:
                parsed = (0, _parseRelativeUrl.parseRelativeUrl)(url);
                pathname = parsed.pathname, query = parsed.query; // The build manifest needs to be loaded before auto-static dynamic pages
                // get their query parameters to allow ensuring they can be parsed properly
                // when rewritten to

                _context.prev = 37;
                _context.next = 40;
                return this.pageLoader.getPageList();

              case 40:
                pages = _context.sent;
                _context.next = 43;
                return (0, _routeLoader.getClientBuildManifest)();

              case 43:
                _yield = _context.sent;
                rewrites = _yield.__rewrites;
                _context.next = 51;
                break;

              case 47:
                _context.prev = 47;
                _context.t0 = _context["catch"](37);
                // If we fail to resolve the page list or client-build manifest, we must
                // do a server-side transition:
                window.location.href = as;
                return _context.abrupt("return", false);

              case 51:
                // If asked to change the current URL we should reload the current page
                // (not location.reload() but reload getInitialProps and other Next.js stuffs)
                // We also need to set the method = replaceState always
                // as this should not go into the history (That's how browsers work)
                // We should compare the new asPath to the current asPath, not the url
                if (!this.urlIsNew(cleanedAs) && !localeChange) {
                  method = 'replaceState';
                } // we need to resolve the as value using rewrites for dynamic SSG
                // pages to allow building the data URL correctly


                resolvedAs = as; // url and as should always be prefixed with basePath by this
                // point by either next/link or router.push/replace so strip the
                // basePath from the pathname to match the pages dir 1-to-1

                pathname = pathname ? (0, _normalizeTrailingSlash.removePathTrailingSlash)(delBasePath(pathname)) : pathname;

                if (shouldResolveHref && pathname !== '/_error') {
                  if (false) {} else {
                    parsed.pathname = resolveDynamicRoute(pathname, pages);

                    if (parsed.pathname !== pathname) {
                      pathname = parsed.pathname;
                      url = (0, _utils.formatWithValidation)(parsed);
                    }
                  }
                }

                route = (0, _normalizeTrailingSlash.removePathTrailingSlash)(pathname);

                if (isLocalURL(as)) {
                  _context.next = 61;
                  break;
                }

                if (false) {}

                throw new Error("Invalid href: \"".concat(url, "\" and as: \"").concat(as, "\", received relative href and external as") + "\nSee more info: https://nextjs.org/docs/messages/invalid-relative-url-external-as");

              case 59:
                window.location.href = as;
                return _context.abrupt("return", false);

              case 61:
                resolvedAs = delLocale(delBasePath(resolvedAs), this.locale);

                if (!(0, _isDynamic.isDynamicRoute)(route)) {
                  _context.next = 77;
                  break;
                }

                _parsedAs = (0, _parseRelativeUrl.parseRelativeUrl)(resolvedAs);
                asPathname = _parsedAs.pathname;
                routeRegex = (0, _routeRegex.getRouteRegex)(route);
                routeMatch = (0, _routeMatcher.getRouteMatcher)(routeRegex)(asPathname);
                shouldInterpolate = route === asPathname;
                interpolatedAs = shouldInterpolate ? interpolateAs(route, asPathname, query) : {};

                if (!(!routeMatch || shouldInterpolate && !interpolatedAs.result)) {
                  _context.next = 76;
                  break;
                }

                missingParams = Object.keys(routeRegex.groups).filter(function (param) {
                  return !query[param];
                });

                if (!(missingParams.length > 0)) {
                  _context.next = 74;
                  break;
                }

                if (true) {
                  console.warn("".concat(shouldInterpolate ? "Interpolating href" : "Mismatching `as` and `href`", " failed to manually provide ") + "the params: ".concat(missingParams.join(', '), " in the `href`'s `query`"));
                }

                throw new Error((shouldInterpolate ? "The provided `href` (".concat(url, ") value is missing query values (").concat(missingParams.join(', '), ") to be interpolated properly. ") : "The provided `as` value (".concat(asPathname, ") is incompatible with the `href` value (").concat(route, "). ")) + "Read more: https://nextjs.org/docs/messages/".concat(shouldInterpolate ? 'href-interpolation-failed' : 'incompatible-href-as'));

              case 74:
                _context.next = 77;
                break;

              case 76:
                if (shouldInterpolate) {
                  as = (0, _utils.formatWithValidation)(Object.assign({}, _parsedAs, {
                    pathname: interpolatedAs.result,
                    query: omitParmsFromQuery(query, interpolatedAs.params)
                  }));
                } else {
                  // Merge params into `query`, overwriting any specified in search
                  Object.assign(query, routeMatch);
                }

              case 77:
                Router.events.emit('routeChangeStart', as, routeProps);
                _context.prev = 78;
                _context.next = 81;
                return this.getRouteInfo(route, pathname, query, as, resolvedAs, routeProps);

              case 81:
                routeInfo = _context.sent;
                _routeInfo = routeInfo, error = _routeInfo.error, props = _routeInfo.props, __N_SSG = _routeInfo.__N_SSG, __N_SSP = _routeInfo.__N_SSP; // handle redirect on client-transition

                if (!((__N_SSG || __N_SSP) && props)) {
                  _context.next = 108;
                  break;
                }

                if (!(props.pageProps && props.pageProps.__N_REDIRECT)) {
                  _context.next = 94;
                  break;
                }

                destination = props.pageProps.__N_REDIRECT; // check if destination is internal (resolves to a page) and attempt
                // client-navigation if it is falling back to hard navigation if
                // it's not

                if (!destination.startsWith('/')) {
                  _context.next = 92;
                  break;
                }

                parsedHref = (0, _parseRelativeUrl.parseRelativeUrl)(destination);
                parsedHref.pathname = resolveDynamicRoute(parsedHref.pathname, pages);

                if (!pages.includes(parsedHref.pathname)) {
                  _context.next = 92;
                  break;
                }

                _prepareUrlAs3 = prepareUrlAs(this, destination, destination), newUrl = _prepareUrlAs3.url, newAs = _prepareUrlAs3.as;
                return _context.abrupt("return", this.change(method, newUrl, newAs, options));

              case 92:
                window.location.href = destination;
                return _context.abrupt("return", new Promise(function () {}));

              case 94:
                this.isPreview = !!props.__N_PREVIEW; // handle SSG data 404

                if (!(props.notFound === SSG_DATA_NOT_FOUND)) {
                  _context.next = 108;
                  break;
                }

                _context.prev = 96;
                _context.next = 99;
                return this.fetchComponent('/404');

              case 99:
                notFoundRoute = '/404';
                _context.next = 105;
                break;

              case 102:
                _context.prev = 102;
                _context.t1 = _context["catch"](96);
                notFoundRoute = '/_error';

              case 105:
                _context.next = 107;
                return this.getRouteInfo(notFoundRoute, notFoundRoute, query, as, resolvedAs, {
                  shallow: false
                });

              case 107:
                routeInfo = _context.sent;

              case 108:
                Router.events.emit('beforeHistoryChange', as, routeProps);
                this.changeState(method, url, as, options);

                if (true) {
                  appComp = this.components['/_app'].Component;
                  window.next.isPrerendered = appComp.getInitialProps === appComp.origGetInitialProps && !routeInfo.Component.getInitialProps;
                } // shallow routing is only allowed for same page URL changes.


                isValidShallowRoute = options.shallow && this.route === route;

                if (options._h && pathname === '/_error' && ((_self$__NEXT_DATA__$p = self.__NEXT_DATA__.props) == null ? void 0 : (_self$__NEXT_DATA__$p2 = _self$__NEXT_DATA__$p.pageProps) == null ? void 0 : _self$__NEXT_DATA__$p2.statusCode) === 500 && props != null && props.pageProps) {
                  // ensure statusCode is still correct for static 500 page
                  // when updating query information
                  props.pageProps.statusCode = 500;
                }

                _context.next = 115;
                return this.set(route, pathname, query, cleanedAs, routeInfo, forcedScroll || (isValidShallowRoute || !options.scroll ? null : {
                  x: 0,
                  y: 0
                }))["catch"](function (e) {
                  if (e.cancelled) error = error || e;else throw e;
                });

              case 115:
                if (!error) {
                  _context.next = 118;
                  break;
                }

                Router.events.emit('routeChangeError', error, cleanedAs, routeProps);
                throw error;

              case 118:
                if (false) {}

                Router.events.emit('routeChangeComplete', as, routeProps);
                return _context.abrupt("return", true);

              case 123:
                _context.prev = 123;
                _context.t2 = _context["catch"](78);

                if (!_context.t2.cancelled) {
                  _context.next = 127;
                  break;
                }

                return _context.abrupt("return", false);

              case 127:
                throw _context.t2;

              case 128:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[37, 47], [78, 123], [96, 102]]);
      }));

      function change(_x, _x2, _x3, _x4, _x5) {
        return _change.apply(this, arguments);
      }

      return change;
    }()
  }, {
    key: "changeState",
    value: function changeState(method, url, as) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

      if (true) {
        if (typeof window.history === 'undefined') {
          console.error("Warning: window.history is not available.");
          return;
        }

        if (typeof window.history[method] === 'undefined') {
          console.error("Warning: window.history.".concat(method, " is not available"));
          return;
        }
      }

      if (method !== 'pushState' || (0, _utils.getURL)() !== as) {
        this._shallow = options.shallow;
        window.history[method]({
          url: url,
          as: as,
          options: options,
          __N: true,
          idx: this._idx = method !== 'pushState' ? this._idx : this._idx + 1
        }, // Most browsers currently ignores this parameter, although they may use it in the future.
        // Passing the empty string here should be safe against future changes to the method.
        // https://developer.mozilla.org/en-US/docs/Web/API/History/replaceState
        '', as);
      }
    }
  }, {
    key: "handleRouteInfoError",
    value: function () {
      var _handleRouteInfoError = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(err, pathname, query, as, routeProps, loadErrorFail) {
        var Component, styleSheets, props, _yield$this$fetchComp, routeInfo;

        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                if (!err.cancelled) {
                  _context2.next = 2;
                  break;
                }

                throw err;

              case 2:
                if (!((0, _routeLoader.isAssetError)(err) || loadErrorFail)) {
                  _context2.next = 6;
                  break;
                }

                Router.events.emit('routeChangeError', err, as, routeProps); // If we can't load the page it could be one of following reasons
                //  1. Page doesn't exists
                //  2. Page does exist in a different zone
                //  3. Internal error while loading the page
                // So, doing a hard reload is the proper way to deal with this.

                window.location.href = as; // Changing the URL doesn't block executing the current code path.
                // So let's throw a cancellation error stop the routing logic.

                throw buildCancellationError();

              case 6:
                _context2.prev = 6;

                if (!(typeof Component === 'undefined' || typeof styleSheets === 'undefined')) {
                  _context2.next = 14;
                  break;
                }

                ;
                _context2.next = 11;
                return this.fetchComponent('/_error');

              case 11:
                _yield$this$fetchComp = _context2.sent;
                Component = _yield$this$fetchComp.page;
                styleSheets = _yield$this$fetchComp.styleSheets;

              case 14:
                routeInfo = {
                  props: props,
                  Component: Component,
                  styleSheets: styleSheets,
                  err: err,
                  error: err
                };

                if (routeInfo.props) {
                  _context2.next = 26;
                  break;
                }

                _context2.prev = 16;
                _context2.next = 19;
                return this.getInitialProps(Component, {
                  err: err,
                  pathname: pathname,
                  query: query
                });

              case 19:
                routeInfo.props = _context2.sent;
                _context2.next = 26;
                break;

              case 22:
                _context2.prev = 22;
                _context2.t0 = _context2["catch"](16);
                console.error('Error in error page `getInitialProps`: ', _context2.t0);
                routeInfo.props = {};

              case 26:
                return _context2.abrupt("return", routeInfo);

              case 29:
                _context2.prev = 29;
                _context2.t1 = _context2["catch"](6);
                return _context2.abrupt("return", this.handleRouteInfoError(_context2.t1, pathname, query, as, routeProps, true));

              case 32:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this, [[6, 29], [16, 22]]);
      }));

      function handleRouteInfoError(_x6, _x7, _x8, _x9, _x10, _x11) {
        return _handleRouteInfoError.apply(this, arguments);
      }

      return handleRouteInfoError;
    }()
  }, {
    key: "getRouteInfo",
    value: function () {
      var _getRouteInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(route, pathname, query, as, resolvedAs, routeProps) {
        var _this2 = this;

        var existingRouteInfo, cachedRouteInfo, routeInfo, Component, __N_SSG, __N_SSP, _require, isValidElementType, dataHref, props;

        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.prev = 0;
                existingRouteInfo = this.components[route];

                if (!(routeProps.shallow && existingRouteInfo && this.route === route)) {
                  _context3.next = 4;
                  break;
                }

                return _context3.abrupt("return", existingRouteInfo);

              case 4:
                cachedRouteInfo = existingRouteInfo && 'initial' in existingRouteInfo ? undefined : existingRouteInfo;

                if (!cachedRouteInfo) {
                  _context3.next = 9;
                  break;
                }

                _context3.t0 = cachedRouteInfo;
                _context3.next = 12;
                break;

              case 9:
                _context3.next = 11;
                return this.fetchComponent(route).then(function (res) {
                  return {
                    Component: res.page,
                    styleSheets: res.styleSheets,
                    __N_SSG: res.mod.__N_SSG,
                    __N_SSP: res.mod.__N_SSP
                  };
                });

              case 11:
                _context3.t0 = _context3.sent;

              case 12:
                routeInfo = _context3.t0;
                Component = routeInfo.Component, __N_SSG = routeInfo.__N_SSG, __N_SSP = routeInfo.__N_SSP;

                if (false) {}

                _require = __webpack_require__(/*! react-is */ "./node_modules/react-is/index.js"), isValidElementType = _require.isValidElementType;

                if (isValidElementType(Component)) {
                  _context3.next = 18;
                  break;
                }

                throw new Error("The default export is not a React Component in page: \"".concat(pathname, "\""));

              case 18:
                if (__N_SSG || __N_SSP) {
                  dataHref = this.pageLoader.getDataHref((0, _utils.formatWithValidation)({
                    pathname: pathname,
                    query: query
                  }), resolvedAs, __N_SSG, this.locale);
                }

                _context3.next = 21;
                return this._getData(function () {
                  return __N_SSG ? _this2._getStaticData(dataHref) : __N_SSP ? _this2._getServerData(dataHref) : _this2.getInitialProps(Component, // we provide AppTree later so this needs to be `any`
                  {
                    pathname: pathname,
                    query: query,
                    asPath: as,
                    locale: _this2.locale,
                    locales: _this2.locales,
                    defaultLocale: _this2.defaultLocale
                  });
                });

              case 21:
                props = _context3.sent;
                routeInfo.props = props;
                this.components[route] = routeInfo;
                return _context3.abrupt("return", routeInfo);

              case 27:
                _context3.prev = 27;
                _context3.t1 = _context3["catch"](0);
                return _context3.abrupt("return", this.handleRouteInfoError(_context3.t1, pathname, query, as, routeProps));

              case 30:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this, [[0, 27]]);
      }));

      function getRouteInfo(_x12, _x13, _x14, _x15, _x16, _x17) {
        return _getRouteInfo.apply(this, arguments);
      }

      return getRouteInfo;
    }()
  }, {
    key: "set",
    value: function set(route, pathname, query, as, data, resetScroll) {
      this.isFallback = false;
      this.route = route;
      this.pathname = pathname;
      this.query = query;
      this.asPath = as;
      return this.notify(data, resetScroll);
    }
    /**
    * Callback to execute before replacing router state
    * @param cb callback to be executed
    */

  }, {
    key: "beforePopState",
    value: function beforePopState(cb) {
      this._bps = cb;
    }
  }, {
    key: "onlyAHashChange",
    value: function onlyAHashChange(as) {
      if (!this.asPath) return false;

      var _this$asPath$split = this.asPath.split('#'),
          _this$asPath$split2 = _slicedToArray(_this$asPath$split, 2),
          oldUrlNoHash = _this$asPath$split2[0],
          oldHash = _this$asPath$split2[1];

      var _as$split = as.split('#'),
          _as$split2 = _slicedToArray(_as$split, 2),
          newUrlNoHash = _as$split2[0],
          newHash = _as$split2[1]; // Makes sure we scroll to the provided hash if the url/hash are the same


      if (newHash && oldUrlNoHash === newUrlNoHash && oldHash === newHash) {
        return true;
      } // If the urls are change, there's more than a hash change


      if (oldUrlNoHash !== newUrlNoHash) {
        return false;
      } // If the hash has changed, then it's a hash only change.
      // This check is necessary to handle both the enter and
      // leave hash === '' cases. The identity case falls through
      // and is treated as a next reload.


      return oldHash !== newHash;
    }
  }, {
    key: "scrollToHash",
    value: function scrollToHash(as) {
      var _as$split3 = as.split('#'),
          _as$split4 = _slicedToArray(_as$split3, 2),
          hash = _as$split4[1]; // Scroll to top if the hash is just `#` with no value or `#top`
      // To mirror browsers


      if (hash === '' || hash === 'top') {
        window.scrollTo(0, 0);
        return;
      } // First we check if the element by id is found


      var idEl = document.getElementById(hash);

      if (idEl) {
        idEl.scrollIntoView();
        return;
      } // If there's no element with the id, we check the `name` property
      // To mirror browsers


      var nameEl = document.getElementsByName(hash)[0];

      if (nameEl) {
        nameEl.scrollIntoView();
      }
    }
  }, {
    key: "urlIsNew",
    value: function urlIsNew(asPath) {
      return this.asPath !== asPath;
    }
    /**
    * Prefetch page code, you may wait for the data during page rendering.
    * This feature only works in production!
    * @param url the href of prefetched page
    * @param asPath the as path of the prefetched page
    */

  }, {
    key: "prefetch",
    value: function () {
      var _prefetch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(url) {
        var _this3 = this;

        var asPath,
            options,
            parsed,
            pathname,
            parsedAs,
            localePathResult,
            pages,
            resolvedAs,
            rewrites,
            _yield2,
            rewritesResult,
            route,
            _args4 = arguments;

        return _regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                asPath = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : url;
                options = _args4.length > 2 && _args4[2] !== undefined ? _args4[2] : {};
                parsed = (0, _parseRelativeUrl.parseRelativeUrl)(url);
                pathname = parsed.pathname;

                if (false) {}

                _context4.next = 7;
                return this.pageLoader.getPageList();

              case 7:
                pages = _context4.sent;
                resolvedAs = asPath;

                if (true) {
                  _context4.next = 19;
                  break;
                }

                _context4.next = 12;
                return (0, _routeLoader.getClientBuildManifest)();

              case 12:
                _yield2 = _context4.sent;
                rewrites = _yield2.__rewrites;
                rewritesResult = (0, _resolveRewrites["default"])(addBasePath(addLocale(asPath, this.locale)), pages, rewrites, parsed.query, function (p) {
                  return resolveDynamicRoute(p, pages);
                }, this.locales);
                resolvedAs = delLocale(delBasePath(rewritesResult.asPath), this.locale);

                if (rewritesResult.matchedPage && rewritesResult.resolvedHref) {
                  // if this directly matches a page we need to update the href to
                  // allow the correct page chunk to be loaded
                  pathname = rewritesResult.resolvedHref;
                  parsed.pathname = pathname;
                  url = (0, _utils.formatWithValidation)(parsed);
                }

                _context4.next = 21;
                break;

              case 19:
                parsed.pathname = resolveDynamicRoute(parsed.pathname, pages);

                if (parsed.pathname !== pathname) {
                  pathname = parsed.pathname;
                  url = (0, _utils.formatWithValidation)(parsed);
                }

              case 21:
                route = (0, _normalizeTrailingSlash.removePathTrailingSlash)(pathname); // Prefetch is not supported in development mode because it would trigger on-demand-entries

                if (false) {}

                return _context4.abrupt("return");

              case 24:
                _context4.next = 26;
                return Promise.all([this.pageLoader._isSsg(route).then(function (isSsg) {
                  return isSsg ? _this3._getStaticData(_this3.pageLoader.getDataHref(url, resolvedAs, true, typeof options.locale !== 'undefined' ? options.locale : _this3.locale)) : false;
                }), this.pageLoader[options.priority ? 'loadPage' : 'prefetch'](route)]);

              case 26:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function prefetch(_x18) {
        return _prefetch.apply(this, arguments);
      }

      return prefetch;
    }()
  }, {
    key: "fetchComponent",
    value: function () {
      var _fetchComponent = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(route) {
        var cancelled, cancel, componentResult, error;
        return _regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                cancelled = false;

                cancel = this.clc = function () {
                  cancelled = true;
                };

                _context5.next = 4;
                return this.pageLoader.loadPage(route);

              case 4:
                componentResult = _context5.sent;

                if (!cancelled) {
                  _context5.next = 9;
                  break;
                }

                error = new Error("Abort fetching component for route: \"".concat(route, "\""));
                error.cancelled = true;
                throw error;

              case 9:
                if (cancel === this.clc) {
                  this.clc = null;
                }

                return _context5.abrupt("return", componentResult);

              case 11:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function fetchComponent(_x19) {
        return _fetchComponent.apply(this, arguments);
      }

      return fetchComponent;
    }()
  }, {
    key: "_getData",
    value: function _getData(fn) {
      var _this4 = this;

      var cancelled = false;

      var cancel = function cancel() {
        cancelled = true;
      };

      this.clc = cancel;
      return fn().then(function (data) {
        if (cancel === _this4.clc) {
          _this4.clc = null;
        }

        if (cancelled) {
          var err = new Error('Loading initial props cancelled');
          err.cancelled = true;
          throw err;
        }

        return data;
      });
    }
  }, {
    key: "_getStaticData",
    value: function _getStaticData(dataHref) {
      var _this5 = this;

      var _URL = new URL(dataHref, window.location.href),
          cacheKey = _URL.href;

      if (false) {}

      return fetchNextData(dataHref, this.isSsr).then(function (data) {
        _this5.sdc[cacheKey] = data;
        return data;
      });
    }
  }, {
    key: "_getServerData",
    value: function _getServerData(dataHref) {
      var _this6 = this;

      var _URL2 = new URL(dataHref, window.location.href),
          resourceKey = _URL2.href;

      if (this.sdr[resourceKey]) {
        return this.sdr[resourceKey];
      }

      return this.sdr[resourceKey] = fetchNextData(dataHref, this.isSsr).then(function (data) {
        delete _this6.sdr[resourceKey];
        return data;
      })["catch"](function (err) {
        delete _this6.sdr[resourceKey];
        throw err;
      });
    }
  }, {
    key: "getInitialProps",
    value: function getInitialProps(Component, ctx) {
      var App = this.components['/_app'].Component;

      var AppTree = this._wrapApp(App);

      ctx.AppTree = AppTree;
      return (0, _utils.loadGetInitialProps)(App, {
        AppTree: AppTree,
        Component: Component,
        router: this,
        ctx: ctx
      });
    }
  }, {
    key: "abortComponentLoad",
    value: function abortComponentLoad(as, routeProps) {
      if (this.clc) {
        Router.events.emit('routeChangeError', buildCancellationError(), as, routeProps);
        this.clc();
        this.clc = null;
      }
    }
  }, {
    key: "notify",
    value: function notify(data, resetScroll) {
      return this.sub(data, this.components['/_app'].Component, resetScroll);
    }
  }]);

  return Router;
}();

exports["default"] = Router;
Router.events = (0, _mitt["default"])();

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../compiled/webpack/module.js */ "./node_modules/next/dist/compiled/webpack/module.js")(module)))

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/format-url.js":
/*!***************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/format-url.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {

exports.__esModule = true;
exports.formatUrl = formatUrl;

var querystring = _interopRequireWildcard(__webpack_require__(/*! ./querystring */ "./node_modules/next/dist/next-server/lib/router/utils/querystring.js"));

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
} // Format function modified from nodejs
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.


var slashedProtocols = /https?|ftp|gopher|file/;

function formatUrl(urlObj) {
  var auth = urlObj.auth,
      hostname = urlObj.hostname;
  var protocol = urlObj.protocol || '';
  var pathname = urlObj.pathname || '';
  var hash = urlObj.hash || '';
  var query = urlObj.query || '';
  var host = false;
  auth = auth ? encodeURIComponent(auth).replace(/%3A/i, ':') + '@' : '';

  if (urlObj.host) {
    host = auth + urlObj.host;
  } else if (hostname) {
    host = auth + (~hostname.indexOf(':') ? "[".concat(hostname, "]") : hostname);

    if (urlObj.port) {
      host += ':' + urlObj.port;
    }
  }

  if (query && typeof query === 'object') {
    query = String(querystring.urlQueryToSearchParams(query));
  }

  var search = urlObj.search || query && "?".concat(query) || '';
  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  if (urlObj.slashes || (!protocol || slashedProtocols.test(protocol)) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname[0] !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash[0] !== '#') hash = '#' + hash;
  if (search && search[0] !== '?') search = '?' + search;
  pathname = pathname.replace(/[?#]/g, encodeURIComponent);
  search = search.replace('#', '%23');
  return "".concat(protocol).concat(host).concat(pathname).concat(search).concat(hash);
}

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../compiled/webpack/module.js */ "./node_modules/next/dist/compiled/webpack/module.js")(module)))

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/get-asset-path-from-route.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/get-asset-path-from-route.js ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {

exports.__esModule = true;
exports["default"] = getAssetPathFromRoute; // Translates a logical route into its pages asset path (relative from a common prefix)
// "asset path" being its javascript file, data file, prerendered html,...

function getAssetPathFromRoute(route) {
  var ext = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var path = route === '/' ? '/index' : /^\/index(\/|$)/.test(route) ? "/index".concat(route) : "".concat(route);
  return path + ext;
}

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../compiled/webpack/module.js */ "./node_modules/next/dist/compiled/webpack/module.js")(module)))

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/is-dynamic.js":
/*!***************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/is-dynamic.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {

exports.__esModule = true;
exports.isDynamicRoute = isDynamicRoute; // Identify /[param]/ in route string

var TEST_ROUTE = /\/\[[^/]+?\](?=\/|$)/;

function isDynamicRoute(route) {
  return TEST_ROUTE.test(route);
}

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../compiled/webpack/module.js */ "./node_modules/next/dist/compiled/webpack/module.js")(module)))

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/parse-relative-url.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/parse-relative-url.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {

exports.__esModule = true;
exports.parseRelativeUrl = parseRelativeUrl;

var _utils = __webpack_require__(/*! ../../utils */ "./node_modules/next/dist/next-server/lib/utils.js");

var _querystring = __webpack_require__(/*! ./querystring */ "./node_modules/next/dist/next-server/lib/router/utils/querystring.js");
/**
* Parses path-relative urls (e.g. `/hello/world?foo=bar`). If url isn't path-relative
* (e.g. `./hello`) then at least base must be.
* Absolute urls are rejected with one exception, in the browser, absolute urls that are on
* the current origin will be parsed as relative
*/


function parseRelativeUrl(url, base) {
  var globalBase = new URL(false ? undefined : (0, _utils.getLocationOrigin)());
  var resolvedBase = base ? new URL(base, globalBase) : globalBase;

  var _URL = new URL(url, resolvedBase),
      pathname = _URL.pathname,
      searchParams = _URL.searchParams,
      search = _URL.search,
      hash = _URL.hash,
      href = _URL.href,
      origin = _URL.origin;

  if (origin !== globalBase.origin) {
    throw new Error("invariant: invalid relative URL, router received ".concat(url));
  }

  return {
    pathname: pathname,
    query: (0, _querystring.searchParamsToUrlQuery)(searchParams),
    search: search,
    hash: hash,
    href: href.slice(globalBase.origin.length)
  };
}

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../compiled/webpack/module.js */ "./node_modules/next/dist/compiled/webpack/module.js")(module)))

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/querystring.js":
/*!****************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/querystring.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {

var _slicedToArray = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/slicedToArray */ "./node_modules/next/node_modules/@babel/runtime/helpers/slicedToArray.js");

exports.__esModule = true;
exports.searchParamsToUrlQuery = searchParamsToUrlQuery;
exports.urlQueryToSearchParams = urlQueryToSearchParams;
exports.assign = assign;

function searchParamsToUrlQuery(searchParams) {
  var query = {};
  searchParams.forEach(function (value, key) {
    if (typeof query[key] === 'undefined') {
      query[key] = value;
    } else if (Array.isArray(query[key])) {
      ;
      query[key].push(value);
    } else {
      query[key] = [query[key], value];
    }
  });
  return query;
}

function stringifyUrlQueryParam(param) {
  if (typeof param === 'string' || typeof param === 'number' && !isNaN(param) || typeof param === 'boolean') {
    return String(param);
  } else {
    return '';
  }
}

function urlQueryToSearchParams(urlQuery) {
  var result = new URLSearchParams();
  Object.entries(urlQuery).forEach(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
        key = _ref2[0],
        value = _ref2[1];

    if (Array.isArray(value)) {
      value.forEach(function (item) {
        return result.append(key, stringifyUrlQueryParam(item));
      });
    } else {
      result.set(key, stringifyUrlQueryParam(value));
    }
  });
  return result;
}

function assign(target) {
  for (var _len = arguments.length, searchParamsList = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    searchParamsList[_key - 1] = arguments[_key];
  }

  searchParamsList.forEach(function (searchParams) {
    Array.from(searchParams.keys()).forEach(function (key) {
      return target["delete"](key);
    });
    searchParams.forEach(function (value, key) {
      return target.append(key, value);
    });
  });
  return target;
}

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../compiled/webpack/module.js */ "./node_modules/next/dist/compiled/webpack/module.js")(module)))

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/resolve-rewrites-noop.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/resolve-rewrites-noop.js ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {

exports.__esModule = true;
exports["default"] = resolveRewrites;

function resolveRewrites() {}

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../compiled/webpack/module.js */ "./node_modules/next/dist/compiled/webpack/module.js")(module)))

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/route-matcher.js":
/*!******************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/route-matcher.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {

exports.__esModule = true;
exports.getRouteMatcher = getRouteMatcher;

function getRouteMatcher(routeRegex) {
  var re = routeRegex.re,
      groups = routeRegex.groups;
  return function (pathname) {
    var routeMatch = re.exec(pathname);

    if (!routeMatch) {
      return false;
    }

    var decode = function decode(param) {
      try {
        return decodeURIComponent(param);
      } catch (_) {
        var err = new Error('failed to decode param');
        err.code = 'DECODE_FAILED';
        throw err;
      }
    };

    var params = {};
    Object.keys(groups).forEach(function (slugName) {
      var g = groups[slugName];
      var m = routeMatch[g.pos];

      if (m !== undefined) {
        params[slugName] = ~m.indexOf('/') ? m.split('/').map(function (entry) {
          return decode(entry);
        }) : g.repeat ? [decode(m)] : decode(m);
      }
    });
    return params;
  };
}

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../compiled/webpack/module.js */ "./node_modules/next/dist/compiled/webpack/module.js")(module)))

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/router/utils/route-regex.js":
/*!****************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/router/utils/route-regex.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {

exports.__esModule = true;
exports.getRouteRegex = getRouteRegex; // this isn't importing the escape-string-regex module
// to reduce bytes

function escapeRegex(str) {
  return str.replace(/[|\\{}()[\]^$+*?.-]/g, '\\$&');
}

function parseParameter(param) {
  var optional = param.startsWith('[') && param.endsWith(']');

  if (optional) {
    param = param.slice(1, -1);
  }

  var repeat = param.startsWith('...');

  if (repeat) {
    param = param.slice(3);
  }

  return {
    key: param,
    repeat: repeat,
    optional: optional
  };
}

function getRouteRegex(normalizedRoute) {
  var segments = (normalizedRoute.replace(/\/$/, '') || '/').slice(1).split('/');
  var groups = {};
  var groupIndex = 1;
  var parameterizedRoute = segments.map(function (segment) {
    if (segment.startsWith('[') && segment.endsWith(']')) {
      var _parseParameter = parseParameter(segment.slice(1, -1)),
          key = _parseParameter.key,
          optional = _parseParameter.optional,
          repeat = _parseParameter.repeat;

      groups[key] = {
        pos: groupIndex++,
        repeat: repeat,
        optional: optional
      };
      return repeat ? optional ? '(?:/(.+?))?' : '/(.+?)' : '/([^/]+?)';
    } else {
      return "/".concat(escapeRegex(segment));
    }
  }).join(''); // dead code eliminate for browser since it's only needed
  // while generating routes-manifest

  if (false) { var namedParameterizedRoute, routeKeys, getSafeRouteKey, routeKeyCharLength, routeKeyCharCode; }

  return {
    re: new RegExp("^".concat(parameterizedRoute, "(?:/)?$")),
    groups: groups
  };
}

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../../compiled/webpack/module.js */ "./node_modules/next/dist/compiled/webpack/module.js")(module)))

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/side-effect.js":
/*!***************************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/side-effect.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {

var _toConsumableArray = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/toConsumableArray */ "./node_modules/next/node_modules/@babel/runtime/helpers/toConsumableArray.js");

var _classCallCheck = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/classCallCheck */ "./node_modules/next/node_modules/@babel/runtime/helpers/classCallCheck.js");

var _createClass = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/createClass */ "./node_modules/next/node_modules/@babel/runtime/helpers/createClass.js");

var _assertThisInitialized = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/assertThisInitialized */ "./node_modules/next/node_modules/@babel/runtime/helpers/assertThisInitialized.js");

var _inherits = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/inherits */ "./node_modules/next/node_modules/@babel/runtime/helpers/inherits.js");

var _possibleConstructorReturn = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/next/node_modules/@babel/runtime/helpers/possibleConstructorReturn.js");

var _getPrototypeOf = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/getPrototypeOf */ "./node_modules/next/node_modules/@babel/runtime/helpers/getPrototypeOf.js");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

exports.__esModule = true;
exports["default"] = void 0;

var _react = __webpack_require__(/*! react */ "./node_modules/react/index.js");

var isServer = false;

var _default = /*#__PURE__*/function (_react$Component) {
  _inherits(_default, _react$Component);

  var _super = _createSuper(_default);

  function _default(props) {
    var _this;

    _classCallCheck(this, _default);

    _this = _super.call(this, props);
    _this._hasHeadManager = void 0;

    _this.emitChange = function () {
      if (_this._hasHeadManager) {
        _this.props.headManager.updateHead(_this.props.reduceComponentsToState(_toConsumableArray(_this.props.headManager.mountedInstances), _this.props));
      }
    };

    _this._hasHeadManager = _this.props.headManager && _this.props.headManager.mountedInstances;

    if (isServer && _this._hasHeadManager) {
      _this.props.headManager.mountedInstances.add(_assertThisInitialized(_this));

      _this.emitChange();
    }

    return _this;
  }

  _createClass(_default, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this._hasHeadManager) {
        this.props.headManager.mountedInstances.add(this);
      }

      this.emitChange();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.emitChange();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      if (this._hasHeadManager) {
        this.props.headManager.mountedInstances["delete"](this);
      }

      this.emitChange();
    }
  }, {
    key: "render",
    value: function render() {
      return null;
    }
  }]);

  return _default;
}(_react.Component);

exports["default"] = _default;

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../compiled/webpack/module.js */ "./node_modules/next/dist/compiled/webpack/module.js")(module)))

/***/ }),

/***/ "./node_modules/next/dist/next-server/lib/utils.js":
/*!*********************************************************!*\
  !*** ./node_modules/next/dist/next-server/lib/utils.js ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(module) {

var _regeneratorRuntime = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/regenerator */ "./node_modules/next/node_modules/@babel/runtime/regenerator/index.js");

var _asyncToGenerator = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/asyncToGenerator */ "./node_modules/next/node_modules/@babel/runtime/helpers/asyncToGenerator.js");

exports.__esModule = true;
exports.execOnce = execOnce;
exports.getLocationOrigin = getLocationOrigin;
exports.getURL = getURL;
exports.getDisplayName = getDisplayName;
exports.isResSent = isResSent;
exports.loadGetInitialProps = loadGetInitialProps;
exports.formatWithValidation = formatWithValidation;
exports.ST = exports.SP = exports.urlObjectKeys = void 0;

var _formatUrl = __webpack_require__(/*! ./router/utils/format-url */ "./node_modules/next/dist/next-server/lib/router/utils/format-url.js");
/**
* Utils
*/


function execOnce(fn) {
  var used = false;
  var result;
  return function () {
    if (!used) {
      used = true;
      result = fn.apply(void 0, arguments);
    }

    return result;
  };
}

function getLocationOrigin() {
  var _window$location = window.location,
      protocol = _window$location.protocol,
      hostname = _window$location.hostname,
      port = _window$location.port;
  return "".concat(protocol, "//").concat(hostname).concat(port ? ':' + port : '');
}

function getURL() {
  var href = window.location.href;
  var origin = getLocationOrigin();
  return href.substring(origin.length);
}

function getDisplayName(Component) {
  return typeof Component === 'string' ? Component : Component.displayName || Component.name || 'Unknown';
}

function isResSent(res) {
  return res.finished || res.headersSent;
}

function loadGetInitialProps(_x, _x2) {
  return _loadGetInitialProps.apply(this, arguments);
}

function _loadGetInitialProps() {
  _loadGetInitialProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(App, ctx) {
    var _App$prototype, message, res, props, _message;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (false) {}

            if (!((_App$prototype = App.prototype) != null && _App$prototype.getInitialProps)) {
              _context.next = 4;
              break;
            }

            message = "\"".concat(getDisplayName(App), ".getInitialProps()\" is defined as an instance method - visit https://nextjs.org/docs/messages/get-initial-props-as-an-instance-method for more information.");
            throw new Error(message);

          case 4:
            // when called from _app `ctx` is nested in `ctx`
            res = ctx.res || ctx.ctx && ctx.ctx.res;

            if (App.getInitialProps) {
              _context.next = 12;
              break;
            }

            if (!(ctx.ctx && ctx.Component)) {
              _context.next = 11;
              break;
            }

            _context.next = 9;
            return loadGetInitialProps(ctx.Component, ctx.ctx);

          case 9:
            _context.t0 = _context.sent;
            return _context.abrupt("return", {
              pageProps: _context.t0
            });

          case 11:
            return _context.abrupt("return", {});

          case 12:
            _context.next = 14;
            return App.getInitialProps(ctx);

          case 14:
            props = _context.sent;

            if (!(res && isResSent(res))) {
              _context.next = 17;
              break;
            }

            return _context.abrupt("return", props);

          case 17:
            if (props) {
              _context.next = 20;
              break;
            }

            _message = "\"".concat(getDisplayName(App), ".getInitialProps()\" should resolve to an object. But found \"").concat(props, "\" instead.");
            throw new Error(_message);

          case 20:
            if (true) {
              if (Object.keys(props).length === 0 && !ctx.ctx) {
                console.warn("".concat(getDisplayName(App), " returned an empty object from `getInitialProps`. This de-optimizes and prevents automatic static optimization. https://nextjs.org/docs/messages/empty-object-getInitialProps"));
              }
            }

            return _context.abrupt("return", props);

          case 22:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _loadGetInitialProps.apply(this, arguments);
}

var urlObjectKeys = ['auth', 'hash', 'host', 'hostname', 'href', 'path', 'pathname', 'port', 'protocol', 'query', 'search', 'slashes'];
exports.urlObjectKeys = urlObjectKeys;

function formatWithValidation(url) {
  if (true) {
    if (url !== null && typeof url === 'object') {
      Object.keys(url).forEach(function (key) {
        if (urlObjectKeys.indexOf(key) === -1) {
          console.warn("Unknown key passed via urlObject into url.format: ".concat(key));
        }
      });
    }
  }

  return (0, _formatUrl.formatUrl)(url);
}

var SP = typeof performance !== 'undefined';
exports.SP = SP;
var ST = SP && typeof performance.mark === 'function' && typeof performance.measure === 'function';
exports.ST = ST;

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../compiled/webpack/module.js */ "./node_modules/next/dist/compiled/webpack/module.js")(module)))

/***/ }),

/***/ "./node_modules/next/dist/next-server/server/denormalize-page-path.js":
/*!****************************************************************************!*\
  !*** ./node_modules/next/dist/next-server/server/denormalize-page-path.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
exports.__esModule=true;exports.normalizePathSep=normalizePathSep;exports.denormalizePagePath=denormalizePagePath;function normalizePathSep(path){return path.replace(/\\/g,'/');}function denormalizePagePath(page){page=normalizePathSep(page);if(page.startsWith('/index/')){page=page.slice(6);}else if(page==='/index'){page='/';}return page;}
//# sourceMappingURL=denormalize-page-path.js.map

/***/ }),

/***/ "./node_modules/next/head.js":
/*!***********************************!*\
  !*** ./node_modules/next/head.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! ./dist/next-server/lib/head */ "./node_modules/next/dist/next-server/lib/head.js")


/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/arrayLikeToArray.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/arrayLikeToArray.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

module.exports = _arrayLikeToArray;

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/arrayWithHoles.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/arrayWithHoles.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

module.exports = _arrayWithHoles;

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/arrayWithoutHoles.js":
/*!************************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/arrayWithoutHoles.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayLikeToArray = __webpack_require__(/*! ./arrayLikeToArray */ "./node_modules/next/node_modules/@babel/runtime/helpers/arrayLikeToArray.js");

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return arrayLikeToArray(arr);
}

module.exports = _arrayWithoutHoles;

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/assertThisInitialized.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/assertThisInitialized.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

module.exports = _assertThisInitialized;

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/asyncToGenerator.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/asyncToGenerator.js ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

module.exports = _asyncToGenerator;

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/classCallCheck.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/classCallCheck.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

module.exports = _classCallCheck;

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/construct.js":
/*!****************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/construct.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var setPrototypeOf = __webpack_require__(/*! ./setPrototypeOf */ "./node_modules/next/node_modules/@babel/runtime/helpers/setPrototypeOf.js");

var isNativeReflectConstruct = __webpack_require__(/*! ./isNativeReflectConstruct */ "./node_modules/next/node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js");

function _construct(Parent, args, Class) {
  if (isNativeReflectConstruct()) {
    module.exports = _construct = Reflect.construct;
  } else {
    module.exports = _construct = function _construct(Parent, args, Class) {
      var a = [null];
      a.push.apply(a, args);
      var Constructor = Function.bind.apply(Parent, a);
      var instance = new Constructor();
      if (Class) setPrototypeOf(instance, Class.prototype);
      return instance;
    };
  }

  return _construct.apply(null, arguments);
}

module.exports = _construct;

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/createClass.js":
/*!******************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/createClass.js ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

module.exports = _createClass;

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/defineProperty.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/defineProperty.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

module.exports = _defineProperty;

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty.js ***!
  \*************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return _defineProperty; });
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/getPrototypeOf.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/getPrototypeOf.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _getPrototypeOf(o) {
  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

module.exports = _getPrototypeOf;

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/inherits.js":
/*!***************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/inherits.js ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var setPrototypeOf = __webpack_require__(/*! ./setPrototypeOf */ "./node_modules/next/node_modules/@babel/runtime/helpers/setPrototypeOf.js");

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) setPrototypeOf(subClass, superClass);
}

module.exports = _inherits;

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/interopRequireDefault.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/interopRequireDefault.js ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}

module.exports = _interopRequireDefault;

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/interopRequireWildcard.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/interopRequireWildcard.js ***!
  \*****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/next/node_modules/@babel/runtime/helpers/typeof.js");

function _getRequireWildcardCache() {
  if (typeof WeakMap !== "function") return null;
  var cache = new WeakMap();

  _getRequireWildcardCache = function _getRequireWildcardCache() {
    return cache;
  };

  return cache;
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  }

  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }

  var cache = _getRequireWildcardCache();

  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }

  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }

  newObj["default"] = obj;

  if (cache) {
    cache.set(obj, newObj);
  }

  return newObj;
}

module.exports = _interopRequireWildcard;

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/isNativeReflectConstruct.js ***!
  \*******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

module.exports = _isNativeReflectConstruct;

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/iterableToArray.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/iterableToArray.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
}

module.exports = _iterableToArray;

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/iterableToArrayLimit.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/iterableToArrayLimit.js ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;

  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

module.exports = _iterableToArrayLimit;

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/nonIterableRest.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/nonIterableRest.js ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

module.exports = _nonIterableRest;

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/nonIterableSpread.js":
/*!************************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/nonIterableSpread.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

module.exports = _nonIterableSpread;

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/possibleConstructorReturn.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/possibleConstructorReturn.js ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var _typeof = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/next/node_modules/@babel/runtime/helpers/typeof.js");

var assertThisInitialized = __webpack_require__(/*! ./assertThisInitialized */ "./node_modules/next/node_modules/@babel/runtime/helpers/assertThisInitialized.js");

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
  }

  return assertThisInitialized(self);
}

module.exports = _possibleConstructorReturn;

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/setPrototypeOf.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/setPrototypeOf.js ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _setPrototypeOf(o, p) {
  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

module.exports = _setPrototypeOf;

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/slicedToArray.js":
/*!********************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/slicedToArray.js ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayWithHoles = __webpack_require__(/*! ./arrayWithHoles */ "./node_modules/next/node_modules/@babel/runtime/helpers/arrayWithHoles.js");

var iterableToArrayLimit = __webpack_require__(/*! ./iterableToArrayLimit */ "./node_modules/next/node_modules/@babel/runtime/helpers/iterableToArrayLimit.js");

var unsupportedIterableToArray = __webpack_require__(/*! ./unsupportedIterableToArray */ "./node_modules/next/node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js");

var nonIterableRest = __webpack_require__(/*! ./nonIterableRest */ "./node_modules/next/node_modules/@babel/runtime/helpers/nonIterableRest.js");

function _slicedToArray(arr, i) {
  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();
}

module.exports = _slicedToArray;

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/toConsumableArray.js":
/*!************************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/toConsumableArray.js ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayWithoutHoles = __webpack_require__(/*! ./arrayWithoutHoles */ "./node_modules/next/node_modules/@babel/runtime/helpers/arrayWithoutHoles.js");

var iterableToArray = __webpack_require__(/*! ./iterableToArray */ "./node_modules/next/node_modules/@babel/runtime/helpers/iterableToArray.js");

var unsupportedIterableToArray = __webpack_require__(/*! ./unsupportedIterableToArray */ "./node_modules/next/node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js");

var nonIterableSpread = __webpack_require__(/*! ./nonIterableSpread */ "./node_modules/next/node_modules/@babel/runtime/helpers/nonIterableSpread.js");

function _toConsumableArray(arr) {
  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();
}

module.exports = _toConsumableArray;

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/typeof.js":
/*!*************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/typeof.js ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    module.exports = _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    module.exports = _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

module.exports = _typeof;

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/helpers/unsupportedIterableToArray.js ***!
  \*********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var arrayLikeToArray = __webpack_require__(/*! ./arrayLikeToArray */ "./node_modules/next/node_modules/@babel/runtime/helpers/arrayLikeToArray.js");

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
}

module.exports = _unsupportedIterableToArray;

/***/ }),

/***/ "./node_modules/next/node_modules/@babel/runtime/regenerator/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/next/node_modules/@babel/runtime/regenerator/index.js ***!
  \****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! regenerator-runtime */ "./node_modules/regenerator-runtime/runtime.js");


/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./node_modules/react-is/cjs/react-is.development.js":
/*!***********************************************************!*\
  !*** ./node_modules/react-is/cjs/react-is.development.js ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */





if (true) {
  (function() {
'use strict';

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
// (unstable) APIs that have been removed. Can we remove the symbols?

var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

function isValidElementType(type) {
  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
}

function typeOf(object) {
  if (typeof object === 'object' && object !== null) {
    var $$typeof = object.$$typeof;

    switch ($$typeof) {
      case REACT_ELEMENT_TYPE:
        var type = object.type;

        switch (type) {
          case REACT_ASYNC_MODE_TYPE:
          case REACT_CONCURRENT_MODE_TYPE:
          case REACT_FRAGMENT_TYPE:
          case REACT_PROFILER_TYPE:
          case REACT_STRICT_MODE_TYPE:
          case REACT_SUSPENSE_TYPE:
            return type;

          default:
            var $$typeofType = type && type.$$typeof;

            switch ($$typeofType) {
              case REACT_CONTEXT_TYPE:
              case REACT_FORWARD_REF_TYPE:
              case REACT_LAZY_TYPE:
              case REACT_MEMO_TYPE:
              case REACT_PROVIDER_TYPE:
                return $$typeofType;

              default:
                return $$typeof;
            }

        }

      case REACT_PORTAL_TYPE:
        return $$typeof;
    }
  }

  return undefined;
} // AsyncMode is deprecated along with isAsyncMode

var AsyncMode = REACT_ASYNC_MODE_TYPE;
var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
var ContextConsumer = REACT_CONTEXT_TYPE;
var ContextProvider = REACT_PROVIDER_TYPE;
var Element = REACT_ELEMENT_TYPE;
var ForwardRef = REACT_FORWARD_REF_TYPE;
var Fragment = REACT_FRAGMENT_TYPE;
var Lazy = REACT_LAZY_TYPE;
var Memo = REACT_MEMO_TYPE;
var Portal = REACT_PORTAL_TYPE;
var Profiler = REACT_PROFILER_TYPE;
var StrictMode = REACT_STRICT_MODE_TYPE;
var Suspense = REACT_SUSPENSE_TYPE;
var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

function isAsyncMode(object) {
  {
    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
    }
  }

  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
}
function isConcurrentMode(object) {
  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
}
function isContextConsumer(object) {
  return typeOf(object) === REACT_CONTEXT_TYPE;
}
function isContextProvider(object) {
  return typeOf(object) === REACT_PROVIDER_TYPE;
}
function isElement(object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
}
function isForwardRef(object) {
  return typeOf(object) === REACT_FORWARD_REF_TYPE;
}
function isFragment(object) {
  return typeOf(object) === REACT_FRAGMENT_TYPE;
}
function isLazy(object) {
  return typeOf(object) === REACT_LAZY_TYPE;
}
function isMemo(object) {
  return typeOf(object) === REACT_MEMO_TYPE;
}
function isPortal(object) {
  return typeOf(object) === REACT_PORTAL_TYPE;
}
function isProfiler(object) {
  return typeOf(object) === REACT_PROFILER_TYPE;
}
function isStrictMode(object) {
  return typeOf(object) === REACT_STRICT_MODE_TYPE;
}
function isSuspense(object) {
  return typeOf(object) === REACT_SUSPENSE_TYPE;
}

exports.AsyncMode = AsyncMode;
exports.ConcurrentMode = ConcurrentMode;
exports.ContextConsumer = ContextConsumer;
exports.ContextProvider = ContextProvider;
exports.Element = Element;
exports.ForwardRef = ForwardRef;
exports.Fragment = Fragment;
exports.Lazy = Lazy;
exports.Memo = Memo;
exports.Portal = Portal;
exports.Profiler = Profiler;
exports.StrictMode = StrictMode;
exports.Suspense = Suspense;
exports.isAsyncMode = isAsyncMode;
exports.isConcurrentMode = isConcurrentMode;
exports.isContextConsumer = isContextConsumer;
exports.isContextProvider = isContextProvider;
exports.isElement = isElement;
exports.isForwardRef = isForwardRef;
exports.isFragment = isFragment;
exports.isLazy = isLazy;
exports.isMemo = isMemo;
exports.isPortal = isPortal;
exports.isProfiler = isProfiler;
exports.isStrictMode = isStrictMode;
exports.isSuspense = isSuspense;
exports.isValidElementType = isValidElementType;
exports.typeOf = typeOf;
  })();
}


/***/ }),

/***/ "./node_modules/react-is/index.js":
/*!****************************************!*\
  !*** ./node_modules/react-is/index.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/react-is.development.js */ "./node_modules/react-is/cjs/react-is.development.js");
}


/***/ }),

/***/ "./node_modules/react/cjs/react-jsx-dev-runtime.development.js":
/*!*********************************************************************!*\
  !*** ./node_modules/react/cjs/react-jsx-dev-runtime.development.js ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v17.0.2
 * react-jsx-dev-runtime.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



if (true) {
  (function() {
'use strict';

var React = __webpack_require__(/*! react */ "./node_modules/react/index.js");
var _assign = __webpack_require__(/*! object-assign */ "./node_modules/next/dist/build/polyfills/object-assign.js");

// ATTENTION
// When adding new symbols to this file,
// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var REACT_ELEMENT_TYPE = 0xeac7;
var REACT_PORTAL_TYPE = 0xeaca;
exports.Fragment = 0xeacb;
var REACT_STRICT_MODE_TYPE = 0xeacc;
var REACT_PROFILER_TYPE = 0xead2;
var REACT_PROVIDER_TYPE = 0xeacd;
var REACT_CONTEXT_TYPE = 0xeace;
var REACT_FORWARD_REF_TYPE = 0xead0;
var REACT_SUSPENSE_TYPE = 0xead1;
var REACT_SUSPENSE_LIST_TYPE = 0xead8;
var REACT_MEMO_TYPE = 0xead3;
var REACT_LAZY_TYPE = 0xead4;
var REACT_BLOCK_TYPE = 0xead9;
var REACT_SERVER_BLOCK_TYPE = 0xeada;
var REACT_FUNDAMENTAL_TYPE = 0xead5;
var REACT_SCOPE_TYPE = 0xead7;
var REACT_OPAQUE_ID_TYPE = 0xeae0;
var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
var REACT_OFFSCREEN_TYPE = 0xeae2;
var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;

if (typeof Symbol === 'function' && Symbol.for) {
  var symbolFor = Symbol.for;
  REACT_ELEMENT_TYPE = symbolFor('react.element');
  REACT_PORTAL_TYPE = symbolFor('react.portal');
  exports.Fragment = symbolFor('react.fragment');
  REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
  REACT_PROFILER_TYPE = symbolFor('react.profiler');
  REACT_PROVIDER_TYPE = symbolFor('react.provider');
  REACT_CONTEXT_TYPE = symbolFor('react.context');
  REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
  REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
  REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
  REACT_MEMO_TYPE = symbolFor('react.memo');
  REACT_LAZY_TYPE = symbolFor('react.lazy');
  REACT_BLOCK_TYPE = symbolFor('react.block');
  REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
  REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
  REACT_SCOPE_TYPE = symbolFor('react.scope');
  REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
  REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
  REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
  REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
}

var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator';
function getIteratorFn(maybeIterable) {
  if (maybeIterable === null || typeof maybeIterable !== 'object') {
    return null;
  }

  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

  if (typeof maybeIterator === 'function') {
    return maybeIterator;
  }

  return null;
}

var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

function error(format) {
  {
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }

    printWarning('error', format, args);
  }
}

function printWarning(level, format, args) {
  // When changing this logic, you might want to also
  // update consoleWithStackDev.www.js as well.
  {
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var stack = ReactDebugCurrentFrame.getStackAddendum();

    if (stack !== '') {
      format += '%s';
      args = args.concat([stack]);
    }

    var argsWithFormat = args.map(function (item) {
      return '' + item;
    }); // Careful: RN currently depends on this prefix

    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
    // breaks IE9: https://github.com/facebook/react/issues/13610
    // eslint-disable-next-line react-internal/no-production-logging

    Function.prototype.apply.call(console[level], console, argsWithFormat);
  }
}

// Filter certain DOM attributes (e.g. src, href) if their values are empty strings.

var enableScopeAPI = false; // Experimental Create Event Handle API.

function isValidElementType(type) {
  if (typeof type === 'string' || typeof type === 'function') {
    return true;
  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


  if (type === exports.Fragment || type === REACT_PROFILER_TYPE || type === REACT_DEBUG_TRACING_MODE_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI ) {
    return true;
  }

  if (typeof type === 'object' && type !== null) {
    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
      return true;
    }
  }

  return false;
}

function getWrappedName(outerType, innerType, wrapperName) {
  var functionName = innerType.displayName || innerType.name || '';
  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
}

function getContextName(type) {
  return type.displayName || 'Context';
}

function getComponentName(type) {
  if (type == null) {
    // Host root, text node or just invalid type.
    return null;
  }

  {
    if (typeof type.tag === 'number') {
      error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
    }
  }

  if (typeof type === 'function') {
    return type.displayName || type.name || null;
  }

  if (typeof type === 'string') {
    return type;
  }

  switch (type) {
    case exports.Fragment:
      return 'Fragment';

    case REACT_PORTAL_TYPE:
      return 'Portal';

    case REACT_PROFILER_TYPE:
      return 'Profiler';

    case REACT_STRICT_MODE_TYPE:
      return 'StrictMode';

    case REACT_SUSPENSE_TYPE:
      return 'Suspense';

    case REACT_SUSPENSE_LIST_TYPE:
      return 'SuspenseList';
  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        var context = type;
        return getContextName(context) + '.Consumer';

      case REACT_PROVIDER_TYPE:
        var provider = type;
        return getContextName(provider._context) + '.Provider';

      case REACT_FORWARD_REF_TYPE:
        return getWrappedName(type, type.render, 'ForwardRef');

      case REACT_MEMO_TYPE:
        return getComponentName(type.type);

      case REACT_BLOCK_TYPE:
        return getComponentName(type._render);

      case REACT_LAZY_TYPE:
        {
          var lazyComponent = type;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;

          try {
            return getComponentName(init(payload));
          } catch (x) {
            return null;
          }
        }
    }
  }

  return null;
}

// Helpers to patch console.logs to avoid logging during side-effect free
// replaying on render function. This currently only patches the object
// lazily which won't cover if the log function was extracted eagerly.
// We could also eagerly patch the method.
var disabledDepth = 0;
var prevLog;
var prevInfo;
var prevWarn;
var prevError;
var prevGroup;
var prevGroupCollapsed;
var prevGroupEnd;

function disabledLog() {}

disabledLog.__reactDisabledLog = true;
function disableLogs() {
  {
    if (disabledDepth === 0) {
      /* eslint-disable react-internal/no-production-logging */
      prevLog = console.log;
      prevInfo = console.info;
      prevWarn = console.warn;
      prevError = console.error;
      prevGroup = console.group;
      prevGroupCollapsed = console.groupCollapsed;
      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

      var props = {
        configurable: true,
        enumerable: true,
        value: disabledLog,
        writable: true
      }; // $FlowFixMe Flow thinks console is immutable.

      Object.defineProperties(console, {
        info: props,
        log: props,
        warn: props,
        error: props,
        group: props,
        groupCollapsed: props,
        groupEnd: props
      });
      /* eslint-enable react-internal/no-production-logging */
    }

    disabledDepth++;
  }
}
function reenableLogs() {
  {
    disabledDepth--;

    if (disabledDepth === 0) {
      /* eslint-disable react-internal/no-production-logging */
      var props = {
        configurable: true,
        enumerable: true,
        writable: true
      }; // $FlowFixMe Flow thinks console is immutable.

      Object.defineProperties(console, {
        log: _assign({}, props, {
          value: prevLog
        }),
        info: _assign({}, props, {
          value: prevInfo
        }),
        warn: _assign({}, props, {
          value: prevWarn
        }),
        error: _assign({}, props, {
          value: prevError
        }),
        group: _assign({}, props, {
          value: prevGroup
        }),
        groupCollapsed: _assign({}, props, {
          value: prevGroupCollapsed
        }),
        groupEnd: _assign({}, props, {
          value: prevGroupEnd
        })
      });
      /* eslint-enable react-internal/no-production-logging */
    }

    if (disabledDepth < 0) {
      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
    }
  }
}

var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
var prefix;
function describeBuiltInComponentFrame(name, source, ownerFn) {
  {
    if (prefix === undefined) {
      // Extract the VM specific prefix used by each line.
      try {
        throw Error();
      } catch (x) {
        var match = x.stack.trim().match(/\n( *(at )?)/);
        prefix = match && match[1] || '';
      }
    } // We use the prefix to ensure our stacks line up with native stack frames.


    return '\n' + prefix + name;
  }
}
var reentry = false;
var componentFrameCache;

{
  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
  componentFrameCache = new PossiblyWeakMap();
}

function describeNativeComponentFrame(fn, construct) {
  // If something asked for a stack inside a fake render, it should get ignored.
  if (!fn || reentry) {
    return '';
  }

  {
    var frame = componentFrameCache.get(fn);

    if (frame !== undefined) {
      return frame;
    }
  }

  var control;
  reentry = true;
  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

  Error.prepareStackTrace = undefined;
  var previousDispatcher;

  {
    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
    // for warnings.

    ReactCurrentDispatcher.current = null;
    disableLogs();
  }

  try {
    // This should throw.
    if (construct) {
      // Something should be setting the props in the constructor.
      var Fake = function () {
        throw Error();
      }; // $FlowFixMe


      Object.defineProperty(Fake.prototype, 'props', {
        set: function () {
          // We use a throwing setter instead of frozen or non-writable props
          // because that won't throw in a non-strict mode function.
          throw Error();
        }
      });

      if (typeof Reflect === 'object' && Reflect.construct) {
        // We construct a different control for this case to include any extra
        // frames added by the construct call.
        try {
          Reflect.construct(Fake, []);
        } catch (x) {
          control = x;
        }

        Reflect.construct(fn, [], Fake);
      } else {
        try {
          Fake.call();
        } catch (x) {
          control = x;
        }

        fn.call(Fake.prototype);
      }
    } else {
      try {
        throw Error();
      } catch (x) {
        control = x;
      }

      fn();
    }
  } catch (sample) {
    // This is inlined manually because closure doesn't do it for us.
    if (sample && control && typeof sample.stack === 'string') {
      // This extracts the first frame from the sample that isn't also in the control.
      // Skipping one frame that we assume is the frame that calls the two.
      var sampleLines = sample.stack.split('\n');
      var controlLines = control.stack.split('\n');
      var s = sampleLines.length - 1;
      var c = controlLines.length - 1;

      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
        // We expect at least one stack frame to be shared.
        // Typically this will be the root most one. However, stack frames may be
        // cut off due to maximum stack limits. In this case, one maybe cut off
        // earlier than the other. We assume that the sample is longer or the same
        // and there for cut off earlier. So we should find the root most frame in
        // the sample somewhere in the control.
        c--;
      }

      for (; s >= 1 && c >= 0; s--, c--) {
        // Next we find the first one that isn't the same which should be the
        // frame that called our sample function and the control.
        if (sampleLines[s] !== controlLines[c]) {
          // In V8, the first line is describing the message but other VMs don't.
          // If we're about to return the first line, and the control is also on the same
          // line, that's a pretty good indicator that our sample threw at same line as
          // the control. I.e. before we entered the sample frame. So we ignore this result.
          // This can happen if you passed a class to function component, or non-function.
          if (s !== 1 || c !== 1) {
            do {
              s--;
              c--; // We may still have similar intermediate frames from the construct call.
              // The next one that isn't the same should be our match though.

              if (c < 0 || sampleLines[s] !== controlLines[c]) {
                // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');

                {
                  if (typeof fn === 'function') {
                    componentFrameCache.set(fn, _frame);
                  }
                } // Return the line we found.


                return _frame;
              }
            } while (s >= 1 && c >= 0);
          }

          break;
        }
      }
    }
  } finally {
    reentry = false;

    {
      ReactCurrentDispatcher.current = previousDispatcher;
      reenableLogs();
    }

    Error.prepareStackTrace = previousPrepareStackTrace;
  } // Fallback to just using the name if we couldn't make it throw.


  var name = fn ? fn.displayName || fn.name : '';
  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

  {
    if (typeof fn === 'function') {
      componentFrameCache.set(fn, syntheticFrame);
    }
  }

  return syntheticFrame;
}
function describeFunctionComponentFrame(fn, source, ownerFn) {
  {
    return describeNativeComponentFrame(fn, false);
  }
}

function shouldConstruct(Component) {
  var prototype = Component.prototype;
  return !!(prototype && prototype.isReactComponent);
}

function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {

  if (type == null) {
    return '';
  }

  if (typeof type === 'function') {
    {
      return describeNativeComponentFrame(type, shouldConstruct(type));
    }
  }

  if (typeof type === 'string') {
    return describeBuiltInComponentFrame(type);
  }

  switch (type) {
    case REACT_SUSPENSE_TYPE:
      return describeBuiltInComponentFrame('Suspense');

    case REACT_SUSPENSE_LIST_TYPE:
      return describeBuiltInComponentFrame('SuspenseList');
  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_FORWARD_REF_TYPE:
        return describeFunctionComponentFrame(type.render);

      case REACT_MEMO_TYPE:
        // Memo may contain any component type so we recursively resolve it.
        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

      case REACT_BLOCK_TYPE:
        return describeFunctionComponentFrame(type._render);

      case REACT_LAZY_TYPE:
        {
          var lazyComponent = type;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;

          try {
            // Lazy may contain any component type so we recursively resolve it.
            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
          } catch (x) {}
        }
    }
  }

  return '';
}

var loggedTypeFailures = {};
var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;

function setCurrentlyValidatingElement(element) {
  {
    if (element) {
      var owner = element._owner;
      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
      ReactDebugCurrentFrame.setExtraStackFrame(stack);
    } else {
      ReactDebugCurrentFrame.setExtraStackFrame(null);
    }
  }
}

function checkPropTypes(typeSpecs, values, location, componentName, element) {
  {
    // $FlowFixMe This is okay but Flow doesn't know it.
    var has = Function.call.bind(Object.prototype.hasOwnProperty);

    for (var typeSpecName in typeSpecs) {
      if (has(typeSpecs, typeSpecName)) {
        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.

        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
            err.name = 'Invariant Violation';
            throw err;
          }

          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
        } catch (ex) {
          error$1 = ex;
        }

        if (error$1 && !(error$1 instanceof Error)) {
          setCurrentlyValidatingElement(element);

          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);

          setCurrentlyValidatingElement(null);
        }

        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error$1.message] = true;
          setCurrentlyValidatingElement(element);

          error('Failed %s type: %s', location, error$1.message);

          setCurrentlyValidatingElement(null);
        }
      }
    }
  }
}

var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};
var specialPropKeyWarningShown;
var specialPropRefWarningShown;
var didWarnAboutStringRefs;

{
  didWarnAboutStringRefs = {};
}

function hasValidRef(config) {
  {
    if (hasOwnProperty.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }

  return config.ref !== undefined;
}

function hasValidKey(config) {
  {
    if (hasOwnProperty.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }

  return config.key !== undefined;
}

function warnIfStringRefCannotBeAutoConverted(config, self) {
  {
    if (typeof config.ref === 'string' && ReactCurrentOwner.current && self && ReactCurrentOwner.current.stateNode !== self) {
      var componentName = getComponentName(ReactCurrentOwner.current.type);

      if (!didWarnAboutStringRefs[componentName]) {
        error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config.ref);

        didWarnAboutStringRefs[componentName] = true;
      }
    }
  }
}

function defineKeyPropWarningGetter(props, displayName) {
  {
    var warnAboutAccessingKey = function () {
      if (!specialPropKeyWarningShown) {
        specialPropKeyWarningShown = true;

        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
      }
    };

    warnAboutAccessingKey.isReactWarning = true;
    Object.defineProperty(props, 'key', {
      get: warnAboutAccessingKey,
      configurable: true
    });
  }
}

function defineRefPropWarningGetter(props, displayName) {
  {
    var warnAboutAccessingRef = function () {
      if (!specialPropRefWarningShown) {
        specialPropRefWarningShown = true;

        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
      }
    };

    warnAboutAccessingRef.isReactWarning = true;
    Object.defineProperty(props, 'ref', {
      get: warnAboutAccessingRef,
      configurable: true
    });
  }
}
/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */


var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allows us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,
    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,
    // Record the component responsible for creating this element.
    _owner: owner
  };

  {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.

    Object.defineProperty(element._store, 'validated', {
      configurable: false,
      enumerable: false,
      writable: true,
      value: false
    }); // self and source are DEV only properties.

    Object.defineProperty(element, '_self', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: self
    }); // Two elements created in two different places should be considered
    // equal for testing purposes and therefore we hide it from enumeration.

    Object.defineProperty(element, '_source', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: source
    });

    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);
    }
  }

  return element;
};
/**
 * https://github.com/reactjs/rfcs/pull/107
 * @param {*} type
 * @param {object} props
 * @param {string} key
 */

function jsxDEV(type, config, maybeKey, source, self) {
  {
    var propName; // Reserved names are extracted

    var props = {};
    var key = null;
    var ref = null; // Currently, key can be spread in as a prop. This causes a potential
    // issue if key is also explicitly declared (ie. <div {...props} key="Hi" />
    // or <div key="Hi" {...props} /> ). We want to deprecate key spread,
    // but as an intermediary step, we will use jsxDEV for everything except
    // <div {...props} key="Hi" />, because we aren't currently able to tell if
    // key is explicitly declared to be undefined or not.

    if (maybeKey !== undefined) {
      key = '' + maybeKey;
    }

    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    if (hasValidRef(config)) {
      ref = config.ref;
      warnIfStringRefCannotBeAutoConverted(config, self);
    } // Remaining properties are added to a new props object


    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    } // Resolve default props


    if (type && type.defaultProps) {
      var defaultProps = type.defaultProps;

      for (propName in defaultProps) {
        if (props[propName] === undefined) {
          props[propName] = defaultProps[propName];
        }
      }
    }

    if (key || ref) {
      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

      if (key) {
        defineKeyPropWarningGetter(props, displayName);
      }

      if (ref) {
        defineRefPropWarningGetter(props, displayName);
      }
    }

    return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
  }
}

var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

function setCurrentlyValidatingElement$1(element) {
  {
    if (element) {
      var owner = element._owner;
      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
    } else {
      ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
  }
}

var propTypesMisspellWarningShown;

{
  propTypesMisspellWarningShown = false;
}
/**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */

function isValidElement(object) {
  {
    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
  }
}

function getDeclarationErrorAddendum() {
  {
    if (ReactCurrentOwner$1.current) {
      var name = getComponentName(ReactCurrentOwner$1.current.type);

      if (name) {
        return '\n\nCheck the render method of `' + name + '`.';
      }
    }

    return '';
  }
}

function getSourceInfoErrorAddendum(source) {
  {
    if (source !== undefined) {
      var fileName = source.fileName.replace(/^.*[\\\/]/, '');
      var lineNumber = source.lineNumber;
      return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
    }

    return '';
  }
}
/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */


var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  {
    var info = getDeclarationErrorAddendum();

    if (!info) {
      var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

      if (parentName) {
        info = "\n\nCheck the top-level render call using <" + parentName + ">.";
      }
    }

    return info;
  }
}
/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */


function validateExplicitKey(element, parentType) {
  {
    if (!element._store || element._store.validated || element.key != null) {
      return;
    }

    element._store.validated = true;
    var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
      return;
    }

    ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
    // property, it may be the creator of the child that's responsible for
    // assigning it a key.

    var childOwner = '';

    if (element && element._owner && element._owner !== ReactCurrentOwner$1.current) {
      // Give the component that originally created this child.
      childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
    }

    setCurrentlyValidatingElement$1(element);

    error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);

    setCurrentlyValidatingElement$1(null);
  }
}
/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */


function validateChildKeys(node, parentType) {
  {
    if (typeof node !== 'object') {
      return;
    }

    if (Array.isArray(node)) {
      for (var i = 0; i < node.length; i++) {
        var child = node[i];

        if (isValidElement(child)) {
          validateExplicitKey(child, parentType);
        }
      }
    } else if (isValidElement(node)) {
      // This element was passed in a valid location.
      if (node._store) {
        node._store.validated = true;
      }
    } else if (node) {
      var iteratorFn = getIteratorFn(node);

      if (typeof iteratorFn === 'function') {
        // Entry iterators used to provide implicit keys,
        // but now we print a separate warning for them later.
        if (iteratorFn !== node.entries) {
          var iterator = iteratorFn.call(node);
          var step;

          while (!(step = iterator.next()).done) {
            if (isValidElement(step.value)) {
              validateExplicitKey(step.value, parentType);
            }
          }
        }
      }
    }
  }
}
/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */


function validatePropTypes(element) {
  {
    var type = element.type;

    if (type === null || type === undefined || typeof type === 'string') {
      return;
    }

    var propTypes;

    if (typeof type === 'function') {
      propTypes = type.propTypes;
    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
    // Inner props are checked in the reconciler.
    type.$$typeof === REACT_MEMO_TYPE)) {
      propTypes = type.propTypes;
    } else {
      return;
    }

    if (propTypes) {
      // Intentionally inside to avoid triggering lazy initializers:
      var name = getComponentName(type);
      checkPropTypes(propTypes, element.props, 'prop', name, element);
    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:

      var _name = getComponentName(type);

      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
    }

    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
    }
  }
}
/**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */


function validateFragmentProps(fragment) {
  {
    var keys = Object.keys(fragment.props);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];

      if (key !== 'children' && key !== 'key') {
        setCurrentlyValidatingElement$1(fragment);

        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);

        setCurrentlyValidatingElement$1(null);
        break;
      }
    }

    if (fragment.ref !== null) {
      setCurrentlyValidatingElement$1(fragment);

      error('Invalid attribute `ref` supplied to `React.Fragment`.');

      setCurrentlyValidatingElement$1(null);
    }
  }
}

function jsxWithValidation(type, props, key, isStaticChildren, source, self) {
  {
    var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.

    if (!validType) {
      var info = '';

      if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
        info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
      }

      var sourceInfo = getSourceInfoErrorAddendum(source);

      if (sourceInfo) {
        info += sourceInfo;
      } else {
        info += getDeclarationErrorAddendum();
      }

      var typeString;

      if (type === null) {
        typeString = 'null';
      } else if (Array.isArray(type)) {
        typeString = 'array';
      } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
        typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
        info = ' Did you accidentally export a JSX literal instead of a component?';
      } else {
        typeString = typeof type;
      }

      error('React.jsx: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
    }

    var element = jsxDEV(type, props, key, source, self); // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.

    if (element == null) {
      return element;
    } // Skip key warning if the type isn't valid since our key validation logic
    // doesn't expect a non-string/function type and can throw confusing errors.
    // We don't want exception behavior to differ between dev and prod.
    // (Rendering will throw with a helpful message and as soon as the type is
    // fixed, the key warnings will appear.)


    if (validType) {
      var children = props.children;

      if (children !== undefined) {
        if (isStaticChildren) {
          if (Array.isArray(children)) {
            for (var i = 0; i < children.length; i++) {
              validateChildKeys(children[i], type);
            }

            if (Object.freeze) {
              Object.freeze(children);
            }
          } else {
            error('React.jsx: Static children should always be an array. ' + 'You are likely explicitly calling React.jsxs or React.jsxDEV. ' + 'Use the Babel transform instead.');
          }
        } else {
          validateChildKeys(children, type);
        }
      }
    }

    if (type === exports.Fragment) {
      validateFragmentProps(element);
    } else {
      validatePropTypes(element);
    }

    return element;
  }
} // These two functions exist to still get child warnings in dev

var jsxDEV$1 =  jsxWithValidation ;

exports.jsxDEV = jsxDEV$1;
  })();
}


/***/ }),

/***/ "./node_modules/react/cjs/react.development.js":
/*!*****************************************************!*\
  !*** ./node_modules/react/cjs/react.development.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v17.0.2
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



if (true) {
  (function() {
'use strict';

var _assign = __webpack_require__(/*! object-assign */ "./node_modules/next/dist/build/polyfills/object-assign.js");

// TODO: this is special because it gets imported during build.
var ReactVersion = '17.0.2';

// ATTENTION
// When adding new symbols to this file,
// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var REACT_ELEMENT_TYPE = 0xeac7;
var REACT_PORTAL_TYPE = 0xeaca;
exports.Fragment = 0xeacb;
exports.StrictMode = 0xeacc;
exports.Profiler = 0xead2;
var REACT_PROVIDER_TYPE = 0xeacd;
var REACT_CONTEXT_TYPE = 0xeace;
var REACT_FORWARD_REF_TYPE = 0xead0;
exports.Suspense = 0xead1;
var REACT_SUSPENSE_LIST_TYPE = 0xead8;
var REACT_MEMO_TYPE = 0xead3;
var REACT_LAZY_TYPE = 0xead4;
var REACT_BLOCK_TYPE = 0xead9;
var REACT_SERVER_BLOCK_TYPE = 0xeada;
var REACT_FUNDAMENTAL_TYPE = 0xead5;
var REACT_SCOPE_TYPE = 0xead7;
var REACT_OPAQUE_ID_TYPE = 0xeae0;
var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
var REACT_OFFSCREEN_TYPE = 0xeae2;
var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;

if (typeof Symbol === 'function' && Symbol.for) {
  var symbolFor = Symbol.for;
  REACT_ELEMENT_TYPE = symbolFor('react.element');
  REACT_PORTAL_TYPE = symbolFor('react.portal');
  exports.Fragment = symbolFor('react.fragment');
  exports.StrictMode = symbolFor('react.strict_mode');
  exports.Profiler = symbolFor('react.profiler');
  REACT_PROVIDER_TYPE = symbolFor('react.provider');
  REACT_CONTEXT_TYPE = symbolFor('react.context');
  REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
  exports.Suspense = symbolFor('react.suspense');
  REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
  REACT_MEMO_TYPE = symbolFor('react.memo');
  REACT_LAZY_TYPE = symbolFor('react.lazy');
  REACT_BLOCK_TYPE = symbolFor('react.block');
  REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
  REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
  REACT_SCOPE_TYPE = symbolFor('react.scope');
  REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
  REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
  REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
  REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
}

var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator';
function getIteratorFn(maybeIterable) {
  if (maybeIterable === null || typeof maybeIterable !== 'object') {
    return null;
  }

  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

  if (typeof maybeIterator === 'function') {
    return maybeIterator;
  }

  return null;
}

/**
 * Keeps track of the current dispatcher.
 */
var ReactCurrentDispatcher = {
  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null
};

/**
 * Keeps track of the current batch's configuration such as how long an update
 * should suspend for if it needs to.
 */
var ReactCurrentBatchConfig = {
  transition: 0
};

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */
var ReactCurrentOwner = {
  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null
};

var ReactDebugCurrentFrame = {};
var currentExtraStackFrame = null;
function setExtraStackFrame(stack) {
  {
    currentExtraStackFrame = stack;
  }
}

{
  ReactDebugCurrentFrame.setExtraStackFrame = function (stack) {
    {
      currentExtraStackFrame = stack;
    }
  }; // Stack implementation injected by the current renderer.


  ReactDebugCurrentFrame.getCurrentStack = null;

  ReactDebugCurrentFrame.getStackAddendum = function () {
    var stack = ''; // Add an extra top frame while an element is being validated

    if (currentExtraStackFrame) {
      stack += currentExtraStackFrame;
    } // Delegate to the injected renderer-specific implementation


    var impl = ReactDebugCurrentFrame.getCurrentStack;

    if (impl) {
      stack += impl() || '';
    }

    return stack;
  };
}

/**
 * Used by act() to track whether you're inside an act() scope.
 */
var IsSomeRendererActing = {
  current: false
};

var ReactSharedInternals = {
  ReactCurrentDispatcher: ReactCurrentDispatcher,
  ReactCurrentBatchConfig: ReactCurrentBatchConfig,
  ReactCurrentOwner: ReactCurrentOwner,
  IsSomeRendererActing: IsSomeRendererActing,
  // Used by renderers to avoid bundling object-assign twice in UMD bundles:
  assign: _assign
};

{
  ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
}

// by calls to these methods by a Babel plugin.
//
// In PROD (or in packages without access to React internals),
// they are left as they are instead.

function warn(format) {
  {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    printWarning('warn', format, args);
  }
}
function error(format) {
  {
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }

    printWarning('error', format, args);
  }
}

function printWarning(level, format, args) {
  // When changing this logic, you might want to also
  // update consoleWithStackDev.www.js as well.
  {
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var stack = ReactDebugCurrentFrame.getStackAddendum();

    if (stack !== '') {
      format += '%s';
      args = args.concat([stack]);
    }

    var argsWithFormat = args.map(function (item) {
      return '' + item;
    }); // Careful: RN currently depends on this prefix

    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
    // breaks IE9: https://github.com/facebook/react/issues/13610
    // eslint-disable-next-line react-internal/no-production-logging

    Function.prototype.apply.call(console[level], console, argsWithFormat);
  }
}

var didWarnStateUpdateForUnmountedComponent = {};

function warnNoop(publicInstance, callerName) {
  {
    var _constructor = publicInstance.constructor;
    var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
    var warningKey = componentName + "." + callerName;

    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
      return;
    }

    error("Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);

    didWarnStateUpdateForUnmountedComponent[warningKey] = true;
  }
}
/**
 * This is the abstract API for an update queue.
 */


var ReactNoopUpdateQueue = {
  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    return false;
  },

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance, callback, callerName) {
    warnNoop(publicInstance, 'forceUpdate');
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
    warnNoop(publicInstance, 'replaceState');
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} Name of the calling function in the public API.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState, callback, callerName) {
    warnNoop(publicInstance, 'setState');
  }
};

var emptyObject = {};

{
  Object.freeze(emptyObject);
}
/**
 * Base class helpers for the updating state of a component.
 */


function Component(props, context, updater) {
  this.props = props;
  this.context = context; // If a component has string refs, we will assign a different object later.

  this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
  // renderer.

  this.updater = updater || ReactNoopUpdateQueue;
}

Component.prototype.isReactComponent = {};
/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */

Component.prototype.setState = function (partialState, callback) {
  if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) {
    {
      throw Error( "setState(...): takes an object of state variables to update or a function which returns an object of state variables." );
    }
  }

  this.updater.enqueueSetState(this, partialState, callback, 'setState');
};
/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */


Component.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
};
/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */


{
  var deprecatedAPIs = {
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
  };

  var defineDeprecationWarning = function (methodName, info) {
    Object.defineProperty(Component.prototype, methodName, {
      get: function () {
        warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);

        return undefined;
      }
    });
  };

  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

function ComponentDummy() {}

ComponentDummy.prototype = Component.prototype;
/**
 * Convenience component with default shallow equality check for sCU.
 */

function PureComponent(props, context, updater) {
  this.props = props;
  this.context = context; // If a component has string refs, we will assign a different object later.

  this.refs = emptyObject;
  this.updater = updater || ReactNoopUpdateQueue;
}

var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.

_assign(pureComponentPrototype, Component.prototype);

pureComponentPrototype.isPureReactComponent = true;

// an immutable object with a single mutable value
function createRef() {
  var refObject = {
    current: null
  };

  {
    Object.seal(refObject);
  }

  return refObject;
}

function getWrappedName(outerType, innerType, wrapperName) {
  var functionName = innerType.displayName || innerType.name || '';
  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
}

function getContextName(type) {
  return type.displayName || 'Context';
}

function getComponentName(type) {
  if (type == null) {
    // Host root, text node or just invalid type.
    return null;
  }

  {
    if (typeof type.tag === 'number') {
      error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
    }
  }

  if (typeof type === 'function') {
    return type.displayName || type.name || null;
  }

  if (typeof type === 'string') {
    return type;
  }

  switch (type) {
    case exports.Fragment:
      return 'Fragment';

    case REACT_PORTAL_TYPE:
      return 'Portal';

    case exports.Profiler:
      return 'Profiler';

    case exports.StrictMode:
      return 'StrictMode';

    case exports.Suspense:
      return 'Suspense';

    case REACT_SUSPENSE_LIST_TYPE:
      return 'SuspenseList';
  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        var context = type;
        return getContextName(context) + '.Consumer';

      case REACT_PROVIDER_TYPE:
        var provider = type;
        return getContextName(provider._context) + '.Provider';

      case REACT_FORWARD_REF_TYPE:
        return getWrappedName(type, type.render, 'ForwardRef');

      case REACT_MEMO_TYPE:
        return getComponentName(type.type);

      case REACT_BLOCK_TYPE:
        return getComponentName(type._render);

      case REACT_LAZY_TYPE:
        {
          var lazyComponent = type;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;

          try {
            return getComponentName(init(payload));
          } catch (x) {
            return null;
          }
        }
    }
  }

  return null;
}

var hasOwnProperty = Object.prototype.hasOwnProperty;
var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};
var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;

{
  didWarnAboutStringRefs = {};
}

function hasValidRef(config) {
  {
    if (hasOwnProperty.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }

  return config.ref !== undefined;
}

function hasValidKey(config) {
  {
    if (hasOwnProperty.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }

  return config.key !== undefined;
}

function defineKeyPropWarningGetter(props, displayName) {
  var warnAboutAccessingKey = function () {
    {
      if (!specialPropKeyWarningShown) {
        specialPropKeyWarningShown = true;

        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
      }
    }
  };

  warnAboutAccessingKey.isReactWarning = true;
  Object.defineProperty(props, 'key', {
    get: warnAboutAccessingKey,
    configurable: true
  });
}

function defineRefPropWarningGetter(props, displayName) {
  var warnAboutAccessingRef = function () {
    {
      if (!specialPropRefWarningShown) {
        specialPropRefWarningShown = true;

        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
      }
    }
  };

  warnAboutAccessingRef.isReactWarning = true;
  Object.defineProperty(props, 'ref', {
    get: warnAboutAccessingRef,
    configurable: true
  });
}

function warnIfStringRefCannotBeAutoConverted(config) {
  {
    if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
      var componentName = getComponentName(ReactCurrentOwner.current.type);

      if (!didWarnAboutStringRefs[componentName]) {
        error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);

        didWarnAboutStringRefs[componentName] = true;
      }
    }
  }
}
/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */


var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allows us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,
    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,
    // Record the component responsible for creating this element.
    _owner: owner
  };

  {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.

    Object.defineProperty(element._store, 'validated', {
      configurable: false,
      enumerable: false,
      writable: true,
      value: false
    }); // self and source are DEV only properties.

    Object.defineProperty(element, '_self', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: self
    }); // Two elements created in two different places should be considered
    // equal for testing purposes and therefore we hide it from enumeration.

    Object.defineProperty(element, '_source', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: source
    });

    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);
    }
  }

  return element;
};
/**
 * Create and return a new ReactElement of the given type.
 * See https://reactjs.org/docs/react-api.html#createelement
 */

function createElement(type, config, children) {
  var propName; // Reserved names are extracted

  var props = {};
  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    if (hasValidRef(config)) {
      ref = config.ref;

      {
        warnIfStringRefCannotBeAutoConverted(config);
      }
    }

    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object

    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  } // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.


  var childrenLength = arguments.length - 2;

  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);

    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }

    {
      if (Object.freeze) {
        Object.freeze(childArray);
      }
    }

    props.children = childArray;
  } // Resolve default props


  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;

    for (propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
  }

  {
    if (key || ref) {
      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

      if (key) {
        defineKeyPropWarningGetter(props, displayName);
      }

      if (ref) {
        defineRefPropWarningGetter(props, displayName);
      }
    }
  }

  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
}
function cloneAndReplaceKey(oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
  return newElement;
}
/**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://reactjs.org/docs/react-api.html#cloneelement
 */

function cloneElement(element, config, children) {
  if (!!(element === null || element === undefined)) {
    {
      throw Error( "React.cloneElement(...): The argument must be a React element, but you passed " + element + "." );
    }
  }

  var propName; // Original props are copied

  var props = _assign({}, element.props); // Reserved names are extracted


  var key = element.key;
  var ref = element.ref; // Self is preserved since the owner is preserved.

  var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
  // transpiler, and the original source is probably a better indicator of the
  // true owner.

  var source = element._source; // Owner will be preserved, unless ref is overridden

  var owner = element._owner;

  if (config != null) {
    if (hasValidRef(config)) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }

    if (hasValidKey(config)) {
      key = '' + config.key;
    } // Remaining properties override existing props


    var defaultProps;

    if (element.type && element.type.defaultProps) {
      defaultProps = element.type.defaultProps;
    }

    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        if (config[propName] === undefined && defaultProps !== undefined) {
          // Resolve default props
          props[propName] = defaultProps[propName];
        } else {
          props[propName] = config[propName];
        }
      }
    }
  } // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.


  var childrenLength = arguments.length - 2;

  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);

    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }

    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
}
/**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */

function isValidElement(object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
}

var SEPARATOR = '.';
var SUBSEPARATOR = ':';
/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = key.replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });
  return '$' + escapedString;
}
/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */


var didWarnAboutMaps = false;
var userProvidedKeyEscapeRegex = /\/+/g;

function escapeUserProvidedKey(text) {
  return text.replace(userProvidedKeyEscapeRegex, '$&/');
}
/**
 * Generate a key string that identifies a element within a set.
 *
 * @param {*} element A element that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */


function getElementKey(element, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (typeof element === 'object' && element !== null && element.key != null) {
    // Explicit key
    return escape('' + element.key);
  } // Implicit key determined by the index in the set


  return index.toString(36);
}

function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  var invokeCallback = false;

  if (children === null) {
    invokeCallback = true;
  } else {
    switch (type) {
      case 'string':
      case 'number':
        invokeCallback = true;
        break;

      case 'object':
        switch (children.$$typeof) {
          case REACT_ELEMENT_TYPE:
          case REACT_PORTAL_TYPE:
            invokeCallback = true;
        }

    }
  }

  if (invokeCallback) {
    var _child = children;
    var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows:

    var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;

    if (Array.isArray(mappedChild)) {
      var escapedChildKey = '';

      if (childKey != null) {
        escapedChildKey = escapeUserProvidedKey(childKey) + '/';
      }

      mapIntoArray(mappedChild, array, escapedChildKey, '', function (c) {
        return c;
      });
    } else if (mappedChild != null) {
      if (isValidElement(mappedChild)) {
        mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as
        // traverseAllChildren used to do for objects as children
        escapedPrefix + ( // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
        mappedChild.key && (!_child || _child.key !== mappedChild.key) ? // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
        escapeUserProvidedKey('' + mappedChild.key) + '/' : '') + childKey);
      }

      array.push(mappedChild);
    }

    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.

  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getElementKey(child, i);
      subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
    }
  } else {
    var iteratorFn = getIteratorFn(children);

    if (typeof iteratorFn === 'function') {
      var iterableChildren = children;

      {
        // Warn about using Maps as children
        if (iteratorFn === iterableChildren.entries) {
          if (!didWarnAboutMaps) {
            warn('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');
          }

          didWarnAboutMaps = true;
        }
      }

      var iterator = iteratorFn.call(iterableChildren);
      var step;
      var ii = 0;

      while (!(step = iterator.next()).done) {
        child = step.value;
        nextName = nextNamePrefix + getElementKey(child, ii++);
        subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
      }
    } else if (type === 'object') {
      var childrenString = '' + children;

      {
        {
          throw Error( "Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + "). If you meant to render a collection of children, use an array instead." );
        }
      }
    }
  }

  return subtreeCount;
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
 *
 * The provided mapFunction(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }

  var result = [];
  var count = 0;
  mapIntoArray(children, result, '', '', function (child) {
    return func.call(context, child, count++);
  });
  return result;
}
/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrencount
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */


function countChildren(children) {
  var n = 0;
  mapChildren(children, function () {
    n++; // Don't return anything
  });
  return n;
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  mapChildren(children, function () {
    forEachFunc.apply(this, arguments); // Don't return anything.
  }, forEachContext);
}
/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
 */


function toArray(children) {
  return mapChildren(children, function (child) {
    return child;
  }) || [];
}
/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */


function onlyChild(children) {
  if (!isValidElement(children)) {
    {
      throw Error( "React.Children.only expected to receive a single React element child." );
    }
  }

  return children;
}

function createContext(defaultValue, calculateChangedBits) {
  if (calculateChangedBits === undefined) {
    calculateChangedBits = null;
  } else {
    {
      if (calculateChangedBits !== null && typeof calculateChangedBits !== 'function') {
        error('createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits);
      }
    }
  }

  var context = {
    $$typeof: REACT_CONTEXT_TYPE,
    _calculateChangedBits: calculateChangedBits,
    // As a workaround to support multiple concurrent renderers, we categorize
    // some renderers as primary and others as secondary. We only expect
    // there to be two concurrent renderers at most: React Native (primary) and
    // Fabric (secondary); React DOM (primary) and React ART (secondary).
    // Secondary renderers store their context values on separate fields.
    _currentValue: defaultValue,
    _currentValue2: defaultValue,
    // Used to track how many concurrent renderers this context currently
    // supports within in a single renderer. Such as parallel server rendering.
    _threadCount: 0,
    // These are circular
    Provider: null,
    Consumer: null
  };
  context.Provider = {
    $$typeof: REACT_PROVIDER_TYPE,
    _context: context
  };
  var hasWarnedAboutUsingNestedContextConsumers = false;
  var hasWarnedAboutUsingConsumerProvider = false;
  var hasWarnedAboutDisplayNameOnConsumer = false;

  {
    // A separate object, but proxies back to the original context object for
    // backwards compatibility. It has a different $$typeof, so we can properly
    // warn for the incorrect usage of Context as a Consumer.
    var Consumer = {
      $$typeof: REACT_CONTEXT_TYPE,
      _context: context,
      _calculateChangedBits: context._calculateChangedBits
    }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here

    Object.defineProperties(Consumer, {
      Provider: {
        get: function () {
          if (!hasWarnedAboutUsingConsumerProvider) {
            hasWarnedAboutUsingConsumerProvider = true;

            error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
          }

          return context.Provider;
        },
        set: function (_Provider) {
          context.Provider = _Provider;
        }
      },
      _currentValue: {
        get: function () {
          return context._currentValue;
        },
        set: function (_currentValue) {
          context._currentValue = _currentValue;
        }
      },
      _currentValue2: {
        get: function () {
          return context._currentValue2;
        },
        set: function (_currentValue2) {
          context._currentValue2 = _currentValue2;
        }
      },
      _threadCount: {
        get: function () {
          return context._threadCount;
        },
        set: function (_threadCount) {
          context._threadCount = _threadCount;
        }
      },
      Consumer: {
        get: function () {
          if (!hasWarnedAboutUsingNestedContextConsumers) {
            hasWarnedAboutUsingNestedContextConsumers = true;

            error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
          }

          return context.Consumer;
        }
      },
      displayName: {
        get: function () {
          return context.displayName;
        },
        set: function (displayName) {
          if (!hasWarnedAboutDisplayNameOnConsumer) {
            warn('Setting `displayName` on Context.Consumer has no effect. ' + "You should set it directly on the context with Context.displayName = '%s'.", displayName);

            hasWarnedAboutDisplayNameOnConsumer = true;
          }
        }
      }
    }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty

    context.Consumer = Consumer;
  }

  {
    context._currentRenderer = null;
    context._currentRenderer2 = null;
  }

  return context;
}

var Uninitialized = -1;
var Pending = 0;
var Resolved = 1;
var Rejected = 2;

function lazyInitializer(payload) {
  if (payload._status === Uninitialized) {
    var ctor = payload._result;
    var thenable = ctor(); // Transition to the next state.

    var pending = payload;
    pending._status = Pending;
    pending._result = thenable;
    thenable.then(function (moduleObject) {
      if (payload._status === Pending) {
        var defaultExport = moduleObject.default;

        {
          if (defaultExport === undefined) {
            error('lazy: Expected the result of a dynamic import() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + // Break up imports to avoid accidentally parsing them as dependencies.
            'const MyComponent = lazy(() => imp' + "ort('./MyComponent'))", moduleObject);
          }
        } // Transition to the next state.


        var resolved = payload;
        resolved._status = Resolved;
        resolved._result = defaultExport;
      }
    }, function (error) {
      if (payload._status === Pending) {
        // Transition to the next state.
        var rejected = payload;
        rejected._status = Rejected;
        rejected._result = error;
      }
    });
  }

  if (payload._status === Resolved) {
    return payload._result;
  } else {
    throw payload._result;
  }
}

function lazy(ctor) {
  var payload = {
    // We use these fields to store the result.
    _status: -1,
    _result: ctor
  };
  var lazyType = {
    $$typeof: REACT_LAZY_TYPE,
    _payload: payload,
    _init: lazyInitializer
  };

  {
    // In production, this would just set it on the object.
    var defaultProps;
    var propTypes; // $FlowFixMe

    Object.defineProperties(lazyType, {
      defaultProps: {
        configurable: true,
        get: function () {
          return defaultProps;
        },
        set: function (newDefaultProps) {
          error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

          defaultProps = newDefaultProps; // Match production behavior more closely:
          // $FlowFixMe

          Object.defineProperty(lazyType, 'defaultProps', {
            enumerable: true
          });
        }
      },
      propTypes: {
        configurable: true,
        get: function () {
          return propTypes;
        },
        set: function (newPropTypes) {
          error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

          propTypes = newPropTypes; // Match production behavior more closely:
          // $FlowFixMe

          Object.defineProperty(lazyType, 'propTypes', {
            enumerable: true
          });
        }
      }
    });
  }

  return lazyType;
}

function forwardRef(render) {
  {
    if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
      error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
    } else if (typeof render !== 'function') {
      error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
    } else {
      if (render.length !== 0 && render.length !== 2) {
        error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
      }
    }

    if (render != null) {
      if (render.defaultProps != null || render.propTypes != null) {
        error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');
      }
    }
  }

  var elementType = {
    $$typeof: REACT_FORWARD_REF_TYPE,
    render: render
  };

  {
    var ownName;
    Object.defineProperty(elementType, 'displayName', {
      enumerable: false,
      configurable: true,
      get: function () {
        return ownName;
      },
      set: function (name) {
        ownName = name;

        if (render.displayName == null) {
          render.displayName = name;
        }
      }
    });
  }

  return elementType;
}

// Filter certain DOM attributes (e.g. src, href) if their values are empty strings.

var enableScopeAPI = false; // Experimental Create Event Handle API.

function isValidElementType(type) {
  if (typeof type === 'string' || typeof type === 'function') {
    return true;
  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


  if (type === exports.Fragment || type === exports.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports.StrictMode || type === exports.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI ) {
    return true;
  }

  if (typeof type === 'object' && type !== null) {
    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
      return true;
    }
  }

  return false;
}

function memo(type, compare) {
  {
    if (!isValidElementType(type)) {
      error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
    }
  }

  var elementType = {
    $$typeof: REACT_MEMO_TYPE,
    type: type,
    compare: compare === undefined ? null : compare
  };

  {
    var ownName;
    Object.defineProperty(elementType, 'displayName', {
      enumerable: false,
      configurable: true,
      get: function () {
        return ownName;
      },
      set: function (name) {
        ownName = name;

        if (type.displayName == null) {
          type.displayName = name;
        }
      }
    });
  }

  return elementType;
}

function resolveDispatcher() {
  var dispatcher = ReactCurrentDispatcher.current;

  if (!(dispatcher !== null)) {
    {
      throw Error( "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem." );
    }
  }

  return dispatcher;
}

function useContext(Context, unstable_observedBits) {
  var dispatcher = resolveDispatcher();

  {
    if (unstable_observedBits !== undefined) {
      error('useContext() second argument is reserved for future ' + 'use in React. Passing it is not supported. ' + 'You passed: %s.%s', unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? '\n\nDid you call array.map(useContext)? ' + 'Calling Hooks inside a loop is not supported. ' + 'Learn more at https://reactjs.org/link/rules-of-hooks' : '');
    } // TODO: add a more generic warning for invalid values.


    if (Context._context !== undefined) {
      var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
      // and nobody should be using this in existing code.

      if (realContext.Consumer === Context) {
        error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
      } else if (realContext.Provider === Context) {
        error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
      }
    }
  }

  return dispatcher.useContext(Context, unstable_observedBits);
}
function useState(initialState) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useState(initialState);
}
function useReducer(reducer, initialArg, init) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useReducer(reducer, initialArg, init);
}
function useRef(initialValue) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useRef(initialValue);
}
function useEffect(create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useEffect(create, deps);
}
function useLayoutEffect(create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useLayoutEffect(create, deps);
}
function useCallback(callback, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useCallback(callback, deps);
}
function useMemo(create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useMemo(create, deps);
}
function useImperativeHandle(ref, create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useImperativeHandle(ref, create, deps);
}
function useDebugValue(value, formatterFn) {
  {
    var dispatcher = resolveDispatcher();
    return dispatcher.useDebugValue(value, formatterFn);
  }
}

// Helpers to patch console.logs to avoid logging during side-effect free
// replaying on render function. This currently only patches the object
// lazily which won't cover if the log function was extracted eagerly.
// We could also eagerly patch the method.
var disabledDepth = 0;
var prevLog;
var prevInfo;
var prevWarn;
var prevError;
var prevGroup;
var prevGroupCollapsed;
var prevGroupEnd;

function disabledLog() {}

disabledLog.__reactDisabledLog = true;
function disableLogs() {
  {
    if (disabledDepth === 0) {
      /* eslint-disable react-internal/no-production-logging */
      prevLog = console.log;
      prevInfo = console.info;
      prevWarn = console.warn;
      prevError = console.error;
      prevGroup = console.group;
      prevGroupCollapsed = console.groupCollapsed;
      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

      var props = {
        configurable: true,
        enumerable: true,
        value: disabledLog,
        writable: true
      }; // $FlowFixMe Flow thinks console is immutable.

      Object.defineProperties(console, {
        info: props,
        log: props,
        warn: props,
        error: props,
        group: props,
        groupCollapsed: props,
        groupEnd: props
      });
      /* eslint-enable react-internal/no-production-logging */
    }

    disabledDepth++;
  }
}
function reenableLogs() {
  {
    disabledDepth--;

    if (disabledDepth === 0) {
      /* eslint-disable react-internal/no-production-logging */
      var props = {
        configurable: true,
        enumerable: true,
        writable: true
      }; // $FlowFixMe Flow thinks console is immutable.

      Object.defineProperties(console, {
        log: _assign({}, props, {
          value: prevLog
        }),
        info: _assign({}, props, {
          value: prevInfo
        }),
        warn: _assign({}, props, {
          value: prevWarn
        }),
        error: _assign({}, props, {
          value: prevError
        }),
        group: _assign({}, props, {
          value: prevGroup
        }),
        groupCollapsed: _assign({}, props, {
          value: prevGroupCollapsed
        }),
        groupEnd: _assign({}, props, {
          value: prevGroupEnd
        })
      });
      /* eslint-enable react-internal/no-production-logging */
    }

    if (disabledDepth < 0) {
      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
    }
  }
}

var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
var prefix;
function describeBuiltInComponentFrame(name, source, ownerFn) {
  {
    if (prefix === undefined) {
      // Extract the VM specific prefix used by each line.
      try {
        throw Error();
      } catch (x) {
        var match = x.stack.trim().match(/\n( *(at )?)/);
        prefix = match && match[1] || '';
      }
    } // We use the prefix to ensure our stacks line up with native stack frames.


    return '\n' + prefix + name;
  }
}
var reentry = false;
var componentFrameCache;

{
  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
  componentFrameCache = new PossiblyWeakMap();
}

function describeNativeComponentFrame(fn, construct) {
  // If something asked for a stack inside a fake render, it should get ignored.
  if (!fn || reentry) {
    return '';
  }

  {
    var frame = componentFrameCache.get(fn);

    if (frame !== undefined) {
      return frame;
    }
  }

  var control;
  reentry = true;
  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

  Error.prepareStackTrace = undefined;
  var previousDispatcher;

  {
    previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function
    // for warnings.

    ReactCurrentDispatcher$1.current = null;
    disableLogs();
  }

  try {
    // This should throw.
    if (construct) {
      // Something should be setting the props in the constructor.
      var Fake = function () {
        throw Error();
      }; // $FlowFixMe


      Object.defineProperty(Fake.prototype, 'props', {
        set: function () {
          // We use a throwing setter instead of frozen or non-writable props
          // because that won't throw in a non-strict mode function.
          throw Error();
        }
      });

      if (typeof Reflect === 'object' && Reflect.construct) {
        // We construct a different control for this case to include any extra
        // frames added by the construct call.
        try {
          Reflect.construct(Fake, []);
        } catch (x) {
          control = x;
        }

        Reflect.construct(fn, [], Fake);
      } else {
        try {
          Fake.call();
        } catch (x) {
          control = x;
        }

        fn.call(Fake.prototype);
      }
    } else {
      try {
        throw Error();
      } catch (x) {
        control = x;
      }

      fn();
    }
  } catch (sample) {
    // This is inlined manually because closure doesn't do it for us.
    if (sample && control && typeof sample.stack === 'string') {
      // This extracts the first frame from the sample that isn't also in the control.
      // Skipping one frame that we assume is the frame that calls the two.
      var sampleLines = sample.stack.split('\n');
      var controlLines = control.stack.split('\n');
      var s = sampleLines.length - 1;
      var c = controlLines.length - 1;

      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
        // We expect at least one stack frame to be shared.
        // Typically this will be the root most one. However, stack frames may be
        // cut off due to maximum stack limits. In this case, one maybe cut off
        // earlier than the other. We assume that the sample is longer or the same
        // and there for cut off earlier. So we should find the root most frame in
        // the sample somewhere in the control.
        c--;
      }

      for (; s >= 1 && c >= 0; s--, c--) {
        // Next we find the first one that isn't the same which should be the
        // frame that called our sample function and the control.
        if (sampleLines[s] !== controlLines[c]) {
          // In V8, the first line is describing the message but other VMs don't.
          // If we're about to return the first line, and the control is also on the same
          // line, that's a pretty good indicator that our sample threw at same line as
          // the control. I.e. before we entered the sample frame. So we ignore this result.
          // This can happen if you passed a class to function component, or non-function.
          if (s !== 1 || c !== 1) {
            do {
              s--;
              c--; // We may still have similar intermediate frames from the construct call.
              // The next one that isn't the same should be our match though.

              if (c < 0 || sampleLines[s] !== controlLines[c]) {
                // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');

                {
                  if (typeof fn === 'function') {
                    componentFrameCache.set(fn, _frame);
                  }
                } // Return the line we found.


                return _frame;
              }
            } while (s >= 1 && c >= 0);
          }

          break;
        }
      }
    }
  } finally {
    reentry = false;

    {
      ReactCurrentDispatcher$1.current = previousDispatcher;
      reenableLogs();
    }

    Error.prepareStackTrace = previousPrepareStackTrace;
  } // Fallback to just using the name if we couldn't make it throw.


  var name = fn ? fn.displayName || fn.name : '';
  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

  {
    if (typeof fn === 'function') {
      componentFrameCache.set(fn, syntheticFrame);
    }
  }

  return syntheticFrame;
}
function describeFunctionComponentFrame(fn, source, ownerFn) {
  {
    return describeNativeComponentFrame(fn, false);
  }
}

function shouldConstruct(Component) {
  var prototype = Component.prototype;
  return !!(prototype && prototype.isReactComponent);
}

function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {

  if (type == null) {
    return '';
  }

  if (typeof type === 'function') {
    {
      return describeNativeComponentFrame(type, shouldConstruct(type));
    }
  }

  if (typeof type === 'string') {
    return describeBuiltInComponentFrame(type);
  }

  switch (type) {
    case exports.Suspense:
      return describeBuiltInComponentFrame('Suspense');

    case REACT_SUSPENSE_LIST_TYPE:
      return describeBuiltInComponentFrame('SuspenseList');
  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_FORWARD_REF_TYPE:
        return describeFunctionComponentFrame(type.render);

      case REACT_MEMO_TYPE:
        // Memo may contain any component type so we recursively resolve it.
        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

      case REACT_BLOCK_TYPE:
        return describeFunctionComponentFrame(type._render);

      case REACT_LAZY_TYPE:
        {
          var lazyComponent = type;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;

          try {
            // Lazy may contain any component type so we recursively resolve it.
            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
          } catch (x) {}
        }
    }
  }

  return '';
}

var loggedTypeFailures = {};
var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

function setCurrentlyValidatingElement(element) {
  {
    if (element) {
      var owner = element._owner;
      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
    } else {
      ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
  }
}

function checkPropTypes(typeSpecs, values, location, componentName, element) {
  {
    // $FlowFixMe This is okay but Flow doesn't know it.
    var has = Function.call.bind(Object.prototype.hasOwnProperty);

    for (var typeSpecName in typeSpecs) {
      if (has(typeSpecs, typeSpecName)) {
        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.

        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
            err.name = 'Invariant Violation';
            throw err;
          }

          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
        } catch (ex) {
          error$1 = ex;
        }

        if (error$1 && !(error$1 instanceof Error)) {
          setCurrentlyValidatingElement(element);

          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);

          setCurrentlyValidatingElement(null);
        }

        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error$1.message] = true;
          setCurrentlyValidatingElement(element);

          error('Failed %s type: %s', location, error$1.message);

          setCurrentlyValidatingElement(null);
        }
      }
    }
  }
}

function setCurrentlyValidatingElement$1(element) {
  {
    if (element) {
      var owner = element._owner;
      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
      setExtraStackFrame(stack);
    } else {
      setExtraStackFrame(null);
    }
  }
}

var propTypesMisspellWarningShown;

{
  propTypesMisspellWarningShown = false;
}

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = getComponentName(ReactCurrentOwner.current.type);

    if (name) {
      return '\n\nCheck the render method of `' + name + '`.';
    }
  }

  return '';
}

function getSourceInfoErrorAddendum(source) {
  if (source !== undefined) {
    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
    var lineNumber = source.lineNumber;
    return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
  }

  return '';
}

function getSourceInfoErrorAddendumForProps(elementProps) {
  if (elementProps !== null && elementProps !== undefined) {
    return getSourceInfoErrorAddendum(elementProps.__source);
  }

  return '';
}
/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */


var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  var info = getDeclarationErrorAddendum();

  if (!info) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

    if (parentName) {
      info = "\n\nCheck the top-level render call using <" + parentName + ">.";
    }
  }

  return info;
}
/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */


function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }

  element._store.validated = true;
  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
    return;
  }

  ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.

  var childOwner = '';

  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
    // Give the component that originally created this child.
    childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
  }

  {
    setCurrentlyValidatingElement$1(element);

    error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);

    setCurrentlyValidatingElement$1(null);
  }
}
/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */


function validateChildKeys(node, parentType) {
  if (typeof node !== 'object') {
    return;
  }

  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];

      if (isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (isValidElement(node)) {
    // This element was passed in a valid location.
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = getIteratorFn(node);

    if (typeof iteratorFn === 'function') {
      // Entry iterators used to provide implicit keys,
      // but now we print a separate warning for them later.
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;

        while (!(step = iterator.next()).done) {
          if (isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}
/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */


function validatePropTypes(element) {
  {
    var type = element.type;

    if (type === null || type === undefined || typeof type === 'string') {
      return;
    }

    var propTypes;

    if (typeof type === 'function') {
      propTypes = type.propTypes;
    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
    // Inner props are checked in the reconciler.
    type.$$typeof === REACT_MEMO_TYPE)) {
      propTypes = type.propTypes;
    } else {
      return;
    }

    if (propTypes) {
      // Intentionally inside to avoid triggering lazy initializers:
      var name = getComponentName(type);
      checkPropTypes(propTypes, element.props, 'prop', name, element);
    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:

      var _name = getComponentName(type);

      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
    }

    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
    }
  }
}
/**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */


function validateFragmentProps(fragment) {
  {
    var keys = Object.keys(fragment.props);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];

      if (key !== 'children' && key !== 'key') {
        setCurrentlyValidatingElement$1(fragment);

        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);

        setCurrentlyValidatingElement$1(null);
        break;
      }
    }

    if (fragment.ref !== null) {
      setCurrentlyValidatingElement$1(fragment);

      error('Invalid attribute `ref` supplied to `React.Fragment`.');

      setCurrentlyValidatingElement$1(null);
    }
  }
}
function createElementWithValidation(type, props, children) {
  var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
  // succeed and there will likely be errors in render.

  if (!validType) {
    var info = '';

    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
      info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
    }

    var sourceInfo = getSourceInfoErrorAddendumForProps(props);

    if (sourceInfo) {
      info += sourceInfo;
    } else {
      info += getDeclarationErrorAddendum();
    }

    var typeString;

    if (type === null) {
      typeString = 'null';
    } else if (Array.isArray(type)) {
      typeString = 'array';
    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
      typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
      info = ' Did you accidentally export a JSX literal instead of a component?';
    } else {
      typeString = typeof type;
    }

    {
      error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
    }
  }

  var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
  // TODO: Drop this when these are no longer allowed as the type argument.

  if (element == null) {
    return element;
  } // Skip key warning if the type isn't valid since our key validation logic
  // doesn't expect a non-string/function type and can throw confusing errors.
  // We don't want exception behavior to differ between dev and prod.
  // (Rendering will throw with a helpful message and as soon as the type is
  // fixed, the key warnings will appear.)


  if (validType) {
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], type);
    }
  }

  if (type === exports.Fragment) {
    validateFragmentProps(element);
  } else {
    validatePropTypes(element);
  }

  return element;
}
var didWarnAboutDeprecatedCreateFactory = false;
function createFactoryWithValidation(type) {
  var validatedFactory = createElementWithValidation.bind(null, type);
  validatedFactory.type = type;

  {
    if (!didWarnAboutDeprecatedCreateFactory) {
      didWarnAboutDeprecatedCreateFactory = true;

      warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');
    } // Legacy hook: remove it


    Object.defineProperty(validatedFactory, 'type', {
      enumerable: false,
      get: function () {
        warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');

        Object.defineProperty(this, 'type', {
          value: type
        });
        return type;
      }
    });
  }

  return validatedFactory;
}
function cloneElementWithValidation(element, props, children) {
  var newElement = cloneElement.apply(this, arguments);

  for (var i = 2; i < arguments.length; i++) {
    validateChildKeys(arguments[i], newElement.type);
  }

  validatePropTypes(newElement);
  return newElement;
}

{

  try {
    var frozenObject = Object.freeze({});
    /* eslint-disable no-new */

    new Map([[frozenObject, null]]);
    new Set([frozenObject]);
    /* eslint-enable no-new */
  } catch (e) {
  }
}

var createElement$1 =  createElementWithValidation ;
var cloneElement$1 =  cloneElementWithValidation ;
var createFactory =  createFactoryWithValidation ;
var Children = {
  map: mapChildren,
  forEach: forEachChildren,
  count: countChildren,
  toArray: toArray,
  only: onlyChild
};

exports.Children = Children;
exports.Component = Component;
exports.PureComponent = PureComponent;
exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
exports.cloneElement = cloneElement$1;
exports.createContext = createContext;
exports.createElement = createElement$1;
exports.createFactory = createFactory;
exports.createRef = createRef;
exports.forwardRef = forwardRef;
exports.isValidElement = isValidElement;
exports.lazy = lazy;
exports.memo = memo;
exports.useCallback = useCallback;
exports.useContext = useContext;
exports.useDebugValue = useDebugValue;
exports.useEffect = useEffect;
exports.useImperativeHandle = useImperativeHandle;
exports.useLayoutEffect = useLayoutEffect;
exports.useMemo = useMemo;
exports.useReducer = useReducer;
exports.useRef = useRef;
exports.useState = useState;
exports.version = ReactVersion;
  })();
}


/***/ }),

/***/ "./node_modules/react/index.js":
/*!*************************************!*\
  !*** ./node_modules/react/index.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/react.development.js */ "./node_modules/react/cjs/react.development.js");
}


/***/ }),

/***/ "./node_modules/react/jsx-dev-runtime.js":
/*!***********************************************!*\
  !*** ./node_modules/react/jsx-dev-runtime.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/react-jsx-dev-runtime.development.js */ "./node_modules/react/cjs/react-jsx-dev-runtime.development.js");
}


/***/ }),

/***/ "./node_modules/regenerator-runtime/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; };
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function define(obj, key, value) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
    return obj[key];
  }
  try {
    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
    define({}, "");
  } catch (err) {
    define = function(obj, key, value) {
      return obj[key] = value;
    };
  }

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) });

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = GeneratorFunctionPrototype;
  defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: true });
  defineProperty(
    GeneratorFunctionPrototype,
    "constructor",
    { value: GeneratorFunction, configurable: true }
  );
  GeneratorFunction.displayName = define(
    GeneratorFunctionPrototype,
    toStringTagSymbol,
    "GeneratorFunction"
  );

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      define(prototype, method, function(arg) {
        return this._invoke(method, arg);
      });
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      define(genFun, toStringTagSymbol, "GeneratorFunction");
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    defineProperty(this, "_invoke", { value: enqueue });
  }

  defineIteratorMethods(AsyncIterator.prototype);
  define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  });
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var methodName = context.method;
    var method = delegate.iterator[methodName];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method, or a missing .next mehtod, always terminate the
      // yield* loop.
      context.delegate = null;

      // Note: ["return"] must be used for ES3 parsing compatibility.
      if (methodName === "throw" && delegate.iterator["return"]) {
        // If the delegate iterator has a return method, give it a
        // chance to clean up.
        context.method = "return";
        context.arg = undefined;
        maybeInvokeDelegate(delegate, context);

        if (context.method === "throw") {
          // If maybeInvokeDelegate(context) changed context.method from
          // "return" to "throw", let that override the TypeError below.
          return ContinueSentinel;
        }
      }
      if (methodName !== "return") {
        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a '" + methodName + "' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  define(Gp, toStringTagSymbol, "Generator");

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  define(Gp, iteratorSymbol, function() {
    return this;
  });

  define(Gp, "toString", function() {
    return "[object Generator]";
  });

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(val) {
    var object = Object(val);
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   true ? module.exports : undefined
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, in modern engines
  // we can explicitly access globalThis. In older engines we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  if (typeof globalThis === "object") {
    globalThis.regeneratorRuntime = runtime;
  } else {
    Function("r", "regeneratorRuntime = r")(runtime);
  }
}


/***/ }),

/***/ "./pages/_app.js":
/*!***********************!*\
  !*** ./pages/_app.js ***!
  \***********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(module) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return App; });
/* harmony import */ var C_MyDrive_DeskFolder_Development_gammo_webapp_main_node_modules_next_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty */ "./node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-dev-runtime */ "./node_modules/react/jsx-dev-runtime.js");
/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var next_auth_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next-auth/client */ "./node_modules/next-auth/client.js");
/* harmony import */ var next_auth_client__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_auth_client__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/head */ "./node_modules/next/head.js");
/* harmony import */ var next_head__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_head__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _styles_css__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./styles.css */ "./pages/styles.css");
/* harmony import */ var _styles_css__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_styles_css__WEBPACK_IMPORTED_MODULE_4__);


var _jsxFileName = "C:\\MyDrive\\DeskFolder\\Development\\gammo-webapp-main\\pages\\_app.js";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { Object(C_MyDrive_DeskFolder_Development_gammo_webapp_main_node_modules_next_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__["default"])(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }




function App(_ref) {
  var Component = _ref.Component,
      pageProps = _ref.pageProps;
  return /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__["jsxDEV"])(next_auth_client__WEBPACK_IMPORTED_MODULE_2__["Provider"] // Provider options are not required but can be useful in situations where
  // you have a short session maxAge time. Shown here with default values.
  , {
    options: {
      // Client Max Age controls how often the useSession in the client should
      // contact the server to sync the session state. Value in seconds.
      // e.g.
      // * 0  - Disabled (always use cache value)
      // * 60 - Sync session state with server if it's older than 60 seconds
      clientMaxAge: 0,
      // Keep Alive tells windows / tabs that are signed in to keep sending
      // a keep alive request (which extends the current session expiry) to
      // prevent sessions in open windows from expiring. Value in seconds.
      //
      // Note: If a session has expired when keep alive is triggered, all open
      // windows / tabs will be updated to reflect the user is signed out.
      keepAlive: 0
    },
    session: pageProps.session,
    children: /*#__PURE__*/Object(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_1__["jsxDEV"])(Component, _objectSpread({}, pageProps), void 0, false, {
      fileName: _jsxFileName,
      lineNumber: 26,
      columnNumber: 7
    }, this)
  }, void 0, false, {
    fileName: _jsxFileName,
    lineNumber: 7,
    columnNumber: 5
  }, this);
}
_c = App;

var _c;

$RefreshReg$(_c, "App");

;
    var _a, _b;
    // Legacy CSS implementations will `eval` browser code in a Node.js context
    // to extract CSS. For backwards compatibility, we need to check we're in a
    // browser context before continuing.
    if (typeof self !== 'undefined' &&
        // AMP / No-JS mode does not inject these helpers:
        '$RefreshHelpers$' in self) {
        var currentExports = module.__proto__.exports;
        var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;
        // This cannot happen in MainTemplate because the exports mismatch between
        // templating and execution.
        self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.i);
        // A module can be accepted automatically based on its exports, e.g. when
        // it is a Refresh Boundary.
        if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {
            // Save the previous exports on update so we can compare the boundary
            // signatures.
            module.hot.dispose(function (data) {
                data.prevExports = currentExports;
            });
            // Unconditionally accept an update to this module, we'll check if it's
            // still a Refresh Boundary later.
            module.hot.accept();
            // This field is set when the previous version of this module was a
            // Refresh Boundary, letting us know we need to check for invalidation or
            // enqueue an update.
            if (prevExports !== null) {
                // A boundary can become ineligible if its exports are incompatible
                // with the previous exports.
                //
                // For example, if you add/remove/change exports, we'll want to
                // re-execute the importing modules, and force those components to
                // re-render. Similarly, if you convert a class component to a
                // function, we want to invalidate the boundary.
                if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {
                    module.hot.invalidate();
                }
                else {
                    self.$RefreshHelpers$.scheduleUpdate();
                }
            }
        }
        else {
            // Since we just executed the code for the module, it's possible that the
            // new exports made it ineligible for being a boundary.
            // We only care about the case when we were _previously_ a boundary,
            // because we already accepted this update (accidental side effect).
            var isNoLongerABoundary = prevExports !== null;
            if (isNoLongerABoundary) {
                module.hot.invalidate();
            }
        }
    }

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node_modules/next/dist/compiled/webpack/harmony-module.js */ "./node_modules/next/dist/compiled/webpack/harmony-module.js")(module)))

/***/ }),

/***/ "./pages/styles.css":
/*!**************************!*\
  !*** ./pages/styles.css ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var api = __webpack_require__(/*! ../node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js */ "./node_modules/next/dist/build/webpack/loaders/next-style-loader/runtime/injectStylesIntoStyleTag.js");
            var content = __webpack_require__(/*! !../node_modules/next/dist/compiled/css-loader/cjs.js??ref--5-oneOf-6-1!../node_modules/next/dist/compiled/postcss-loader/cjs.js??ref--5-oneOf-6-2!./styles.css */ "./node_modules/next/dist/compiled/css-loader/cjs.js?!./node_modules/next/dist/compiled/postcss-loader/cjs.js?!./pages/styles.css");

            content = content.__esModule ? content.default : content;

            if (typeof content === 'string') {
              content = [[module.i, content, '']];
            }

var options = {};

options.insert = function(element){// These elements should always exist. If they do not,
// this code should fail.
var anchorElement=document.querySelector('#__next_css__DO_NOT_USE__');var parentNode=anchorElement.parentNode;// Normally <head>
// Each style tag should be placed right before our
// anchor. By inserting before and not after, we do not
// need to track the last inserted element.
parentNode.insertBefore(element,anchorElement);};
options.singleton = false;

var update = api(content, options);


if (true) {
  if (!content.locals || module.hot.invalidate) {
    var isEqualLocals = function isEqualLocals(a,b,isNamedExport){if(!a&&b||a&&!b){return false;}let p;for(p in a){if(isNamedExport&&p==='default'){// eslint-disable-next-line no-continue
continue;}if(a[p]!==b[p]){return false;}}for(p in b){if(isNamedExport&&p==='default'){// eslint-disable-next-line no-continue
continue;}if(!a[p]){return false;}}return true;};
    var oldLocals = content.locals;

    module.hot.accept(
      /*! !../node_modules/next/dist/compiled/css-loader/cjs.js??ref--5-oneOf-6-1!../node_modules/next/dist/compiled/postcss-loader/cjs.js??ref--5-oneOf-6-2!./styles.css */ "./node_modules/next/dist/compiled/css-loader/cjs.js?!./node_modules/next/dist/compiled/postcss-loader/cjs.js?!./pages/styles.css",
      function () {
        content = __webpack_require__(/*! !../node_modules/next/dist/compiled/css-loader/cjs.js??ref--5-oneOf-6-1!../node_modules/next/dist/compiled/postcss-loader/cjs.js??ref--5-oneOf-6-2!./styles.css */ "./node_modules/next/dist/compiled/css-loader/cjs.js?!./node_modules/next/dist/compiled/postcss-loader/cjs.js?!./pages/styles.css");

              content = content.__esModule ? content.default : content;

              if (typeof content === 'string') {
                content = [[module.i, content, '']];
              }

              if (!isEqualLocals(oldLocals, content.locals)) {
                module.hot.invalidate();

                return;
              }

              oldLocals = content.locals;

              update(content);
      }
    )
  }

  module.hot.dispose(function() {
    update();
  });
}

module.exports = content.locals || {};

/***/ }),

/***/ 0:
/*!*******************************************************************************************************************************************!*\
  !*** multi next-client-pages-loader?page=%2F_app&absolutePagePath=private-next-pages%2F_app.js ./node_modules/next/dist/client/router.js ***!
  \*******************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! next-client-pages-loader?page=%2F_app&absolutePagePath=private-next-pages%2F_app.js! */"./node_modules/next/dist/build/webpack/loaders/next-client-pages-loader.js?page=%2F_app&absolutePagePath=private-next-pages%2F_app.js!./");
module.exports = __webpack_require__(/*! C:\MyDrive\DeskFolder\Development\gammo-webapp-main\node_modules\next\dist\client\router.js */"./node_modules/next/dist/client/router.js");


/***/ })

},[[0,"webpack"]]]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,